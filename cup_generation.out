Warning : Scanner at 2482(41): Unrecognized character '(' -- ignored
Warning : Scanner at 2482(42): Unrecognized character ')' -- ignored
Warning : Terminal "defer" was declared but never used
Warning : Terminal "chan_op" was declared but never used
Warning : Terminal "range" was declared but never used
Warning : Terminal "fallthrough" was declared but never used
Warning : Terminal "go" was declared but never used
Warning : Terminal "interfaced" was declared but never used
Warning : Terminal "struct" was declared but never used
Warning : Terminal "tri_dot" was declared but never used
Warning : Terminal "short_ass" was declared but never used
Warning : Terminal "map" was declared but never used
Warning : Terminal "chan" was declared but never used
Warning : Terminal "select" was declared but never used
Warning : Terminal "type" was declared but never used
Warning : Non terminal "ShortVarDecl" was declared but never used
Warning : Non terminal "MethodExpr" was declared but never used
Warning : Non terminal "TypeList_unnecessary_2" was declared but never used
Warning : Non terminal "TypeList_unnecessary_1" was declared but never used
Warning : Non terminal "MethodSpec" was declared but never used
Warning : Non terminal "ExprSwitchStmt_unnecessary_2" was declared but never used
Warning : Non terminal "ExprSwitchStmt_unnecessary_1" was declared but never used
Warning : Non terminal "CompositeLit" was declared but never used
Warning : Non terminal "MethodDecl_unnecessary_1" was declared but never used
Warning : Non terminal "RecvExpr" was declared but never used
Warning : Non terminal "FunctionLit" was declared but never used
Warning : Non terminal "Selector" was declared but never used
Warning : Non terminal "RecvStmt_unncessary_1" was declared but never used
Warning : Non terminal "ExpressionList_unnecessary_1_dash" was declared but never used
Warning : Non terminal "Arguments_unnecessary_5" was declared but never used
Warning : Non terminal "FieldName" was declared but never used
Warning : Non terminal "Arguments_unnecessary_4" was declared but never used
Warning : Non terminal "ExprSwitchCase" was declared but never used
Warning : Non terminal "Arguments_unnecessary_3" was declared but never used
Warning : Non terminal "ReceiverType" was declared but never used
Warning : Non terminal "Arguments_unnecessary_2" was declared but never used
Warning : Non terminal "Arguments_unnecessary_1" was declared but never used
Warning : Non terminal "FallthroughStmt" was declared but never used
Warning : Non terminal "TypeSwitchStmt" was declared but never used
Warning : Non terminal "RangeClause" was declared but never used
Warning : Non terminal "PostStmt_unnecessary_1" was declared but never used
Warning : Non terminal "CommClause_unnecessary_1" was declared but never used
Warning : Non terminal "IncDecStmt" was declared but never used
Warning : Non terminal "Slice" was declared but never used
Warning : Non terminal "InitStmt_unnecessary_1" was declared but never used
Warning : Non terminal "PostStmt" was declared but never used
Warning : Non terminal "Channel" was declared but never used
Warning : Non terminal "EmptyStmt" was declared but never used
Warning : Non terminal "Slice_unnecessary_3" was declared but never used
Warning : Non terminal "Slice_unnecessary_2" was declared but never used
Warning : Non terminal "Slice_unnecessary_1" was declared but never used
Warning : Non terminal "Condition" was declared but never used
Warning : Non terminal "RangeClause_unnecessary_2" was declared but never used
Warning : Non terminal "RangeClause_unnecessary_1" was declared but never used
Warning : Non terminal "Key" was declared but never used
Warning : Non terminal "ReturnStmt_unnecessary_1" was declared but never used
Warning : Non terminal "Signature_unnecessary_1" was declared but never used
Warning : Non terminal "TypeList" was declared but never used
Warning : Non terminal "Conversion" was declared but never used
Warning : Non terminal "TypeCaseClause_unnecessary_1" was declared but never used
Warning : Non terminal "InterfaceType_unnecessary_1" was declared but never used
Warning : Non terminal "Operand_unnecessary_1_dash" was declared but never used
Warning : Non terminal "WhileStmt" was declared but never used
Warning : Non terminal "Literal" was declared but never used
Warning : Non terminal "InterfaceTypeName" was declared but never used
Warning : Non terminal "ForStmt_unnecessary_3" was declared but never used
Warning : Non terminal "StructType_unnecessary_1" was declared but never used
Warning : Non terminal "Parameters_unnecessary_2" was declared but never used
Warning : Non terminal "Parameters_unnecessary_1" was declared but never used
Warning : Non terminal "QualifiedIdent_dash" was declared but never used
Warning : Non terminal "RecvStmt" was declared but never used
Warning : Non terminal "TypeCaseClause" was declared but never used
Warning : Non terminal "TypeSwitchGuard_unnecessary_2" was declared but never used
Warning : Non terminal "TypeSwitchGuard_unnecessary_1" was declared but never used
Warning : Non terminal "QualifiedIdent" was declared but never used
Warning : Non terminal "TypeSpec" was declared but never used
Warning : Non terminal "SliceType" was declared but never used
Warning : Non terminal "KeyType" was declared but never used
Warning : Non terminal "Label_unnecessary_1" was declared but never used
Warning : Non terminal "TypeSwitchStmt_unnecessary_2" was declared but never used
Warning : Non terminal "AnonymousField" was declared but never used
Warning : Non terminal "TypeSwitchStmt_unnecessary_1" was declared but never used
Warning : Non terminal "ImportSpec_unnecessary_1" was declared but never used
Warning : Non terminal "TypeDecl_unnecessary_2" was declared but never used
Warning : Non terminal "TypeDecl_unnecessary_1" was declared but never used
Warning : Non terminal "MethodDecl" was declared but never used
Warning : Non terminal "PackageName" was declared but never used
Warning : Non terminal "Func_call_ass" was declared but never used
Warning : Non terminal "CommCase" was declared but never used
Warning : Non terminal "FunctionName" was declared but never used
Warning : Non terminal "ChannelType" was declared but never used
Warning : Non terminal "ExpressionStmt" was declared but never used
Warning : Non terminal "InitStmt" was declared but never used
Warning : Non terminal "CommCase_unncessary_1" was declared but never used
Warning : Non terminal "ConstSpec_unnecessary_2" was declared but never used
Warning : Non terminal "ConstSpec_unnecessary_1" was declared but never used
Warning : Non terminal "IfBlock" was declared but never used
Warning : Non terminal "IdentifierList_unnecessary_1_dash" was declared but never used
Warning : Non terminal "Receiver" was declared but never used
Warning : Non terminal "SendStmt" was declared but never used
Warning : Non terminal "Assignment" was declared but never used
Warning : Non terminal "StructType" was declared but never used
Warning : Non terminal "Element_unnecessary_1" was declared but never used
Warning : Non terminal "TypeAssertion" was declared but never used
Warning : Non terminal "LiteralType" was declared but never used
Warning : Non terminal "Expression_unneccessary_1_dash" was declared but never used
Warning : Non terminal "Conversion_unnecessary_1" was declared but never used
Warning : Non terminal "ChannelType_unnecessary_1" was declared but never used
Warning : Non terminal "FieldDecl" was declared but never used
Warning : Non terminal "ParameterList_unnecessary_1_dash" was declared but never used
Warning : Non terminal "TypeSwitchGuard" was declared but never used
Warning : Non terminal "Arguments" was declared but never used
Warning : Non terminal "InterfaceType" was declared but never used
Warning : Non terminal "IfStmt_unnecessary_3" was declared but never used
Warning : Non terminal "IfStmt_unnecessary_2" was declared but never used
Warning : Non terminal "IfStmt_unnecessary_1" was declared but never used
Warning : Non terminal "AnonymousField_unnecessary_1" was declared but never used
Warning : Non terminal "OperandName" was declared but never used
Warning : Non terminal "GoStmt" was declared but never used
Warning : Non terminal "ParameterDecl_unnecessary_2" was declared but never used
Warning : Non terminal "ParameterDecl_unnecessary_1" was declared but never used
Warning : Non terminal "CommClause" was declared but never used
Warning : Non terminal "ForBlock" was declared but never used
Warning : Non terminal "DeferStmt" was declared but never used
Warning : Non terminal "FieldDecl_unnecessary_2" was declared but never used
Warning : Non terminal "FieldDecl_unnecessary_1" was declared but never used
Warning : Non terminal "MapType" was declared but never used
Warning : Non terminal "SelectStmt" was declared but never used
Warning : Non terminal "Result" was declared but never used
Warning : Non terminal "ImportPath" was declared but never used
Warning : Non terminal "MethodName" was declared but never used
Warning : Non terminal "ElementIndex" was declared but never used
Warning : Non terminal "TypeSwitchCase" was declared but never used
Warning : Non terminal "TypeDecl" was declared but never used
Warning : Non terminal "CommClause_unneccesary_1" was declared but never used
Warning : *** Shift/Reduce conflict found in state #80
  between ParameterDecl ::= Type (*) 
  and     Type ::= open_brac Type (*) close_brac 
  under symbol close_brac
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #70
  between C ::= identifier (*) 
  and     IdentifierList_unnecessary_1 ::= (*) comma identifier IdentifierList_unnecessary_1 
  under symbol comma
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #156
  between ElementList ::= Element ElementList_unnecessary_1 (*) 
  and     ElementList_unnecessary_1 ::= ElementList_unnecessary_1 (*) comma Element 
  under symbol comma
  Resolved in favor of shifting.

Warning : *** Production "rel_op ::= greater_equal_op " never reduced
Warning : *** Production "rel_op ::= greater_op " never reduced
Warning : *** Production "rel_op ::= less_equal_op " never reduced
Warning : *** Production "rel_op ::= less_op " never reduced
Warning : *** Production "rel_op ::= not_equal_op " never reduced
Warning : *** Production "rel_op ::= equal_equal_op " never reduced
Warning : *** Production "binary_op ::= mul_op " never reduced
Warning : *** Production "binary_op ::= add_op " never reduced
Warning : *** Production "binary_op ::= rel_op " never reduced
Warning : *** Production "binary_op ::= and_op " never reduced
Warning : *** Production "binary_op ::= or_op " never reduced
===== Terminals =====
[0]EOF [1]error [2]identifier [3]int_lit [4]imaginary_lit 
[5]float_lit [6]rune_lit [7]string_lit [8]breakd [9]defaultd 
[10]funcd [11]interfaced [12]select [13]cased [14]defer 
[15]go [16]map [17]struct [18]chan [19]elsed 
[20]gotod [21]packaged [22]switchd [23]constd [24]fallthrough 
[25]ifd [26]range [27]type [28]continued [29]ford 
[30]importd [31]returnd [32]var [33]or_op [34]and_op 
[35]equal_equal_op [36]not_equal_op [37]less_op [38]less_equal_op [39]greater_op 
[40]greater_equal_op [41]plus_op [42]minus_op [43]pipe_op [44]pow_op 
[45]star_op [46]div_op [47]mod_op [48]left_shift_op [49]right_shift_op 
[50]amp_op [51]amp_pow_op [52]not_op [53]chan_op [54]open_brac 
[55]close_brac [56]open_square_brac [57]close_square_brac [58]open_curly_brac [59]close_curly_brac 
[60]inc_op [61]short_ass [62]comma [63]semicolon [64]dec_op 
[65]tri_dot [66]dot [67]colon [68]equal 

===== Non terminals =====
[0]binary_op [1]unary_op [2]rel_op [3]add_op [4]mul_op 
[5]assign_op [6]Type [7]TypeName [8]TypeLit [9]QualifiedIdent 
[10]ArrayType [11]StructType [12]PointerType [13]FunctionType [14]InterfaceType 
[15]SliceType [16]MapType [17]ChannelType [18]ArrayLength [19]Expression 
[20]FieldDecl [21]AnonymousField [22]IdentifierList [23]Signature [24]Result 
[25]Parameters [26]ParameterList [27]ParameterDecl [28]MethodSpec [29]MethodName 
[30]InterfaceTypeName [31]KeyType [32]StatementList [33]Statement [34]Block 
[35]IfBlock [36]ForBlock [37]Declaration [38]ConstDecl [39]TypeDecl 
[40]VarDecl [41]TopLevelDecl [42]FunctionDecl [43]MethodDecl [44]ConstSpec 
[45]ExpressionList [46]TypeSpec [47]VarSpec [48]ShortVarDecl [49]FunctionName 
[50]Function [51]FunctionBody [52]Receiver [53]Operand [54]OperandName 
[55]MethodExpr [56]BasicLit [57]CompositeLit [58]FunctionLit [59]Literal 
[60]PackageName [61]LiteralType [62]LiteralValue [63]ElementList [64]Element 
[65]Key [66]Value [67]FieldName [68]ElementIndex [69]PrimaryExpr 
[70]Conversion [71]Selector [72]Index [73]Slice [74]TypeAssertion 
[75]Arguments [76]ReceiverType [77]UnaryExpr [78]LabeledStmt [79]LabeledForStmt 
[80]SimpleStmt [81]GoStmt [82]ReturnStmt [83]BreakStmt [84]ContinueStmt 
[85]GotoStmt [86]FallthroughStmt [87]SwitchStmt [88]SelectStmt [89]DeferStmt 
[90]ForStmt [91]IfStmt [92]Cheez [93]Cheez2 [94]EmptyStmt 
[95]ExpressionStmt [96]SendStmt [97]IncDecStmt [98]Assignment [99]Label 
[100]Channel [101]ExprSwitchStmt [102]TypeSwitchStmt [103]ExprCaseClause [104]ExprSwitchCase 
[105]TypeSwitchGuard [106]TypeSwitchCase [107]TypeList [108]TypeCaseClause [109]Condition 
[110]ForClause [111]RangeClause [112]InitStmt [113]PostStmt [114]CommClause 
[115]CommCase [116]RecvStmt [117]RecvExpr [118]SourceFile [119]PackageClause 
[120]ImportDecl [121]ImportSpec [122]ImportPath [123]StructType_unnecessary_1 [124]FieldDecl_unnecessary_1 
[125]FieldDecl_unnecessary_2 [126]AnonymousField_unnecessary_1 [127]Signature_unnecessary_1 [128]Parameters_unnecessary_1 [129]Parameters_unnecessary_2 
[130]ParameterList_unnecessary_1 [131]ParameterDecl_unnecessary_1 [132]ParameterDecl_unnecessary_2 [133]InterfaceType_unnecessary_1 [134]ChannelType_unnecessary_1 
[135]StatementList_unnecessary_1 [136]ConstDecl_unnecessary_1 [137]ConstDecl_unnecessary_2 [138]ConstSpec_unnecessary_1 [139]ConstSpec_unnecessary_2 
[140]IdentifierList_unnecessary_1 [141]ExpressionList_unnecessary_1 [142]TypeDecl_unnecessary_1 [143]TypeDecl_unnecessary_2 [144]VarDecl_unnecessary_1 
[145]VarDecl_unnecessary_2 [146]VarSpec_unnecessary_1 [147]VarSpec_unnecessary_2 [148]FunctionDecl_unnecessary_1 [149]MethodDecl_unnecessary_1 
[150]LiteralValue_unnecessary_1 [151]LiteralValue_unnecessary_2 [152]Element_unnecessary_1 [153]ElementList_unnecessary_1 [154]Slice_unnecessary_1 
[155]Slice_unnecessary_2 [156]Slice_unnecessary_3 [157]Arguments_unnecessary_1 [158]Arguments_unnecessary_2 [159]Arguments_unnecessary_3 
[160]Arguments_unnecessary_4 [161]Arguments_unnecessary_5 [162]Conversion_unnecessary_1 [163]IncDecStmt_unnecessary_1 [164]assign_op_unnecessary_1 
[165]IfStmt_unnecessary_1 [166]IfStmt_unnecessary_2 [167]IfStmt_unnecessary_3 [168]ExprSwitchStmt_unnecessary_1 [169]ExprSwitchStmt_unnecessary_2 
[170]ExprSwitchStmt_unnecessary_3 [171]TypeCaseClause_unnecessary_1 [172]TypeSwitchStmt_unnecessary_1 [173]TypeSwitchStmt_unnecessary_2 [174]TypeSwitchGuard_unnecessary_1 
[175]TypeSwitchGuard_unnecessary_2 [176]TypeList_unnecessary_1 [177]TypeList_unnecessary_2 [178]CommClause_unnecessary_1 [179]ForStmt_unnecessary_1 
[180]ForStmt_unnecessary_2 [181]ForStmt_unnecessary_3 [182]InitStmt_unnecessary_1 [183]Condition_unnecessary_1 [184]PostStmt_unnecessary_1 
[185]RangeClause_unnecessary_1 [186]RangeClause_unnecessary_2 [187]CommClause_unneccesary_1 [188]CommCase_unncessary_1 [189]RecvStmt_unncessary_1 
[190]ReturnStmt_unnecessary_1 [191]Label_unnecessary_1 [192]SourceFile_unnecessary_1 [193]SourceFile_unnecessary_2 [194]ImportDecl_unnecessary_1 
[195]ImportDecl_unnecessary_2 [196]ImportSpec_unnecessary_1 [197]QualifiedIdent_dash [198]IdentifierList_unnecessary_1_dash [199]SourceFile_unnecessary_1_dash 
[200]SourceFile_unnecessary_2_dash [201]ParameterList_unnecessary_1_dash [202]Operand_unnecessary_1_dash [203]ExpressionList_unnecessary_1_dash [204]Expression_unneccessary_1_dash 
[205]SimpleStmt_unnecessary_1 [206]B [207]C [208]Func_call [209]Func_call_ass 
[210]ForClause_Unneccesary [211]WhileStmt [212]NT$0 [213]NT$1 [214]NT$2 
[215]NT$3 [216]NT$4 [217]NT$5 [218]NT$6 [219]NT$7 
[220]NT$8 [221]NT$9 [222]NT$10 [223]NT$11 [224]NT$12 
[225]NT$13 [226]NT$14 [227]NT$15 [228]NT$16 [229]NT$17 
[230]NT$18 

===== Productions =====
[0] $START ::= SourceFile EOF 
[1] Type ::= TypeName 
[2] Type ::= TypeLit 
[3] Type ::= open_brac Type close_brac 
[4] TypeName ::= B 
[5] TypeName ::= C 
[6] B ::= C dot identifier 
[7] C ::= identifier 
[8] TypeLit ::= ArrayType 
[9] TypeLit ::= PointerType 
[10] TypeLit ::= FunctionType 
[11] ArrayType ::= open_square_brac ArrayLength close_square_brac Type 
[12] ArrayLength ::= int_lit 
[13] PointerType ::= star_op Type 
[14] Func_call ::= TypeName open_brac close_brac 
[15] Func_call ::= TypeName open_brac ExpressionList close_brac 
[16] FunctionType ::= funcd Signature 
[17] Signature ::= Parameters Parameters 
[18] Signature ::= Parameters Type 
[19] Signature ::= Parameters 
[20] Parameters ::= open_brac ParameterList close_brac 
[21] Parameters ::= open_brac close_brac 
[22] ParameterList ::= ParameterDecl ParameterList_unnecessary_1 
[23] ParameterList_unnecessary_1 ::= ParameterList_unnecessary_1 comma ParameterDecl 
[24] ParameterList_unnecessary_1 ::= 
[25] ParameterDecl ::= IdentifierList Type 
[26] ParameterDecl ::= Type 
[27] NT$0 ::= 
[28] Block ::= open_curly_brac NT$0 StatementList close_curly_brac 
[29] StatementList ::= StatementList_unnecessary_1 
[30] StatementList_unnecessary_1 ::= StatementList_unnecessary_1 Statement semicolon 
[31] StatementList_unnecessary_1 ::= 
[32] TopLevelDecl ::= FunctionDecl 
[33] TopLevelDecl ::= Declaration 
[34] NT$1 ::= 
[35] FunctionDecl ::= funcd identifier NT$1 FunctionDecl_unnecessary_1 
[36] FunctionDecl_unnecessary_1 ::= Function 
[37] FunctionDecl_unnecessary_1 ::= Signature 
[38] NT$2 ::= 
[39] Function ::= Signature NT$2 FunctionBody 
[40] FunctionBody ::= open_curly_brac StatementList close_curly_brac 
[41] Declaration ::= ConstDecl 
[42] Declaration ::= VarDecl 
[43] ConstDecl ::= constd ConstDecl_unnecessary_2 
[44] ConstDecl_unnecessary_1 ::= ConstDecl_unnecessary_1 ConstSpec semicolon 
[45] ConstDecl_unnecessary_1 ::= 
[46] ConstDecl_unnecessary_2 ::= ConstSpec 
[47] ConstDecl_unnecessary_2 ::= open_brac ConstDecl_unnecessary_1 close_brac 
[48] ConstSpec ::= IdentifierList Type equal ExpressionList 
[49] IdentifierList ::= identifier IdentifierList_unnecessary_1 
[50] IdentifierList_unnecessary_1 ::= comma identifier IdentifierList_unnecessary_1 
[51] IdentifierList_unnecessary_1 ::= 
[52] ExpressionList ::= Expression ExpressionList_unnecessary_1 
[53] ExpressionList_unnecessary_1 ::= ExpressionList_unnecessary_1 comma Expression 
[54] ExpressionList_unnecessary_1 ::= 
[55] VarDecl ::= var VarDecl_unnecessary_2 
[56] VarDecl_unnecessary_1 ::= VarDecl_unnecessary_1 VarSpec semicolon 
[57] VarDecl_unnecessary_1 ::= 
[58] VarDecl_unnecessary_2 ::= VarSpec 
[59] VarDecl_unnecessary_2 ::= open_brac VarDecl_unnecessary_1 close_brac 
[60] VarSpec ::= IdentifierList VarSpec_unnecessary_2 
[61] VarSpec_unnecessary_1 ::= equal ExpressionList 
[62] VarSpec_unnecessary_1 ::= 
[63] VarSpec_unnecessary_2 ::= Type VarSpec_unnecessary_1 
[64] VarSpec_unnecessary_2 ::= equal ExpressionList 
[65] Operand ::= BasicLit 
[66] Operand ::= ArrayType LiteralValue 
[67] Operand ::= TypeName 
[68] Operand ::= open_brac Expression close_brac 
[69] BasicLit ::= int_lit 
[70] BasicLit ::= float_lit 
[71] BasicLit ::= imaginary_lit 
[72] BasicLit ::= rune_lit 
[73] BasicLit ::= string_lit 
[74] NT$3 ::= 
[75] LiteralValue ::= open_curly_brac LiteralValue_unnecessary_2 NT$3 close_curly_brac 
[76] LiteralValue_unnecessary_1 ::= comma 
[77] LiteralValue_unnecessary_1 ::= 
[78] NT$4 ::= 
[79] LiteralValue_unnecessary_2 ::= ElementList NT$4 LiteralValue_unnecessary_1 
[80] LiteralValue_unnecessary_2 ::= 
[81] ElementList ::= Element ElementList_unnecessary_1 
[82] ElementList_unnecessary_1 ::= ElementList_unnecessary_1 comma Element 
[83] ElementList_unnecessary_1 ::= 
[84] Element ::= Value 
[85] Value ::= Expression 
[86] Value ::= LiteralValue 
[87] PrimaryExpr ::= Operand 
[88] PrimaryExpr ::= PrimaryExpr Index 
[89] Index ::= open_square_brac Expression close_square_brac 
[90] Expression ::= UnaryExpr 
[91] Expression ::= Expression or_op Expression 
[92] Expression ::= Expression and_op Expression 
[93] Expression ::= Expression plus_op Expression 
[94] Expression ::= Expression minus_op Expression 
[95] Expression ::= Expression pipe_op Expression 
[96] Expression ::= Expression pow_op Expression 
[97] Expression ::= Expression equal_equal_op Expression 
[98] Expression ::= Expression not_equal_op Expression 
[99] Expression ::= Expression greater_equal_op Expression 
[100] Expression ::= Expression greater_op Expression 
[101] Expression ::= Expression less_equal_op Expression 
[102] Expression ::= Expression less_op Expression 
[103] Expression ::= Expression star_op Expression 
[104] Expression ::= Expression div_op Expression 
[105] Expression ::= Expression mod_op Expression 
[106] Expression ::= Expression left_shift_op Expression 
[107] Expression ::= Expression right_shift_op Expression 
[108] Expression ::= Expression amp_pow_op Expression 
[109] UnaryExpr ::= PrimaryExpr 
[110] UnaryExpr ::= unary_op UnaryExpr 
[111] binary_op ::= or_op 
[112] binary_op ::= and_op 
[113] binary_op ::= rel_op 
[114] binary_op ::= add_op 
[115] binary_op ::= mul_op 
[116] rel_op ::= equal_equal_op 
[117] rel_op ::= not_equal_op 
[118] rel_op ::= less_op 
[119] rel_op ::= less_equal_op 
[120] rel_op ::= greater_op 
[121] rel_op ::= greater_equal_op 
[122] add_op ::= plus_op 
[123] add_op ::= minus_op 
[124] add_op ::= pipe_op 
[125] add_op ::= pow_op 
[126] mul_op ::= star_op 
[127] mul_op ::= div_op 
[128] mul_op ::= mod_op 
[129] mul_op ::= left_shift_op 
[130] mul_op ::= right_shift_op 
[131] mul_op ::= amp_op 
[132] mul_op ::= amp_pow_op 
[133] unary_op ::= plus_op 
[134] unary_op ::= minus_op 
[135] unary_op ::= not_op 
[136] unary_op ::= pow_op 
[137] unary_op ::= star_op 
[138] unary_op ::= amp_op 
[139] Statement ::= Declaration 
[140] Statement ::= SimpleStmt 
[141] Statement ::= Func_call 
[142] Statement ::= ReturnStmt 
[143] Statement ::= BreakStmt 
[144] Statement ::= ContinueStmt 
[145] Statement ::= GotoStmt 
[146] Statement ::= LabeledStmt 
[147] Statement ::= Block 
[148] Statement ::= IfStmt 
[149] Statement ::= SwitchStmt 
[150] Statement ::= LabeledForStmt 
[151] Statement ::= ForStmt 
[152] SimpleStmt ::= Expression SimpleStmt_unnecessary_1 
[153] SimpleStmt ::= 
[154] SimpleStmt_unnecessary_1 ::= ExpressionList_unnecessary_1 assign_op ExpressionList 
[155] SimpleStmt_unnecessary_1 ::= IncDecStmt_unnecessary_1 
[156] SimpleStmt_unnecessary_1 ::= ExpressionList_unnecessary_1 assign_op Func_call 
[157] SimpleStmt_unnecessary_1 ::= 
[158] IncDecStmt_unnecessary_1 ::= inc_op 
[159] IncDecStmt_unnecessary_1 ::= dec_op 
[160] assign_op ::= assign_op_unnecessary_1 equal 
[161] assign_op_unnecessary_1 ::= add_op 
[162] assign_op_unnecessary_1 ::= mul_op 
[163] assign_op_unnecessary_1 ::= 
[164] NT$5 ::= 
[165] Cheez ::= ifd Expression NT$5 open_curly_brac StatementList close_curly_brac 
[166] NT$6 ::= 
[167] Cheez2 ::= ifd SimpleStmt semicolon Expression NT$6 open_curly_brac StatementList close_curly_brac 
[168] NT$7 ::= 
[169] IfStmt ::= Cheez2 elsed NT$7 IfStmt 
[170] NT$8 ::= 
[171] NT$9 ::= 
[172] IfStmt ::= Cheez2 elsed NT$8 open_curly_brac NT$9 StatementList close_curly_brac 
[173] IfStmt ::= Cheez2 
[174] NT$10 ::= 
[175] IfStmt ::= Cheez elsed NT$10 IfStmt 
[176] NT$11 ::= 
[177] NT$12 ::= 
[178] IfStmt ::= Cheez elsed NT$11 open_curly_brac NT$12 StatementList close_curly_brac 
[179] IfStmt ::= Cheez 
[180] SwitchStmt ::= ExprSwitchStmt 
[181] ExprSwitchStmt ::= switchd SimpleStmt semicolon Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac 
[182] ExprSwitchStmt ::= switchd Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac 
[183] ExprSwitchStmt ::= switchd open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac 
[184] ExprSwitchStmt ::= switchd SimpleStmt semicolon open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac 
[185] ExprSwitchStmt_unnecessary_3 ::= ExprSwitchStmt_unnecessary_3 ExprCaseClause 
[186] ExprSwitchStmt_unnecessary_3 ::= 
[187] ExprCaseClause ::= cased ExpressionList colon StatementList 
[188] ExprCaseClause ::= defaultd colon StatementList 
[189] NT$13 ::= 
[190] NT$14 ::= 
[191] ForStmt ::= ford NT$13 ForStmt_unnecessary_1 NT$14 open_curly_brac StatementList close_curly_brac 
[192] ForStmt ::= ForStmt_unnecessary_2 open_curly_brac StatementList close_curly_brac 
[193] ForStmt_unnecessary_2 ::= ford 
[194] ForStmt_unnecessary_1 ::= Expression 
[195] ForStmt_unnecessary_1 ::= ForClause 
[196] NT$15 ::= 
[197] ForClause ::= ForClause_Unneccesary Condition_unnecessary_1 semicolon NT$15 SimpleStmt 
[198] ForClause_Unneccesary ::= SimpleStmt semicolon 
[199] Condition_unnecessary_1 ::= Expression 
[200] Condition_unnecessary_1 ::= 
[201] ReturnStmt ::= returnd ExpressionList 
[202] ReturnStmt ::= returnd 
[203] BreakStmt ::= breakd identifier 
[204] BreakStmt ::= breakd 
[205] Label ::= identifier colon 
[206] LabeledStmt ::= Label Declaration 
[207] LabeledStmt ::= Label SimpleStmt 
[208] LabeledStmt ::= Label Func_call 
[209] LabeledStmt ::= Label ReturnStmt 
[210] LabeledStmt ::= Label BreakStmt 
[211] LabeledStmt ::= Label ContinueStmt 
[212] LabeledStmt ::= Label GotoStmt 
[213] LabeledStmt ::= Label LabeledStmt 
[214] LabeledStmt ::= Label Block 
[215] LabeledStmt ::= Label IfStmt 
[216] LabeledStmt ::= Label SwitchStmt 
[217] LabeledStmt ::= Label LabeledForStmt 
[218] NT$16 ::= 
[219] LabeledForStmt ::= identifier colon NT$16 ForStmt 
[220] GotoStmt ::= gotod identifier 
[221] ContinueStmt ::= continued identifier 
[222] ContinueStmt ::= continued 
[223] NT$17 ::= 
[224] NT$18 ::= 
[225] SourceFile ::= NT$17 PackageClause semicolon SourceFile_unnecessary_1 NT$18 SourceFile_unnecessary_2 
[226] SourceFile_unnecessary_1 ::= SourceFile_unnecessary_1_dash 
[227] SourceFile_unnecessary_1_dash ::= ImportDecl semicolon SourceFile_unnecessary_1_dash 
[228] SourceFile_unnecessary_1_dash ::= 
[229] SourceFile_unnecessary_2 ::= SourceFile_unnecessary_2_dash 
[230] SourceFile_unnecessary_2_dash ::= TopLevelDecl semicolon SourceFile_unnecessary_2_dash 
[231] SourceFile_unnecessary_2_dash ::= 
[232] PackageClause ::= packaged identifier 
[233] ImportDecl ::= importd ImportDecl_unnecessary_2 
[234] ImportDecl_unnecessary_1 ::= ImportDecl_unnecessary_1 ImportSpec semicolon 
[235] ImportDecl_unnecessary_1 ::= 
[236] ImportDecl_unnecessary_2 ::= ImportSpec 
[237] ImportDecl_unnecessary_2 ::= open_brac ImportDecl_unnecessary_1 close_brac 
[238] ImportSpec ::= dot string_lit 
[239] ImportSpec ::= identifier string_lit 
[240] ImportSpec ::= string_lit 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [SourceFile ::= (*) NT$17 PackageClause semicolon SourceFile_unnecessary_1 NT$18 SourceFile_unnecessary_2 , {EOF }]
  [NT$17 ::= (*) , {packaged }]
  [$START ::= (*) SourceFile EOF , {EOF }]
}
transition on SourceFile to state [2]
transition on NT$17 to state [1]

-------------------
lalr_state [1]: {
  [SourceFile ::= NT$17 (*) PackageClause semicolon SourceFile_unnecessary_1 NT$18 SourceFile_unnecessary_2 , {EOF }]
  [PackageClause ::= (*) packaged identifier , {semicolon }]
}
transition on packaged to state [5]
transition on PackageClause to state [4]

-------------------
lalr_state [2]: {
  [$START ::= SourceFile (*) EOF , {EOF }]
}
transition on EOF to state [3]

-------------------
lalr_state [3]: {
  [$START ::= SourceFile EOF (*) , {EOF }]
}

-------------------
lalr_state [4]: {
  [SourceFile ::= NT$17 PackageClause (*) semicolon SourceFile_unnecessary_1 NT$18 SourceFile_unnecessary_2 , {EOF }]
}
transition on semicolon to state [7]

-------------------
lalr_state [5]: {
  [PackageClause ::= packaged (*) identifier , {semicolon }]
}
transition on identifier to state [6]

-------------------
lalr_state [6]: {
  [PackageClause ::= packaged identifier (*) , {semicolon }]
}

-------------------
lalr_state [7]: {
  [SourceFile_unnecessary_1_dash ::= (*) , {EOF funcd constd var }]
  [ImportDecl ::= (*) importd ImportDecl_unnecessary_2 , {semicolon }]
  [SourceFile_unnecessary_1_dash ::= (*) ImportDecl semicolon SourceFile_unnecessary_1_dash , {EOF funcd constd var }]
  [SourceFile_unnecessary_1 ::= (*) SourceFile_unnecessary_1_dash , {EOF funcd constd var }]
  [SourceFile ::= NT$17 PackageClause semicolon (*) SourceFile_unnecessary_1 NT$18 SourceFile_unnecessary_2 , {EOF }]
}
transition on SourceFile_unnecessary_1_dash to state [11]
transition on importd to state [10]
transition on SourceFile_unnecessary_1 to state [9]
transition on ImportDecl to state [8]

-------------------
lalr_state [8]: {
  [SourceFile_unnecessary_1_dash ::= ImportDecl (*) semicolon SourceFile_unnecessary_1_dash , {EOF funcd constd var }]
}
transition on semicolon to state [351]

-------------------
lalr_state [9]: {
  [NT$18 ::= (*) , {EOF funcd constd var }]
  [SourceFile ::= NT$17 PackageClause semicolon SourceFile_unnecessary_1 (*) NT$18 SourceFile_unnecessary_2 , {EOF }]
}
transition on NT$18 to state [24]

-------------------
lalr_state [10]: {
  [ImportSpec ::= (*) identifier string_lit , {semicolon }]
  [ImportDecl_unnecessary_2 ::= (*) ImportSpec , {semicolon }]
  [ImportDecl ::= importd (*) ImportDecl_unnecessary_2 , {semicolon }]
  [ImportSpec ::= (*) dot string_lit , {semicolon }]
  [ImportSpec ::= (*) string_lit , {semicolon }]
  [ImportDecl_unnecessary_2 ::= (*) open_brac ImportDecl_unnecessary_1 close_brac , {semicolon }]
}
transition on open_brac to state [17]
transition on identifier to state [16]
transition on ImportSpec to state [15]
transition on ImportDecl_unnecessary_2 to state [14]
transition on dot to state [13]
transition on string_lit to state [12]

-------------------
lalr_state [11]: {
  [SourceFile_unnecessary_1 ::= SourceFile_unnecessary_1_dash (*) , {EOF funcd constd var }]
}

-------------------
lalr_state [12]: {
  [ImportSpec ::= string_lit (*) , {semicolon }]
}

-------------------
lalr_state [13]: {
  [ImportSpec ::= dot (*) string_lit , {semicolon }]
}
transition on string_lit to state [23]

-------------------
lalr_state [14]: {
  [ImportDecl ::= importd ImportDecl_unnecessary_2 (*) , {semicolon }]
}

-------------------
lalr_state [15]: {
  [ImportDecl_unnecessary_2 ::= ImportSpec (*) , {semicolon }]
}

-------------------
lalr_state [16]: {
  [ImportSpec ::= identifier (*) string_lit , {semicolon }]
}
transition on string_lit to state [22]

-------------------
lalr_state [17]: {
  [ImportDecl_unnecessary_1 ::= (*) , {identifier string_lit close_brac dot }]
  [ImportDecl_unnecessary_2 ::= open_brac (*) ImportDecl_unnecessary_1 close_brac , {semicolon }]
  [ImportDecl_unnecessary_1 ::= (*) ImportDecl_unnecessary_1 ImportSpec semicolon , {identifier string_lit close_brac dot }]
}
transition on ImportDecl_unnecessary_1 to state [18]

-------------------
lalr_state [18]: {
  [ImportSpec ::= (*) identifier string_lit , {semicolon }]
  [ImportSpec ::= (*) dot string_lit , {semicolon }]
  [ImportDecl_unnecessary_2 ::= open_brac ImportDecl_unnecessary_1 (*) close_brac , {semicolon }]
  [ImportSpec ::= (*) string_lit , {semicolon }]
  [ImportDecl_unnecessary_1 ::= ImportDecl_unnecessary_1 (*) ImportSpec semicolon , {identifier string_lit close_brac dot }]
}
transition on close_brac to state [20]
transition on identifier to state [16]
transition on ImportSpec to state [19]
transition on dot to state [13]
transition on string_lit to state [12]

-------------------
lalr_state [19]: {
  [ImportDecl_unnecessary_1 ::= ImportDecl_unnecessary_1 ImportSpec (*) semicolon , {identifier string_lit close_brac dot }]
}
transition on semicolon to state [21]

-------------------
lalr_state [20]: {
  [ImportDecl_unnecessary_2 ::= open_brac ImportDecl_unnecessary_1 close_brac (*) , {semicolon }]
}

-------------------
lalr_state [21]: {
  [ImportDecl_unnecessary_1 ::= ImportDecl_unnecessary_1 ImportSpec semicolon (*) , {identifier string_lit close_brac dot }]
}

-------------------
lalr_state [22]: {
  [ImportSpec ::= identifier string_lit (*) , {semicolon }]
}

-------------------
lalr_state [23]: {
  [ImportSpec ::= dot string_lit (*) , {semicolon }]
}

-------------------
lalr_state [24]: {
  [ConstDecl ::= (*) constd ConstDecl_unnecessary_2 , {semicolon }]
  [SourceFile_unnecessary_2 ::= (*) SourceFile_unnecessary_2_dash , {EOF }]
  [Declaration ::= (*) VarDecl , {semicolon }]
  [TopLevelDecl ::= (*) Declaration , {semicolon }]
  [SourceFile ::= NT$17 PackageClause semicolon SourceFile_unnecessary_1 NT$18 (*) SourceFile_unnecessary_2 , {EOF }]
  [SourceFile_unnecessary_2_dash ::= (*) , {EOF }]
  [Declaration ::= (*) ConstDecl , {semicolon }]
  [FunctionDecl ::= (*) funcd identifier NT$1 FunctionDecl_unnecessary_1 , {semicolon }]
  [VarDecl ::= (*) var VarDecl_unnecessary_2 , {semicolon }]
  [TopLevelDecl ::= (*) FunctionDecl , {semicolon }]
  [SourceFile_unnecessary_2_dash ::= (*) TopLevelDecl semicolon SourceFile_unnecessary_2_dash , {EOF }]
}
transition on ConstDecl to state [34]
transition on var to state [33]
transition on FunctionDecl to state [32]
transition on TopLevelDecl to state [31]
transition on funcd to state [30]
transition on VarDecl to state [29]
transition on Declaration to state [28]
transition on SourceFile_unnecessary_2 to state [27]
transition on SourceFile_unnecessary_2_dash to state [26]
transition on constd to state [25]

-------------------
lalr_state [25]: {
  [IdentifierList ::= (*) identifier IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac }]
  [ConstDecl_unnecessary_2 ::= (*) ConstSpec , {semicolon }]
  [ConstDecl ::= constd (*) ConstDecl_unnecessary_2 , {semicolon }]
  [ConstSpec ::= (*) IdentifierList Type equal ExpressionList , {semicolon }]
  [ConstDecl_unnecessary_2 ::= (*) open_brac ConstDecl_unnecessary_1 close_brac , {semicolon }]
}
transition on open_brac to state [343]
transition on identifier to state [36]
transition on ConstSpec to state [342]
transition on IdentifierList to state [341]
transition on ConstDecl_unnecessary_2 to state [340]

-------------------
lalr_state [26]: {
  [SourceFile_unnecessary_2 ::= SourceFile_unnecessary_2_dash (*) , {EOF }]
}

-------------------
lalr_state [27]: {
  [SourceFile ::= NT$17 PackageClause semicolon SourceFile_unnecessary_1 NT$18 SourceFile_unnecessary_2 (*) , {EOF }]
}

-------------------
lalr_state [28]: {
  [TopLevelDecl ::= Declaration (*) , {semicolon }]
}

-------------------
lalr_state [29]: {
  [Declaration ::= VarDecl (*) , {semicolon }]
}

-------------------
lalr_state [30]: {
  [FunctionDecl ::= funcd (*) identifier NT$1 FunctionDecl_unnecessary_1 , {semicolon }]
}
transition on identifier to state [178]

-------------------
lalr_state [31]: {
  [SourceFile_unnecessary_2_dash ::= TopLevelDecl (*) semicolon SourceFile_unnecessary_2_dash , {EOF }]
}
transition on semicolon to state [176]

-------------------
lalr_state [32]: {
  [TopLevelDecl ::= FunctionDecl (*) , {semicolon }]
}

-------------------
lalr_state [33]: {
  [IdentifierList ::= (*) identifier IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac equal }]
  [VarSpec ::= (*) IdentifierList VarSpec_unnecessary_2 , {semicolon }]
  [VarDecl_unnecessary_2 ::= (*) open_brac VarDecl_unnecessary_1 close_brac , {semicolon }]
  [VarDecl_unnecessary_2 ::= (*) VarSpec , {semicolon }]
  [VarDecl ::= var (*) VarDecl_unnecessary_2 , {semicolon }]
}
transition on open_brac to state [39]
transition on VarDecl_unnecessary_2 to state [38]
transition on VarSpec to state [37]
transition on identifier to state [36]
transition on IdentifierList to state [35]

-------------------
lalr_state [34]: {
  [Declaration ::= ConstDecl (*) , {semicolon }]
}

-------------------
lalr_state [35]: {
  [VarSpec ::= IdentifierList (*) VarSpec_unnecessary_2 , {semicolon }]
  [VarSpec_unnecessary_2 ::= (*) Type VarSpec_unnecessary_1 , {semicolon }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {semicolon equal }]
  [TypeLit ::= (*) ArrayType , {semicolon equal }]
  [TypeName ::= (*) C , {semicolon equal }]
  [Type ::= (*) TypeLit , {semicolon equal }]
  [FunctionType ::= (*) funcd Signature , {semicolon equal }]
  [PointerType ::= (*) star_op Type , {semicolon equal }]
  [TypeLit ::= (*) FunctionType , {semicolon equal }]
  [C ::= (*) identifier , {semicolon dot equal }]
  [TypeName ::= (*) B , {semicolon equal }]
  [Type ::= (*) TypeName , {semicolon equal }]
  [VarSpec_unnecessary_2 ::= (*) equal ExpressionList , {semicolon }]
  [TypeLit ::= (*) PointerType , {semicolon equal }]
  [B ::= (*) C dot identifier , {semicolon equal }]
  [Type ::= (*) open_brac Type close_brac , {semicolon equal }]
}
transition on FunctionType to state [62]
transition on ArrayType to state [61]
transition on funcd to state [60]
transition on equal to state [59]
transition on TypeLit to state [58]
transition on identifier to state [57]
transition on open_square_brac to state [56]
transition on TypeName to state [55]
transition on PointerType to state [54]
transition on VarSpec_unnecessary_2 to state [53]
transition on open_brac to state [52]
transition on B to state [51]
transition on star_op to state [50]
transition on C to state [49]
transition on Type to state [48]

-------------------
lalr_state [36]: {
  [IdentifierList ::= identifier (*) IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac equal }]
  [IdentifierList_unnecessary_1 ::= (*) , {identifier funcd star_op open_brac open_square_brac equal }]
  [IdentifierList_unnecessary_1 ::= (*) comma identifier IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac equal }]
}
transition on IdentifierList_unnecessary_1 to state [45]
transition on comma to state [44]

-------------------
lalr_state [37]: {
  [VarDecl_unnecessary_2 ::= VarSpec (*) , {semicolon }]
}

-------------------
lalr_state [38]: {
  [VarDecl ::= var VarDecl_unnecessary_2 (*) , {semicolon }]
}

-------------------
lalr_state [39]: {
  [VarDecl_unnecessary_1 ::= (*) , {identifier close_brac }]
  [VarDecl_unnecessary_2 ::= open_brac (*) VarDecl_unnecessary_1 close_brac , {semicolon }]
  [VarDecl_unnecessary_1 ::= (*) VarDecl_unnecessary_1 VarSpec semicolon , {identifier close_brac }]
}
transition on VarDecl_unnecessary_1 to state [40]

-------------------
lalr_state [40]: {
  [IdentifierList ::= (*) identifier IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac equal }]
  [VarSpec ::= (*) IdentifierList VarSpec_unnecessary_2 , {semicolon }]
  [VarDecl_unnecessary_2 ::= open_brac VarDecl_unnecessary_1 (*) close_brac , {semicolon }]
  [VarDecl_unnecessary_1 ::= VarDecl_unnecessary_1 (*) VarSpec semicolon , {identifier close_brac }]
}
transition on close_brac to state [42]
transition on VarSpec to state [41]
transition on identifier to state [36]
transition on IdentifierList to state [35]

-------------------
lalr_state [41]: {
  [VarDecl_unnecessary_1 ::= VarDecl_unnecessary_1 VarSpec (*) semicolon , {identifier close_brac }]
}
transition on semicolon to state [43]

-------------------
lalr_state [42]: {
  [VarDecl_unnecessary_2 ::= open_brac VarDecl_unnecessary_1 close_brac (*) , {semicolon }]
}

-------------------
lalr_state [43]: {
  [VarDecl_unnecessary_1 ::= VarDecl_unnecessary_1 VarSpec semicolon (*) , {identifier close_brac }]
}

-------------------
lalr_state [44]: {
  [IdentifierList_unnecessary_1 ::= comma (*) identifier IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac equal }]
}
transition on identifier to state [46]

-------------------
lalr_state [45]: {
  [IdentifierList ::= identifier IdentifierList_unnecessary_1 (*) , {identifier funcd star_op open_brac open_square_brac equal }]
}

-------------------
lalr_state [46]: {
  [IdentifierList_unnecessary_1 ::= (*) , {identifier funcd star_op open_brac open_square_brac equal }]
  [IdentifierList_unnecessary_1 ::= comma identifier (*) IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac equal }]
  [IdentifierList_unnecessary_1 ::= (*) comma identifier IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac equal }]
}
transition on IdentifierList_unnecessary_1 to state [47]
transition on comma to state [44]

-------------------
lalr_state [47]: {
  [IdentifierList_unnecessary_1 ::= comma identifier IdentifierList_unnecessary_1 (*) , {identifier funcd star_op open_brac open_square_brac equal }]
}

-------------------
lalr_state [48]: {
  [VarSpec_unnecessary_1 ::= (*) , {semicolon }]
  [VarSpec_unnecessary_1 ::= (*) equal ExpressionList , {semicolon }]
  [VarSpec_unnecessary_2 ::= Type (*) VarSpec_unnecessary_1 , {semicolon }]
}
transition on equal to state [174]
transition on VarSpec_unnecessary_1 to state [173]

-------------------
lalr_state [49]: {
  [TypeName ::= C (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= C (*) dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on dot to state [171]

-------------------
lalr_state [50]: {
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {close_brac open_curly_brac comma semicolon equal }]
  [TypeLit ::= (*) ArrayType , {close_brac open_curly_brac comma semicolon equal }]
  [TypeName ::= (*) C , {close_brac open_curly_brac comma semicolon equal }]
  [Type ::= (*) TypeLit , {close_brac open_curly_brac comma semicolon equal }]
  [FunctionType ::= (*) funcd Signature , {close_brac open_curly_brac comma semicolon equal }]
  [PointerType ::= star_op (*) Type , {close_brac open_curly_brac comma semicolon equal }]
  [PointerType ::= (*) star_op Type , {close_brac open_curly_brac comma semicolon equal }]
  [TypeLit ::= (*) FunctionType , {close_brac open_curly_brac comma semicolon equal }]
  [C ::= (*) identifier , {close_brac open_curly_brac comma semicolon dot equal }]
  [TypeName ::= (*) B , {close_brac open_curly_brac comma semicolon equal }]
  [Type ::= (*) TypeName , {close_brac open_curly_brac comma semicolon equal }]
  [TypeLit ::= (*) PointerType , {close_brac open_curly_brac comma semicolon equal }]
  [B ::= (*) C dot identifier , {close_brac open_curly_brac comma semicolon equal }]
  [Type ::= (*) open_brac Type close_brac , {close_brac open_curly_brac comma semicolon equal }]
}
transition on FunctionType to state [62]
transition on ArrayType to state [61]
transition on funcd to state [60]
transition on TypeLit to state [58]
transition on identifier to state [57]
transition on open_square_brac to state [56]
transition on TypeName to state [55]
transition on PointerType to state [54]
transition on open_brac to state [52]
transition on B to state [51]
transition on star_op to state [50]
transition on C to state [49]
transition on Type to state [170]

-------------------
lalr_state [51]: {
  [TypeName ::= B (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [52]: {
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {close_brac }]
  [TypeLit ::= (*) ArrayType , {close_brac }]
  [TypeName ::= (*) C , {close_brac }]
  [Type ::= (*) TypeLit , {close_brac }]
  [FunctionType ::= (*) funcd Signature , {close_brac }]
  [PointerType ::= (*) star_op Type , {close_brac }]
  [TypeLit ::= (*) FunctionType , {close_brac }]
  [C ::= (*) identifier , {close_brac dot }]
  [TypeName ::= (*) B , {close_brac }]
  [Type ::= (*) TypeName , {close_brac }]
  [TypeLit ::= (*) PointerType , {close_brac }]
  [B ::= (*) C dot identifier , {close_brac }]
  [Type ::= open_brac (*) Type close_brac , {close_brac open_curly_brac comma semicolon equal }]
  [Type ::= (*) open_brac Type close_brac , {close_brac }]
}
transition on FunctionType to state [62]
transition on ArrayType to state [61]
transition on funcd to state [60]
transition on TypeLit to state [58]
transition on identifier to state [57]
transition on open_square_brac to state [56]
transition on TypeName to state [55]
transition on PointerType to state [54]
transition on open_brac to state [52]
transition on B to state [51]
transition on star_op to state [50]
transition on C to state [49]
transition on Type to state [169]

-------------------
lalr_state [53]: {
  [VarSpec ::= IdentifierList VarSpec_unnecessary_2 (*) , {semicolon }]
}

-------------------
lalr_state [54]: {
  [TypeLit ::= PointerType (*) , {close_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [55]: {
  [Type ::= TypeName (*) , {close_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [56]: {
  [ArrayLength ::= (*) int_lit , {close_square_brac }]
  [ArrayType ::= open_square_brac (*) ArrayLength close_square_brac Type , {close_brac open_curly_brac comma semicolon equal }]
}
transition on int_lit to state [166]
transition on ArrayLength to state [165]

-------------------
lalr_state [57]: {
  [C ::= identifier (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
}

-------------------
lalr_state [58]: {
  [Type ::= TypeLit (*) , {close_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [59]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [VarSpec_unnecessary_2 ::= equal (*) ExpressionList , {semicolon }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [ExpressionList ::= (*) Expression ExpressionList_unnecessary_1 , {semicolon }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [100]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on ExpressionList to state [97]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [60]: {
  [Signature ::= (*) Parameters , {close_brac open_curly_brac comma semicolon equal }]
  [FunctionType ::= funcd (*) Signature , {close_brac open_curly_brac comma semicolon equal }]
  [Parameters ::= (*) open_brac close_brac , {identifier funcd star_op open_brac close_brac open_square_brac open_curly_brac comma semicolon equal }]
  [Signature ::= (*) Parameters Type , {close_brac open_curly_brac comma semicolon equal }]
  [Parameters ::= (*) open_brac ParameterList close_brac , {identifier funcd star_op open_brac close_brac open_square_brac open_curly_brac comma semicolon equal }]
  [Signature ::= (*) Parameters Parameters , {close_brac open_curly_brac comma semicolon equal }]
}
transition on open_brac to state [65]
transition on Parameters to state [64]
transition on Signature to state [63]

-------------------
lalr_state [61]: {
  [TypeLit ::= ArrayType (*) , {close_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [62]: {
  [TypeLit ::= FunctionType (*) , {close_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [63]: {
  [FunctionType ::= funcd Signature (*) , {close_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [64]: {
  [TypeName ::= (*) C , {close_brac open_curly_brac comma semicolon equal }]
  [TypeLit ::= (*) FunctionType , {close_brac open_curly_brac comma semicolon equal }]
  [Parameters ::= (*) open_brac ParameterList close_brac , {close_brac open_curly_brac comma semicolon equal }]
  [Type ::= (*) open_brac Type close_brac , {close_brac open_curly_brac comma semicolon equal }]
  [TypeLit ::= (*) ArrayType , {close_brac open_curly_brac comma semicolon equal }]
  [Signature ::= Parameters (*) Type , {close_brac open_curly_brac comma semicolon equal }]
  [PointerType ::= (*) star_op Type , {close_brac open_curly_brac comma semicolon equal }]
  [Type ::= (*) TypeName , {close_brac open_curly_brac comma semicolon equal }]
  [B ::= (*) C dot identifier , {close_brac open_curly_brac comma semicolon equal }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {close_brac open_curly_brac comma semicolon equal }]
  [FunctionType ::= (*) funcd Signature , {close_brac open_curly_brac comma semicolon equal }]
  [Parameters ::= (*) open_brac close_brac , {close_brac open_curly_brac comma semicolon equal }]
  [TypeName ::= (*) B , {close_brac open_curly_brac comma semicolon equal }]
  [TypeLit ::= (*) PointerType , {close_brac open_curly_brac comma semicolon equal }]
  [Signature ::= Parameters (*) , {close_brac open_curly_brac comma semicolon equal }]
  [Type ::= (*) TypeLit , {close_brac open_curly_brac comma semicolon equal }]
  [C ::= (*) identifier , {close_brac open_curly_brac comma semicolon dot equal }]
  [Signature ::= Parameters (*) Parameters , {close_brac open_curly_brac comma semicolon equal }]
}
transition on FunctionType to state [62]
transition on ArrayType to state [61]
transition on Parameters to state [79]
transition on funcd to state [60]
transition on TypeLit to state [58]
transition on identifier to state [57]
transition on open_square_brac to state [56]
transition on TypeName to state [55]
transition on PointerType to state [54]
transition on open_brac to state [78]
transition on B to state [51]
transition on star_op to state [50]
transition on C to state [49]
transition on Type to state [77]

-------------------
lalr_state [65]: {
  [TypeName ::= (*) C , {close_brac comma }]
  [TypeLit ::= (*) FunctionType , {close_brac comma }]
  [Parameters ::= open_brac (*) ParameterList close_brac , {identifier funcd star_op open_brac close_brac open_square_brac open_curly_brac comma semicolon equal }]
  [ParameterDecl ::= (*) IdentifierList Type , {close_brac comma }]
  [Type ::= (*) open_brac Type close_brac , {close_brac comma }]
  [TypeLit ::= (*) ArrayType , {close_brac comma }]
  [PointerType ::= (*) star_op Type , {close_brac comma }]
  [Type ::= (*) TypeName , {close_brac comma }]
  [B ::= (*) C dot identifier , {close_brac comma }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {close_brac comma }]
  [Parameters ::= open_brac (*) close_brac , {identifier funcd star_op open_brac close_brac open_square_brac open_curly_brac comma semicolon equal }]
  [FunctionType ::= (*) funcd Signature , {close_brac comma }]
  [ParameterDecl ::= (*) Type , {close_brac comma }]
  [TypeName ::= (*) B , {close_brac comma }]
  [TypeLit ::= (*) PointerType , {close_brac comma }]
  [IdentifierList ::= (*) identifier IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac }]
  [Type ::= (*) TypeLit , {close_brac comma }]
  [C ::= (*) identifier , {close_brac comma dot }]
  [ParameterList ::= (*) ParameterDecl ParameterList_unnecessary_1 , {close_brac }]
}
transition on FunctionType to state [62]
transition on close_brac to state [71]
transition on ArrayType to state [61]
transition on funcd to state [60]
transition on identifier to state [70]
transition on TypeLit to state [58]
transition on TypeName to state [55]
transition on open_square_brac to state [56]
transition on PointerType to state [54]
transition on ParameterDecl to state [69]
transition on ParameterList to state [68]
transition on open_brac to state [52]
transition on IdentifierList to state [67]
transition on B to state [51]
transition on star_op to state [50]
transition on C to state [49]
transition on Type to state [66]

-------------------
lalr_state [66]: {
  [ParameterDecl ::= Type (*) , {close_brac comma }]
}

-------------------
lalr_state [67]: {
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {close_brac comma }]
  [TypeLit ::= (*) ArrayType , {close_brac comma }]
  [TypeName ::= (*) C , {close_brac comma }]
  [ParameterDecl ::= IdentifierList (*) Type , {close_brac comma }]
  [Type ::= (*) TypeLit , {close_brac comma }]
  [FunctionType ::= (*) funcd Signature , {close_brac comma }]
  [PointerType ::= (*) star_op Type , {close_brac comma }]
  [TypeLit ::= (*) FunctionType , {close_brac comma }]
  [C ::= (*) identifier , {close_brac comma dot }]
  [TypeName ::= (*) B , {close_brac comma }]
  [Type ::= (*) TypeName , {close_brac comma }]
  [TypeLit ::= (*) PointerType , {close_brac comma }]
  [B ::= (*) C dot identifier , {close_brac comma }]
  [Type ::= (*) open_brac Type close_brac , {close_brac comma }]
}
transition on FunctionType to state [62]
transition on ArrayType to state [61]
transition on funcd to state [60]
transition on TypeLit to state [58]
transition on identifier to state [57]
transition on open_square_brac to state [56]
transition on TypeName to state [55]
transition on PointerType to state [54]
transition on open_brac to state [52]
transition on B to state [51]
transition on star_op to state [50]
transition on C to state [49]
transition on Type to state [76]

-------------------
lalr_state [68]: {
  [Parameters ::= open_brac ParameterList (*) close_brac , {identifier funcd star_op open_brac close_brac open_square_brac open_curly_brac comma semicolon equal }]
}
transition on close_brac to state [75]

-------------------
lalr_state [69]: {
  [ParameterList_unnecessary_1 ::= (*) , {close_brac comma }]
  [ParameterList_unnecessary_1 ::= (*) ParameterList_unnecessary_1 comma ParameterDecl , {close_brac comma }]
  [ParameterList ::= ParameterDecl (*) ParameterList_unnecessary_1 , {close_brac }]
}
transition on ParameterList_unnecessary_1 to state [72]

-------------------
lalr_state [70]: {
  [IdentifierList ::= identifier (*) IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac }]
  [C ::= identifier (*) , {close_brac comma dot }]
  [IdentifierList_unnecessary_1 ::= (*) , {identifier funcd star_op open_brac open_square_brac }]
  [IdentifierList_unnecessary_1 ::= (*) comma identifier IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac }]
}
transition on IdentifierList_unnecessary_1 to state [45]
transition on comma to state [44]

-------------------
lalr_state [71]: {
  [Parameters ::= open_brac close_brac (*) , {identifier funcd star_op open_brac close_brac open_square_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [72]: {
  [ParameterList_unnecessary_1 ::= ParameterList_unnecessary_1 (*) comma ParameterDecl , {close_brac comma }]
  [ParameterList ::= ParameterDecl ParameterList_unnecessary_1 (*) , {close_brac }]
}
transition on comma to state [73]

-------------------
lalr_state [73]: {
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {close_brac comma }]
  [TypeLit ::= (*) ArrayType , {close_brac comma }]
  [TypeName ::= (*) C , {close_brac comma }]
  [ParameterDecl ::= (*) IdentifierList Type , {close_brac comma }]
  [Type ::= (*) TypeLit , {close_brac comma }]
  [FunctionType ::= (*) funcd Signature , {close_brac comma }]
  [PointerType ::= (*) star_op Type , {close_brac comma }]
  [TypeLit ::= (*) FunctionType , {close_brac comma }]
  [C ::= (*) identifier , {close_brac comma dot }]
  [TypeName ::= (*) B , {close_brac comma }]
  [Type ::= (*) TypeName , {close_brac comma }]
  [TypeLit ::= (*) PointerType , {close_brac comma }]
  [B ::= (*) C dot identifier , {close_brac comma }]
  [ParameterList_unnecessary_1 ::= ParameterList_unnecessary_1 comma (*) ParameterDecl , {close_brac comma }]
  [IdentifierList ::= (*) identifier IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac }]
  [Type ::= (*) open_brac Type close_brac , {close_brac comma }]
  [ParameterDecl ::= (*) Type , {close_brac comma }]
}
transition on FunctionType to state [62]
transition on ArrayType to state [61]
transition on funcd to state [60]
transition on TypeLit to state [58]
transition on identifier to state [70]
transition on open_square_brac to state [56]
transition on TypeName to state [55]
transition on PointerType to state [54]
transition on ParameterDecl to state [74]
transition on open_brac to state [52]
transition on IdentifierList to state [67]
transition on B to state [51]
transition on star_op to state [50]
transition on C to state [49]
transition on Type to state [66]

-------------------
lalr_state [74]: {
  [ParameterList_unnecessary_1 ::= ParameterList_unnecessary_1 comma ParameterDecl (*) , {close_brac comma }]
}

-------------------
lalr_state [75]: {
  [Parameters ::= open_brac ParameterList close_brac (*) , {identifier funcd star_op open_brac close_brac open_square_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [76]: {
  [ParameterDecl ::= IdentifierList Type (*) , {close_brac comma }]
}

-------------------
lalr_state [77]: {
  [Signature ::= Parameters Type (*) , {close_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [78]: {
  [TypeName ::= (*) C , {close_brac comma }]
  [TypeLit ::= (*) FunctionType , {close_brac comma }]
  [Parameters ::= open_brac (*) ParameterList close_brac , {close_brac open_curly_brac comma semicolon equal }]
  [ParameterDecl ::= (*) IdentifierList Type , {close_brac comma }]
  [Type ::= open_brac (*) Type close_brac , {close_brac open_curly_brac comma semicolon equal }]
  [Type ::= (*) open_brac Type close_brac , {close_brac comma }]
  [TypeLit ::= (*) ArrayType , {close_brac comma }]
  [PointerType ::= (*) star_op Type , {close_brac comma }]
  [Type ::= (*) TypeName , {close_brac comma }]
  [B ::= (*) C dot identifier , {close_brac comma }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {close_brac comma }]
  [Parameters ::= open_brac (*) close_brac , {close_brac open_curly_brac comma semicolon equal }]
  [FunctionType ::= (*) funcd Signature , {close_brac comma }]
  [ParameterDecl ::= (*) Type , {close_brac comma }]
  [TypeName ::= (*) B , {close_brac comma }]
  [TypeLit ::= (*) PointerType , {close_brac comma }]
  [IdentifierList ::= (*) identifier IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac }]
  [Type ::= (*) TypeLit , {close_brac comma }]
  [C ::= (*) identifier , {close_brac comma dot }]
  [ParameterList ::= (*) ParameterDecl ParameterList_unnecessary_1 , {close_brac }]
}
transition on FunctionType to state [62]
transition on close_brac to state [71]
transition on ArrayType to state [61]
transition on funcd to state [60]
transition on identifier to state [70]
transition on TypeLit to state [58]
transition on TypeName to state [55]
transition on open_square_brac to state [56]
transition on PointerType to state [54]
transition on ParameterDecl to state [69]
transition on ParameterList to state [68]
transition on open_brac to state [52]
transition on IdentifierList to state [67]
transition on B to state [51]
transition on star_op to state [50]
transition on C to state [49]
transition on Type to state [80]

-------------------
lalr_state [79]: {
  [Signature ::= Parameters Parameters (*) , {close_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [80]: {
  [ParameterDecl ::= Type (*) , {close_brac comma }]
  [Type ::= open_brac Type (*) close_brac , {close_brac open_curly_brac comma semicolon equal }]
}
transition on close_brac to state [81]

-------------------
lalr_state [81]: {
  [Type ::= open_brac Type close_brac (*) , {close_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [82]: {
  [Expression ::= UnaryExpr (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [83]: {
  [BasicLit ::= imaginary_lit (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [84]: {
  [BasicLit ::= string_lit (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [85]: {
  [unary_op ::= not_op (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
}

-------------------
lalr_state [86]: {
  [unary_op ::= plus_op (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
}

-------------------
lalr_state [87]: {
  [BasicLit ::= float_lit (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [88]: {
  [PrimaryExpr ::= Operand (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [89]: {
  [Operand ::= TypeName (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [90]: {
  [UnaryExpr ::= PrimaryExpr (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Index ::= (*) open_square_brac Expression close_square_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= PrimaryExpr (*) Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on Index to state [162]
transition on open_square_brac to state [161]

-------------------
lalr_state [91]: {
  [Operand ::= open_brac (*) Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [159]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [92]: {
  [unary_op ::= star_op (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
}

-------------------
lalr_state [93]: {
  [Operand ::= BasicLit (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [94]: {
  [unary_op ::= amp_op (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
}

-------------------
lalr_state [95]: {
  [LiteralValue ::= (*) open_curly_brac LiteralValue_unnecessary_2 NT$3 close_curly_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= ArrayType (*) LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on LiteralValue to state [144]
transition on open_curly_brac to state [143]

-------------------
lalr_state [96]: {
  [BasicLit ::= rune_lit (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [97]: {
  [VarSpec_unnecessary_2 ::= equal ExpressionList (*) , {semicolon }]
}

-------------------
lalr_state [98]: {
  [unary_op ::= minus_op (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
}

-------------------
lalr_state [99]: {
  [unary_op ::= pow_op (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
}

-------------------
lalr_state [100]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [ExpressionList_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 comma Expression , {close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [ExpressionList_unnecessary_1 ::= (*) , {close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
  [ExpressionList ::= Expression (*) ExpressionList_unnecessary_1 , {close_brac open_curly_brac semicolon colon }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_curly_brac comma semicolon colon }]
}
transition on right_shift_op to state [122]
transition on pow_op to state [121]
transition on minus_op to state [120]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on ExpressionList_unnecessary_1 to state [105]
transition on greater_equal_op to state [104]

-------------------
lalr_state [101]: {
  [BasicLit ::= int_lit (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [102]: {
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [UnaryExpr ::= unary_op (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on minus_op to state [98]
transition on pow_op to state [99]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on open_square_brac to state [56]
transition on amp_op to state [94]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [103]

-------------------
lalr_state [103]: {
  [UnaryExpr ::= unary_op UnaryExpr (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [104]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= Expression greater_equal_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [142]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [105]: {
  [ExpressionList_unnecessary_1 ::= ExpressionList_unnecessary_1 (*) comma Expression , {close_brac open_curly_brac comma semicolon colon }]
  [ExpressionList ::= Expression ExpressionList_unnecessary_1 (*) , {close_brac open_curly_brac semicolon colon }]
}
transition on comma to state [140]

-------------------
lalr_state [106]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= Expression less_equal_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [139]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [107]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= Expression plus_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [138]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [108]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= Expression amp_pow_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [137]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [109]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= Expression or_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [136]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [110]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression div_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [135]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [111]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= Expression left_shift_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [134]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [112]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression and_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [133]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [113]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression star_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [132]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [114]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= Expression greater_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [131]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [115]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression mod_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [130]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [116]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= Expression not_equal_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [129]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [117]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression pipe_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [128]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [118]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= Expression equal_equal_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [127]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [119]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= Expression less_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [126]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [120]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression minus_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [125]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [121]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression pow_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [124]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [122]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= Expression right_shift_op (*) Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [123]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [123]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression right_shift_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [124]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression pow_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [125]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression minus_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [126]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression less_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [127]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression equal_equal_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [128]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression pipe_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [129]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression not_equal_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [130]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression mod_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [131]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression greater_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [132]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression star_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [133]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression and_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [134]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression left_shift_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [135]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression div_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [136]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression or_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [137]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression amp_pow_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [138]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression plus_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [139]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression less_equal_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [140]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon dot colon equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [ExpressionList_unnecessary_1 ::= ExpressionList_unnecessary_1 comma (*) Expression , {plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [141]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [141]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [ExpressionList_unnecessary_1 ::= ExpressionList_unnecessary_1 comma Expression (*) , {plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_curly_brac comma semicolon colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [142]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression greater_equal_op Expression (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [143]: {
  [Value ::= (*) LiteralValue , {close_curly_brac comma }]
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [LiteralValue_unnecessary_2 ::= (*) ElementList NT$4 LiteralValue_unnecessary_1 , {close_curly_brac }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Element ::= (*) Value , {close_curly_brac comma }]
  [LiteralValue ::= open_curly_brac (*) LiteralValue_unnecessary_2 NT$3 close_curly_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [LiteralValue ::= (*) open_curly_brac LiteralValue_unnecessary_2 NT$3 close_curly_brac , {close_curly_brac comma }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [LiteralValue_unnecessary_2 ::= (*) , {close_curly_brac }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Value ::= (*) Expression , {close_curly_brac comma }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [ElementList ::= (*) Element ElementList_unnecessary_1 , {close_curly_brac comma }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
}
transition on unary_op to state [102]
transition on LiteralValue_unnecessary_2 to state [150]
transition on int_lit to state [101]
transition on Expression to state [149]
transition on Value to state [148]
transition on pow_op to state [99]
transition on ElementList to state [147]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on LiteralValue to state [146]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on Element to state [145]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on open_curly_brac to state [143]
transition on UnaryExpr to state [82]

-------------------
lalr_state [144]: {
  [Operand ::= ArrayType LiteralValue (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [145]: {
  [ElementList_unnecessary_1 ::= (*) ElementList_unnecessary_1 comma Element , {close_curly_brac comma }]
  [ElementList ::= Element (*) ElementList_unnecessary_1 , {close_curly_brac comma }]
  [ElementList_unnecessary_1 ::= (*) , {close_curly_brac comma }]
}
transition on ElementList_unnecessary_1 to state [156]

-------------------
lalr_state [146]: {
  [Value ::= LiteralValue (*) , {close_curly_brac comma }]
}

-------------------
lalr_state [147]: {
  [LiteralValue_unnecessary_2 ::= ElementList (*) NT$4 LiteralValue_unnecessary_1 , {close_curly_brac }]
  [NT$4 ::= (*) , {close_curly_brac comma }]
}
transition on NT$4 to state [153]

-------------------
lalr_state [148]: {
  [Element ::= Value (*) , {close_curly_brac comma }]
}

-------------------
lalr_state [149]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Value ::= Expression (*) , {close_curly_brac comma }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [150]: {
  [NT$3 ::= (*) , {close_curly_brac }]
  [LiteralValue ::= open_curly_brac LiteralValue_unnecessary_2 (*) NT$3 close_curly_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on NT$3 to state [151]

-------------------
lalr_state [151]: {
  [LiteralValue ::= open_curly_brac LiteralValue_unnecessary_2 NT$3 (*) close_curly_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on close_curly_brac to state [152]

-------------------
lalr_state [152]: {
  [LiteralValue ::= open_curly_brac LiteralValue_unnecessary_2 NT$3 close_curly_brac (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [153]: {
  [LiteralValue_unnecessary_2 ::= ElementList NT$4 (*) LiteralValue_unnecessary_1 , {close_curly_brac }]
  [LiteralValue_unnecessary_1 ::= (*) comma , {close_curly_brac }]
  [LiteralValue_unnecessary_1 ::= (*) , {close_curly_brac }]
}
transition on LiteralValue_unnecessary_1 to state [155]
transition on comma to state [154]

-------------------
lalr_state [154]: {
  [LiteralValue_unnecessary_1 ::= comma (*) , {close_curly_brac }]
}

-------------------
lalr_state [155]: {
  [LiteralValue_unnecessary_2 ::= ElementList NT$4 LiteralValue_unnecessary_1 (*) , {close_curly_brac }]
}

-------------------
lalr_state [156]: {
  [ElementList_unnecessary_1 ::= ElementList_unnecessary_1 (*) comma Element , {close_curly_brac comma }]
  [ElementList ::= Element ElementList_unnecessary_1 (*) , {close_curly_brac comma }]
}
transition on comma to state [157]

-------------------
lalr_state [157]: {
  [Value ::= (*) LiteralValue , {close_curly_brac comma }]
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [ElementList_unnecessary_1 ::= ElementList_unnecessary_1 comma (*) Element , {close_curly_brac comma }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Element ::= (*) Value , {close_curly_brac comma }]
  [LiteralValue ::= (*) open_curly_brac LiteralValue_unnecessary_2 NT$3 close_curly_brac , {close_curly_brac comma }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Value ::= (*) Expression , {close_curly_brac comma }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_curly_brac comma }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_curly_brac comma }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [149]
transition on Value to state [148]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on LiteralValue to state [146]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on Element to state [158]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on open_curly_brac to state [143]
transition on UnaryExpr to state [82]

-------------------
lalr_state [158]: {
  [ElementList_unnecessary_1 ::= ElementList_unnecessary_1 comma Element (*) , {close_curly_brac comma }]
}

-------------------
lalr_state [159]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Operand ::= open_brac Expression (*) close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac }]
}
transition on right_shift_op to state [122]
transition on pow_op to state [121]
transition on minus_op to state [120]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on close_brac to state [160]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [160]: {
  [Operand ::= open_brac Expression close_brac (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [161]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Index ::= open_square_brac (*) Expression close_square_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac close_square_brac }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [163]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [162]: {
  [PrimaryExpr ::= PrimaryExpr Index (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [163]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Index ::= open_square_brac Expression (*) close_square_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_square_brac }]
}
transition on right_shift_op to state [122]
transition on pow_op to state [121]
transition on minus_op to state [120]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on close_square_brac to state [164]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [164]: {
  [Index ::= open_square_brac Expression close_square_brac (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [165]: {
  [ArrayType ::= open_square_brac ArrayLength (*) close_square_brac Type , {close_brac open_curly_brac comma semicolon equal }]
}
transition on close_square_brac to state [167]

-------------------
lalr_state [166]: {
  [ArrayLength ::= int_lit (*) , {close_square_brac }]
}

-------------------
lalr_state [167]: {
  [ArrayType ::= open_square_brac ArrayLength close_square_brac (*) Type , {close_brac open_curly_brac comma semicolon equal }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {close_brac open_curly_brac comma semicolon equal }]
  [TypeLit ::= (*) ArrayType , {close_brac open_curly_brac comma semicolon equal }]
  [TypeName ::= (*) C , {close_brac open_curly_brac comma semicolon equal }]
  [Type ::= (*) TypeLit , {close_brac open_curly_brac comma semicolon equal }]
  [FunctionType ::= (*) funcd Signature , {close_brac open_curly_brac comma semicolon equal }]
  [PointerType ::= (*) star_op Type , {close_brac open_curly_brac comma semicolon equal }]
  [TypeLit ::= (*) FunctionType , {close_brac open_curly_brac comma semicolon equal }]
  [C ::= (*) identifier , {close_brac open_curly_brac comma semicolon dot equal }]
  [TypeName ::= (*) B , {close_brac open_curly_brac comma semicolon equal }]
  [Type ::= (*) TypeName , {close_brac open_curly_brac comma semicolon equal }]
  [TypeLit ::= (*) PointerType , {close_brac open_curly_brac comma semicolon equal }]
  [B ::= (*) C dot identifier , {close_brac open_curly_brac comma semicolon equal }]
  [Type ::= (*) open_brac Type close_brac , {close_brac open_curly_brac comma semicolon equal }]
}
transition on FunctionType to state [62]
transition on ArrayType to state [61]
transition on funcd to state [60]
transition on TypeLit to state [58]
transition on identifier to state [57]
transition on open_square_brac to state [56]
transition on TypeName to state [55]
transition on PointerType to state [54]
transition on open_brac to state [52]
transition on B to state [51]
transition on star_op to state [50]
transition on C to state [49]
transition on Type to state [168]

-------------------
lalr_state [168]: {
  [ArrayType ::= open_square_brac ArrayLength close_square_brac Type (*) , {close_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [169]: {
  [Type ::= open_brac Type (*) close_brac , {close_brac open_curly_brac comma semicolon equal }]
}
transition on close_brac to state [81]

-------------------
lalr_state [170]: {
  [PointerType ::= star_op Type (*) , {close_brac open_curly_brac comma semicolon equal }]
}

-------------------
lalr_state [171]: {
  [B ::= C dot (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}
transition on identifier to state [172]

-------------------
lalr_state [172]: {
  [B ::= C dot identifier (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac close_brac open_square_brac close_square_brac open_curly_brac close_curly_brac inc_op comma semicolon dec_op colon equal }]
}

-------------------
lalr_state [173]: {
  [VarSpec_unnecessary_2 ::= Type VarSpec_unnecessary_1 (*) , {semicolon }]
}

-------------------
lalr_state [174]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [VarSpec_unnecessary_1 ::= equal (*) ExpressionList , {semicolon }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [ExpressionList ::= (*) Expression ExpressionList_unnecessary_1 , {semicolon }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [100]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on ExpressionList to state [175]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [175]: {
  [VarSpec_unnecessary_1 ::= equal ExpressionList (*) , {semicolon }]
}

-------------------
lalr_state [176]: {
  [ConstDecl ::= (*) constd ConstDecl_unnecessary_2 , {semicolon }]
  [Declaration ::= (*) VarDecl , {semicolon }]
  [TopLevelDecl ::= (*) Declaration , {semicolon }]
  [SourceFile_unnecessary_2_dash ::= (*) , {EOF }]
  [Declaration ::= (*) ConstDecl , {semicolon }]
  [FunctionDecl ::= (*) funcd identifier NT$1 FunctionDecl_unnecessary_1 , {semicolon }]
  [VarDecl ::= (*) var VarDecl_unnecessary_2 , {semicolon }]
  [TopLevelDecl ::= (*) FunctionDecl , {semicolon }]
  [SourceFile_unnecessary_2_dash ::= TopLevelDecl semicolon (*) SourceFile_unnecessary_2_dash , {EOF }]
  [SourceFile_unnecessary_2_dash ::= (*) TopLevelDecl semicolon SourceFile_unnecessary_2_dash , {EOF }]
}
transition on ConstDecl to state [34]
transition on var to state [33]
transition on FunctionDecl to state [32]
transition on TopLevelDecl to state [31]
transition on funcd to state [30]
transition on VarDecl to state [29]
transition on Declaration to state [28]
transition on SourceFile_unnecessary_2_dash to state [177]
transition on constd to state [25]

-------------------
lalr_state [177]: {
  [SourceFile_unnecessary_2_dash ::= TopLevelDecl semicolon SourceFile_unnecessary_2_dash (*) , {EOF }]
}

-------------------
lalr_state [178]: {
  [FunctionDecl ::= funcd identifier (*) NT$1 FunctionDecl_unnecessary_1 , {semicolon }]
  [NT$1 ::= (*) , {open_brac }]
}
transition on NT$1 to state [179]

-------------------
lalr_state [179]: {
  [Parameters ::= (*) open_brac ParameterList close_brac , {identifier funcd star_op open_brac open_square_brac semicolon }]
  [Signature ::= (*) Parameters Parameters , {open_curly_brac semicolon }]
  [FunctionDecl_unnecessary_1 ::= (*) Signature , {semicolon }]
  [Signature ::= (*) Parameters , {open_curly_brac semicolon }]
  [Function ::= (*) Signature NT$2 FunctionBody , {semicolon }]
  [FunctionDecl_unnecessary_1 ::= (*) Function , {semicolon }]
  [FunctionDecl ::= funcd identifier NT$1 (*) FunctionDecl_unnecessary_1 , {semicolon }]
  [Parameters ::= (*) open_brac close_brac , {identifier funcd star_op open_brac open_square_brac semicolon }]
  [Signature ::= (*) Parameters Type , {open_curly_brac semicolon }]
}
transition on FunctionDecl_unnecessary_1 to state [182]
transition on open_brac to state [65]
transition on Parameters to state [64]
transition on Signature to state [181]
transition on Function to state [180]

-------------------
lalr_state [180]: {
  [FunctionDecl_unnecessary_1 ::= Function (*) , {semicolon }]
}

-------------------
lalr_state [181]: {
  [NT$2 ::= (*) , {open_curly_brac }]
  [FunctionDecl_unnecessary_1 ::= Signature (*) , {semicolon }]
  [Function ::= Signature (*) NT$2 FunctionBody , {semicolon }]
}
transition on NT$2 to state [183]

-------------------
lalr_state [182]: {
  [FunctionDecl ::= funcd identifier NT$1 FunctionDecl_unnecessary_1 (*) , {semicolon }]
}

-------------------
lalr_state [183]: {
  [FunctionBody ::= (*) open_curly_brac StatementList close_curly_brac , {semicolon }]
  [Function ::= Signature NT$2 (*) FunctionBody , {semicolon }]
}
transition on FunctionBody to state [185]
transition on open_curly_brac to state [184]

-------------------
lalr_state [184]: {
  [StatementList_unnecessary_1 ::= (*) StatementList_unnecessary_1 Statement semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [FunctionBody ::= open_curly_brac (*) StatementList close_curly_brac , {semicolon }]
  [StatementList ::= (*) StatementList_unnecessary_1 , {close_curly_brac }]
  [StatementList_unnecessary_1 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
}
transition on StatementList to state [187]
transition on StatementList_unnecessary_1 to state [186]

-------------------
lalr_state [185]: {
  [Function ::= Signature NT$2 FunctionBody (*) , {semicolon }]
}

-------------------
lalr_state [186]: {
  [Cheez ::= (*) ifd Expression NT$5 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [Statement ::= (*) Declaration , {semicolon }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [Statement ::= (*) IfStmt , {semicolon }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= (*) Label ReturnStmt , {semicolon }]
  [ExprSwitchStmt ::= (*) switchd open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [ForStmt ::= (*) ForStmt_unnecessary_2 open_curly_brac StatementList close_curly_brac , {semicolon }]
  [Statement ::= (*) SimpleStmt , {semicolon }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [ReturnStmt ::= (*) returnd ExpressionList , {semicolon }]
  [IfStmt ::= (*) Cheez elsed NT$10 IfStmt , {semicolon }]
  [Statement ::= (*) SwitchStmt , {semicolon }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= (*) Label BreakStmt , {semicolon }]
  [ExprSwitchStmt ::= (*) switchd SimpleStmt semicolon open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledForStmt ::= (*) identifier colon NT$16 ForStmt , {semicolon }]
  [Block ::= (*) open_curly_brac NT$0 StatementList close_curly_brac , {semicolon }]
  [ForStmt_unnecessary_2 ::= (*) ford , {open_curly_brac }]
  [Cheez2 ::= (*) ifd SimpleStmt semicolon Expression NT$6 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [Statement ::= (*) Func_call , {semicolon }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [ReturnStmt ::= (*) returnd , {semicolon }]
  [Statement ::= (*) LabeledForStmt , {semicolon }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= (*) Label ContinueStmt , {semicolon }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [StatementList ::= StatementList_unnecessary_1 (*) , {defaultd cased close_curly_brac }]
  [VarDecl ::= (*) var VarDecl_unnecessary_2 , {semicolon }]
  [GotoStmt ::= (*) gotod identifier , {semicolon }]
  [Statement ::= (*) ReturnStmt , {semicolon }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BreakStmt ::= (*) breakd identifier , {semicolon }]
  [Statement ::= (*) ForStmt , {semicolon }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= (*) Label GotoStmt , {semicolon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [StatementList_unnecessary_1 ::= StatementList_unnecessary_1 (*) Statement semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd defaultd cased gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [ContinueStmt ::= (*) continued identifier , {semicolon }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac open_square_brac inc_op comma semicolon dec_op equal }]
  [IfStmt ::= (*) Cheez2 elsed NT$7 IfStmt , {semicolon }]
  [Statement ::= (*) BreakStmt , {semicolon }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [BreakStmt ::= (*) breakd , {semicolon }]
  [IfStmt ::= (*) Cheez elsed NT$11 open_curly_brac NT$12 StatementList close_curly_brac , {semicolon }]
  [SimpleStmt ::= (*) Expression SimpleStmt_unnecessary_1 , {semicolon }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= (*) Label LabeledStmt , {semicolon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [ContinueStmt ::= (*) continued , {semicolon }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac open_square_brac inc_op comma semicolon dec_op equal }]
  [Statement ::= (*) ContinueStmt , {semicolon }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [Label ::= (*) identifier colon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac semicolon }]
  [Func_call ::= (*) TypeName open_brac close_brac , {semicolon }]
  [IfStmt ::= (*) Cheez , {semicolon }]
  [SimpleStmt ::= (*) , {semicolon }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= (*) Label Block , {semicolon }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac open_square_brac inc_op comma semicolon dec_op equal }]
  [Statement ::= (*) GotoStmt , {semicolon }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [Declaration ::= (*) ConstDecl , {semicolon }]
  [LabeledStmt ::= (*) Label Declaration , {semicolon }]
  [Func_call ::= (*) TypeName open_brac ExpressionList close_brac , {semicolon }]
  [SwitchStmt ::= (*) ExprSwitchStmt , {semicolon }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= (*) Label IfStmt , {semicolon }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac open_square_brac inc_op comma semicolon dec_op dot equal }]
  [IfStmt ::= (*) Cheez2 elsed NT$8 open_curly_brac NT$9 StatementList close_curly_brac , {semicolon }]
  [Statement ::= (*) LabeledStmt , {semicolon }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [Declaration ::= (*) VarDecl , {semicolon }]
  [LabeledStmt ::= (*) Label SimpleStmt , {semicolon }]
  [ExprSwitchStmt ::= (*) switchd SimpleStmt semicolon Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= (*) Label SwitchStmt , {semicolon }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [IfStmt ::= (*) Cheez2 , {semicolon }]
  [Statement ::= (*) Block , {semicolon }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [ConstDecl ::= (*) constd ConstDecl_unnecessary_2 , {semicolon }]
  [LabeledStmt ::= (*) Label Func_call , {semicolon }]
  [ExprSwitchStmt ::= (*) switchd Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= (*) Label LabeledForStmt , {semicolon }]
  [ForStmt ::= (*) ford NT$13 ForStmt_unnecessary_1 NT$14 open_curly_brac StatementList close_curly_brac , {semicolon }]
}
transition on open_square_brac to state [56]
transition on Operand to state [88]
transition on Block to state [218]
transition on BreakStmt to state [217]
transition on SwitchStmt to state [216]
transition on ContinueStmt to state [215]
transition on Declaration to state [214]
transition on ConstDecl to state [34]
transition on LabeledStmt to state [213]
transition on pow_op to state [99]
transition on continued to state [212]
transition on Expression to state [211]
transition on VarDecl to state [29]
transition on Statement to state [210]
transition on amp_op to state [94]
transition on plus_op to state [86]
transition on ford to state [209]
transition on SimpleStmt to state [208]
transition on LabeledForStmt to state [207]
transition on ArrayType to state [95]
transition on gotod to state [206]
transition on constd to state [25]
transition on breakd to state [205]
transition on IfStmt to state [204]
transition on not_op to state [85]
transition on Label to state [203]
transition on unary_op to state [102]
transition on returnd to state [202]
transition on Cheez2 to state [201]
transition on open_curly_brac to state [200]
transition on float_lit to state [87]
transition on PrimaryExpr to state [90]
transition on ifd to state [199]
transition on ExprSwitchStmt to state [198]
transition on var to state [33]
transition on UnaryExpr to state [82]
transition on ForStmt_unnecessary_2 to state [197]
transition on Cheez to state [196]
transition on open_brac to state [91]
transition on imaginary_lit to state [83]
transition on BasicLit to state [93]
transition on Func_call to state [195]
transition on rune_lit to state [96]
transition on minus_op to state [98]
transition on B to state [51]
transition on C to state [49]
transition on identifier to state [194]
transition on int_lit to state [101]
transition on TypeName to state [193]
transition on GotoStmt to state [192]
transition on switchd to state [191]
transition on ForStmt to state [190]
transition on string_lit to state [84]
transition on star_op to state [92]
transition on ReturnStmt to state [189]

-------------------
lalr_state [187]: {
  [FunctionBody ::= open_curly_brac StatementList (*) close_curly_brac , {semicolon }]
}
transition on close_curly_brac to state [188]

-------------------
lalr_state [188]: {
  [FunctionBody ::= open_curly_brac StatementList close_curly_brac (*) , {semicolon }]
}

-------------------
lalr_state [189]: {
  [Statement ::= ReturnStmt (*) , {semicolon }]
}

-------------------
lalr_state [190]: {
  [Statement ::= ForStmt (*) , {semicolon }]
}

-------------------
lalr_state [191]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExprSwitchStmt ::= switchd (*) Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExprSwitchStmt ::= switchd (*) open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op dot equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt ::= (*) Expression SimpleStmt_unnecessary_1 , {semicolon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExprSwitchStmt ::= switchd (*) SimpleStmt semicolon open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt ::= (*) , {semicolon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExprSwitchStmt ::= switchd (*) SimpleStmt semicolon Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [318]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on SimpleStmt to state [317]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on open_curly_brac to state [316]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [192]: {
  [Statement ::= GotoStmt (*) , {semicolon }]
}

-------------------
lalr_state [193]: {
  [Func_call ::= TypeName (*) open_brac ExpressionList close_brac , {open_curly_brac semicolon }]
  [Operand ::= TypeName (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Func_call ::= TypeName (*) open_brac close_brac , {open_curly_brac semicolon }]
}
transition on open_brac to state [312]

-------------------
lalr_state [194]: {
  [LabeledForStmt ::= identifier (*) colon NT$16 ForStmt , {semicolon }]
  [C ::= identifier (*) , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac open_square_brac inc_op comma semicolon dec_op dot equal }]
  [Label ::= identifier (*) colon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac semicolon }]
}
transition on colon to state [309]

-------------------
lalr_state [195]: {
  [Statement ::= Func_call (*) , {semicolon }]
}

-------------------
lalr_state [196]: {
  [IfStmt ::= Cheez (*) elsed NT$11 open_curly_brac NT$12 StatementList close_curly_brac , {semicolon }]
  [IfStmt ::= Cheez (*) elsed NT$10 IfStmt , {semicolon }]
  [IfStmt ::= Cheez (*) , {semicolon }]
}
transition on elsed to state [301]

-------------------
lalr_state [197]: {
  [ForStmt ::= ForStmt_unnecessary_2 (*) open_curly_brac StatementList close_curly_brac , {semicolon }]
}
transition on open_curly_brac to state [298]

-------------------
lalr_state [198]: {
  [SwitchStmt ::= ExprSwitchStmt (*) , {semicolon }]
}

-------------------
lalr_state [199]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Cheez ::= ifd (*) Expression NT$5 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op dot equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt ::= (*) Expression SimpleStmt_unnecessary_1 , {semicolon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt ::= (*) , {semicolon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Cheez2 ::= ifd (*) SimpleStmt semicolon Expression NT$6 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [287]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on SimpleStmt to state [286]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [200]: {
  [NT$0 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [Block ::= open_curly_brac (*) NT$0 StatementList close_curly_brac , {semicolon }]
}
transition on NT$0 to state [283]

-------------------
lalr_state [201]: {
  [IfStmt ::= Cheez2 (*) elsed NT$8 open_curly_brac NT$9 StatementList close_curly_brac , {semicolon }]
  [IfStmt ::= Cheez2 (*) elsed NT$7 IfStmt , {semicolon }]
  [IfStmt ::= Cheez2 (*) , {semicolon }]
}
transition on elsed to state [275]

-------------------
lalr_state [202]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ReturnStmt ::= returnd (*) ExpressionList , {semicolon }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [ExpressionList ::= (*) Expression ExpressionList_unnecessary_1 , {semicolon }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ReturnStmt ::= returnd (*) , {semicolon }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [100]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on ExpressionList to state [274]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [203]: {
  [Cheez ::= (*) ifd Expression NT$5 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) ReturnStmt , {semicolon }]
  [LabeledStmt ::= (*) Label ReturnStmt , {semicolon }]
  [ExprSwitchStmt ::= (*) switchd open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [ReturnStmt ::= (*) returnd ExpressionList , {semicolon }]
  [IfStmt ::= (*) Cheez elsed NT$10 IfStmt , {semicolon }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) BreakStmt , {semicolon }]
  [LabeledStmt ::= (*) Label BreakStmt , {semicolon }]
  [ExprSwitchStmt ::= (*) switchd SimpleStmt semicolon open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledForStmt ::= (*) identifier colon NT$16 ForStmt , {semicolon }]
  [Block ::= (*) open_curly_brac NT$0 StatementList close_curly_brac , {semicolon }]
  [Cheez2 ::= (*) ifd SimpleStmt semicolon Expression NT$6 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [ReturnStmt ::= (*) returnd , {semicolon }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) ContinueStmt , {semicolon }]
  [LabeledStmt ::= (*) Label ContinueStmt , {semicolon }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [VarDecl ::= (*) var VarDecl_unnecessary_2 , {semicolon }]
  [GotoStmt ::= (*) gotod identifier , {semicolon }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BreakStmt ::= (*) breakd identifier , {semicolon }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) GotoStmt , {semicolon }]
  [LabeledStmt ::= (*) Label GotoStmt , {semicolon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [ContinueStmt ::= (*) continued identifier , {semicolon }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac open_square_brac inc_op comma semicolon dec_op equal }]
  [IfStmt ::= (*) Cheez2 elsed NT$7 IfStmt , {semicolon }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [BreakStmt ::= (*) breakd , {semicolon }]
  [IfStmt ::= (*) Cheez elsed NT$11 open_curly_brac NT$12 StatementList close_curly_brac , {semicolon }]
  [SimpleStmt ::= (*) Expression SimpleStmt_unnecessary_1 , {semicolon }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) LabeledStmt , {semicolon }]
  [LabeledStmt ::= (*) Label LabeledStmt , {semicolon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [ContinueStmt ::= (*) continued , {semicolon }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac open_square_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [Label ::= (*) identifier colon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac semicolon }]
  [Func_call ::= (*) TypeName open_brac close_brac , {semicolon }]
  [IfStmt ::= (*) Cheez , {semicolon }]
  [SimpleStmt ::= (*) , {semicolon }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) Block , {semicolon }]
  [LabeledStmt ::= (*) Label Block , {semicolon }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac open_square_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) Declaration , {semicolon }]
  [Declaration ::= (*) ConstDecl , {semicolon }]
  [LabeledStmt ::= (*) Label Declaration , {semicolon }]
  [Func_call ::= (*) TypeName open_brac ExpressionList close_brac , {semicolon }]
  [SwitchStmt ::= (*) ExprSwitchStmt , {semicolon }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) IfStmt , {semicolon }]
  [LabeledStmt ::= (*) Label IfStmt , {semicolon }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_brac open_square_brac inc_op comma semicolon dec_op dot equal }]
  [IfStmt ::= (*) Cheez2 elsed NT$8 open_curly_brac NT$9 StatementList close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) SimpleStmt , {semicolon }]
  [Declaration ::= (*) VarDecl , {semicolon }]
  [LabeledStmt ::= (*) Label SimpleStmt , {semicolon }]
  [ExprSwitchStmt ::= (*) switchd SimpleStmt semicolon Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) SwitchStmt , {semicolon }]
  [LabeledStmt ::= (*) Label SwitchStmt , {semicolon }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [IfStmt ::= (*) Cheez2 , {semicolon }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) Func_call , {semicolon }]
  [ConstDecl ::= (*) constd ConstDecl_unnecessary_2 , {semicolon }]
  [LabeledStmt ::= (*) Label Func_call , {semicolon }]
  [ExprSwitchStmt ::= (*) switchd Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op inc_op comma semicolon dec_op equal }]
  [LabeledStmt ::= Label (*) LabeledForStmt , {semicolon }]
  [LabeledStmt ::= (*) Label LabeledForStmt , {semicolon }]
}
transition on open_square_brac to state [56]
transition on Operand to state [88]
transition on Block to state [273]
transition on BreakStmt to state [272]
transition on ContinueStmt to state [271]
transition on SwitchStmt to state [270]
transition on Declaration to state [269]
transition on LabeledStmt to state [268]
transition on ConstDecl to state [34]
transition on pow_op to state [99]
transition on continued to state [212]
transition on Expression to state [211]
transition on VarDecl to state [29]
transition on amp_op to state [94]
transition on plus_op to state [86]
transition on SimpleStmt to state [267]
transition on ArrayType to state [95]
transition on LabeledForStmt to state [266]
transition on gotod to state [206]
transition on constd to state [25]
transition on breakd to state [205]
transition on IfStmt to state [265]
transition on not_op to state [85]
transition on Label to state [203]
transition on unary_op to state [102]
transition on returnd to state [202]
transition on Cheez2 to state [201]
transition on open_curly_brac to state [200]
transition on float_lit to state [87]
transition on PrimaryExpr to state [90]
transition on ifd to state [199]
transition on ExprSwitchStmt to state [198]
transition on var to state [33]
transition on UnaryExpr to state [82]
transition on Cheez to state [196]
transition on open_brac to state [91]
transition on imaginary_lit to state [83]
transition on BasicLit to state [93]
transition on Func_call to state [264]
transition on rune_lit to state [96]
transition on minus_op to state [98]
transition on B to state [51]
transition on C to state [49]
transition on identifier to state [194]
transition on int_lit to state [101]
transition on TypeName to state [193]
transition on GotoStmt to state [263]
transition on switchd to state [191]
transition on string_lit to state [84]
transition on star_op to state [92]
transition on ReturnStmt to state [262]

-------------------
lalr_state [204]: {
  [Statement ::= IfStmt (*) , {semicolon }]
}

-------------------
lalr_state [205]: {
  [BreakStmt ::= breakd (*) identifier , {semicolon }]
  [BreakStmt ::= breakd (*) , {semicolon }]
}
transition on identifier to state [261]

-------------------
lalr_state [206]: {
  [GotoStmt ::= gotod (*) identifier , {semicolon }]
}
transition on identifier to state [260]

-------------------
lalr_state [207]: {
  [Statement ::= LabeledForStmt (*) , {semicolon }]
}

-------------------
lalr_state [208]: {
  [Statement ::= SimpleStmt (*) , {semicolon }]
}

-------------------
lalr_state [209]: {
  [NT$13 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac semicolon }]
  [ForStmt ::= ford (*) NT$13 ForStmt_unnecessary_1 NT$14 open_curly_brac StatementList close_curly_brac , {semicolon }]
  [ForStmt_unnecessary_2 ::= ford (*) , {open_curly_brac }]
}
transition on NT$13 to state [244]

-------------------
lalr_state [210]: {
  [StatementList_unnecessary_1 ::= StatementList_unnecessary_1 Statement (*) semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd defaultd cased gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
}
transition on semicolon to state [243]

-------------------
lalr_state [211]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 assign_op Func_call , {open_curly_brac semicolon }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 assign_op ExpressionList , {open_curly_brac semicolon }]
  [IncDecStmt_unnecessary_1 ::= (*) dec_op , {open_curly_brac semicolon }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExpressionList_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 comma Expression , {plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op comma equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt ::= Expression (*) SimpleStmt_unnecessary_1 , {open_curly_brac semicolon }]
  [SimpleStmt_unnecessary_1 ::= (*) , {open_curly_brac semicolon }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) IncDecStmt_unnecessary_1 , {open_curly_brac semicolon }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExpressionList_unnecessary_1 ::= (*) , {plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op comma equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [IncDecStmt_unnecessary_1 ::= (*) inc_op , {open_curly_brac semicolon }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
}
transition on right_shift_op to state [122]
transition on pow_op to state [121]
transition on minus_op to state [120]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on IncDecStmt_unnecessary_1 to state [224]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on SimpleStmt_unnecessary_1 to state [223]
transition on div_op to state [110]
transition on or_op to state [109]
transition on inc_op to state [222]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on dec_op to state [221]
transition on ExpressionList_unnecessary_1 to state [220]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [212]: {
  [ContinueStmt ::= continued (*) , {semicolon }]
  [ContinueStmt ::= continued (*) identifier , {semicolon }]
}
transition on identifier to state [219]

-------------------
lalr_state [213]: {
  [Statement ::= LabeledStmt (*) , {semicolon }]
}

-------------------
lalr_state [214]: {
  [Statement ::= Declaration (*) , {semicolon }]
}

-------------------
lalr_state [215]: {
  [Statement ::= ContinueStmt (*) , {semicolon }]
}

-------------------
lalr_state [216]: {
  [Statement ::= SwitchStmt (*) , {semicolon }]
}

-------------------
lalr_state [217]: {
  [Statement ::= BreakStmt (*) , {semicolon }]
}

-------------------
lalr_state [218]: {
  [Statement ::= Block (*) , {semicolon }]
}

-------------------
lalr_state [219]: {
  [ContinueStmt ::= continued identifier (*) , {semicolon }]
}

-------------------
lalr_state [220]: {
  [SimpleStmt_unnecessary_1 ::= ExpressionList_unnecessary_1 (*) assign_op Func_call , {open_curly_brac semicolon }]
  [assign_op_unnecessary_1 ::= (*) add_op , {equal }]
  [add_op ::= (*) pipe_op , {equal }]
  [mul_op ::= (*) left_shift_op , {equal }]
  [SimpleStmt_unnecessary_1 ::= ExpressionList_unnecessary_1 (*) assign_op ExpressionList , {open_curly_brac semicolon }]
  [add_op ::= (*) plus_op , {equal }]
  [mul_op ::= (*) div_op , {equal }]
  [mul_op ::= (*) amp_pow_op , {equal }]
  [ExpressionList_unnecessary_1 ::= ExpressionList_unnecessary_1 (*) comma Expression , {plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op comma equal }]
  [assign_op_unnecessary_1 ::= (*) mul_op , {equal }]
  [add_op ::= (*) pow_op , {equal }]
  [mul_op ::= (*) right_shift_op , {equal }]
  [assign_op ::= (*) assign_op_unnecessary_1 equal , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [add_op ::= (*) minus_op , {equal }]
  [mul_op ::= (*) mod_op , {equal }]
  [assign_op_unnecessary_1 ::= (*) , {equal }]
  [mul_op ::= (*) star_op , {equal }]
  [mul_op ::= (*) amp_op , {equal }]
}
transition on comma to state [140]
transition on pipe_op to state [239]
transition on div_op to state [238]
transition on mod_op to state [237]
transition on plus_op to state [236]
transition on pow_op to state [235]
transition on assign_op_unnecessary_1 to state [234]
transition on right_shift_op to state [233]
transition on left_shift_op to state [232]
transition on amp_pow_op to state [231]
transition on assign_op to state [230]
transition on mul_op to state [229]
transition on amp_op to state [228]
transition on add_op to state [227]
transition on minus_op to state [226]
transition on star_op to state [225]

-------------------
lalr_state [221]: {
  [IncDecStmt_unnecessary_1 ::= dec_op (*) , {open_curly_brac semicolon }]
}

-------------------
lalr_state [222]: {
  [IncDecStmt_unnecessary_1 ::= inc_op (*) , {open_curly_brac semicolon }]
}

-------------------
lalr_state [223]: {
  [SimpleStmt ::= Expression SimpleStmt_unnecessary_1 (*) , {open_curly_brac semicolon }]
}

-------------------
lalr_state [224]: {
  [SimpleStmt_unnecessary_1 ::= IncDecStmt_unnecessary_1 (*) , {open_curly_brac semicolon }]
}

-------------------
lalr_state [225]: {
  [mul_op ::= star_op (*) , {equal }]
}

-------------------
lalr_state [226]: {
  [add_op ::= minus_op (*) , {equal }]
}

-------------------
lalr_state [227]: {
  [assign_op_unnecessary_1 ::= add_op (*) , {equal }]
}

-------------------
lalr_state [228]: {
  [mul_op ::= amp_op (*) , {equal }]
}

-------------------
lalr_state [229]: {
  [assign_op_unnecessary_1 ::= mul_op (*) , {equal }]
}

-------------------
lalr_state [230]: {
  [SimpleStmt_unnecessary_1 ::= ExpressionList_unnecessary_1 assign_op (*) ExpressionList , {open_curly_brac semicolon }]
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac comma semicolon }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Func_call ::= (*) TypeName open_brac close_brac , {open_curly_brac semicolon }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_brac open_square_brac open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac comma semicolon }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac comma semicolon }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Func_call ::= (*) TypeName open_brac ExpressionList close_brac , {open_curly_brac semicolon }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_brac open_square_brac open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac comma semicolon }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac comma semicolon }]
  [SimpleStmt_unnecessary_1 ::= ExpressionList_unnecessary_1 assign_op (*) Func_call , {open_curly_brac semicolon }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac comma semicolon }]
  [ExpressionList ::= (*) Expression ExpressionList_unnecessary_1 , {open_curly_brac semicolon }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_brac open_square_brac open_curly_brac comma semicolon dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac comma semicolon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac comma semicolon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_brac open_square_brac open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac comma semicolon }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [100]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on ExpressionList to state [242]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on open_square_brac to state [56]
transition on amp_op to state [94]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on Func_call to state [241]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [193]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [231]: {
  [mul_op ::= amp_pow_op (*) , {equal }]
}

-------------------
lalr_state [232]: {
  [mul_op ::= left_shift_op (*) , {equal }]
}

-------------------
lalr_state [233]: {
  [mul_op ::= right_shift_op (*) , {equal }]
}

-------------------
lalr_state [234]: {
  [assign_op ::= assign_op_unnecessary_1 (*) equal , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
}
transition on equal to state [240]

-------------------
lalr_state [235]: {
  [add_op ::= pow_op (*) , {equal }]
}

-------------------
lalr_state [236]: {
  [add_op ::= plus_op (*) , {equal }]
}

-------------------
lalr_state [237]: {
  [mul_op ::= mod_op (*) , {equal }]
}

-------------------
lalr_state [238]: {
  [mul_op ::= div_op (*) , {equal }]
}

-------------------
lalr_state [239]: {
  [add_op ::= pipe_op (*) , {equal }]
}

-------------------
lalr_state [240]: {
  [assign_op ::= assign_op_unnecessary_1 equal (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
}

-------------------
lalr_state [241]: {
  [SimpleStmt_unnecessary_1 ::= ExpressionList_unnecessary_1 assign_op Func_call (*) , {open_curly_brac semicolon }]
}

-------------------
lalr_state [242]: {
  [SimpleStmt_unnecessary_1 ::= ExpressionList_unnecessary_1 assign_op ExpressionList (*) , {open_curly_brac semicolon }]
}

-------------------
lalr_state [243]: {
  [StatementList_unnecessary_1 ::= StatementList_unnecessary_1 Statement semicolon (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd defaultd cased gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
}

-------------------
lalr_state [244]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ForStmt_unnecessary_1 ::= (*) ForClause , {open_curly_brac }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [ForStmt ::= ford NT$13 (*) ForStmt_unnecessary_1 NT$14 open_curly_brac StatementList close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op dot equal }]
  [ForClause ::= (*) ForClause_Unneccesary Condition_unnecessary_1 semicolon NT$15 SimpleStmt , {open_curly_brac }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt ::= (*) Expression SimpleStmt_unnecessary_1 , {semicolon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ForClause_Unneccesary ::= (*) SimpleStmt semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac semicolon }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt ::= (*) , {semicolon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [ForStmt_unnecessary_1 ::= (*) Expression , {open_curly_brac }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [249]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on SimpleStmt to state [248]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on ForClause_Unneccesary to state [247]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on ForStmt_unnecessary_1 to state [246]
transition on ForClause to state [245]
transition on UnaryExpr to state [82]

-------------------
lalr_state [245]: {
  [ForStmt_unnecessary_1 ::= ForClause (*) , {open_curly_brac }]
}

-------------------
lalr_state [246]: {
  [ForStmt ::= ford NT$13 ForStmt_unnecessary_1 (*) NT$14 open_curly_brac StatementList close_curly_brac , {semicolon }]
  [NT$14 ::= (*) , {open_curly_brac }]
}
transition on NT$14 to state [256]

-------------------
lalr_state [247]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [Condition_unnecessary_1 ::= (*) , {semicolon }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ForClause ::= ForClause_Unneccesary (*) Condition_unnecessary_1 semicolon NT$15 SimpleStmt , {open_curly_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac semicolon }]
  [Condition_unnecessary_1 ::= (*) Expression , {semicolon }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [252]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on Condition_unnecessary_1 to state [251]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [248]: {
  [ForClause_Unneccesary ::= SimpleStmt (*) semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac semicolon }]
}
transition on semicolon to state [250]

-------------------
lalr_state [249]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 assign_op Func_call , {semicolon }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 assign_op ExpressionList , {semicolon }]
  [IncDecStmt_unnecessary_1 ::= (*) dec_op , {semicolon }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ForStmt_unnecessary_1 ::= Expression (*) , {open_curly_brac }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExpressionList_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 comma Expression , {plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op comma equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt ::= Expression (*) SimpleStmt_unnecessary_1 , {semicolon }]
  [SimpleStmt_unnecessary_1 ::= (*) , {semicolon }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) IncDecStmt_unnecessary_1 , {semicolon }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExpressionList_unnecessary_1 ::= (*) , {plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op comma equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [IncDecStmt_unnecessary_1 ::= (*) inc_op , {semicolon }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
}
transition on right_shift_op to state [122]
transition on pow_op to state [121]
transition on minus_op to state [120]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on IncDecStmt_unnecessary_1 to state [224]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on SimpleStmt_unnecessary_1 to state [223]
transition on div_op to state [110]
transition on or_op to state [109]
transition on inc_op to state [222]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on dec_op to state [221]
transition on ExpressionList_unnecessary_1 to state [220]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [250]: {
  [ForClause_Unneccesary ::= SimpleStmt semicolon (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac semicolon }]
}

-------------------
lalr_state [251]: {
  [ForClause ::= ForClause_Unneccesary Condition_unnecessary_1 (*) semicolon NT$15 SimpleStmt , {open_curly_brac }]
}
transition on semicolon to state [253]

-------------------
lalr_state [252]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Condition_unnecessary_1 ::= Expression (*) , {semicolon }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op semicolon }]
}
transition on right_shift_op to state [122]
transition on minus_op to state [120]
transition on pow_op to state [121]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on greater_equal_op to state [104]

-------------------
lalr_state [253]: {
  [ForClause ::= ForClause_Unneccesary Condition_unnecessary_1 semicolon (*) NT$15 SimpleStmt , {open_curly_brac }]
  [NT$15 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac }]
}
transition on NT$15 to state [254]

-------------------
lalr_state [254]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ForClause ::= ForClause_Unneccesary Condition_unnecessary_1 semicolon NT$15 (*) SimpleStmt , {open_curly_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op dot equal }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [SimpleStmt ::= (*) Expression SimpleStmt_unnecessary_1 , {open_curly_brac }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [SimpleStmt ::= (*) , {open_curly_brac }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_square_brac open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma dec_op equal }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [211]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on SimpleStmt to state [255]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [255]: {
  [ForClause ::= ForClause_Unneccesary Condition_unnecessary_1 semicolon NT$15 SimpleStmt (*) , {open_curly_brac }]
}

-------------------
lalr_state [256]: {
  [ForStmt ::= ford NT$13 ForStmt_unnecessary_1 NT$14 (*) open_curly_brac StatementList close_curly_brac , {semicolon }]
}
transition on open_curly_brac to state [257]

-------------------
lalr_state [257]: {
  [StatementList_unnecessary_1 ::= (*) StatementList_unnecessary_1 Statement semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [ForStmt ::= ford NT$13 ForStmt_unnecessary_1 NT$14 open_curly_brac (*) StatementList close_curly_brac , {semicolon }]
  [StatementList ::= (*) StatementList_unnecessary_1 , {close_curly_brac }]
  [StatementList_unnecessary_1 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
}
transition on StatementList to state [258]
transition on StatementList_unnecessary_1 to state [186]

-------------------
lalr_state [258]: {
  [ForStmt ::= ford NT$13 ForStmt_unnecessary_1 NT$14 open_curly_brac StatementList (*) close_curly_brac , {semicolon }]
}
transition on close_curly_brac to state [259]

-------------------
lalr_state [259]: {
  [ForStmt ::= ford NT$13 ForStmt_unnecessary_1 NT$14 open_curly_brac StatementList close_curly_brac (*) , {semicolon }]
}

-------------------
lalr_state [260]: {
  [GotoStmt ::= gotod identifier (*) , {semicolon }]
}

-------------------
lalr_state [261]: {
  [BreakStmt ::= breakd identifier (*) , {semicolon }]
}

-------------------
lalr_state [262]: {
  [LabeledStmt ::= Label ReturnStmt (*) , {semicolon }]
}

-------------------
lalr_state [263]: {
  [LabeledStmt ::= Label GotoStmt (*) , {semicolon }]
}

-------------------
lalr_state [264]: {
  [LabeledStmt ::= Label Func_call (*) , {semicolon }]
}

-------------------
lalr_state [265]: {
  [LabeledStmt ::= Label IfStmt (*) , {semicolon }]
}

-------------------
lalr_state [266]: {
  [LabeledStmt ::= Label LabeledForStmt (*) , {semicolon }]
}

-------------------
lalr_state [267]: {
  [LabeledStmt ::= Label SimpleStmt (*) , {semicolon }]
}

-------------------
lalr_state [268]: {
  [LabeledStmt ::= Label LabeledStmt (*) , {semicolon }]
}

-------------------
lalr_state [269]: {
  [LabeledStmt ::= Label Declaration (*) , {semicolon }]
}

-------------------
lalr_state [270]: {
  [LabeledStmt ::= Label SwitchStmt (*) , {semicolon }]
}

-------------------
lalr_state [271]: {
  [LabeledStmt ::= Label ContinueStmt (*) , {semicolon }]
}

-------------------
lalr_state [272]: {
  [LabeledStmt ::= Label BreakStmt (*) , {semicolon }]
}

-------------------
lalr_state [273]: {
  [LabeledStmt ::= Label Block (*) , {semicolon }]
}

-------------------
lalr_state [274]: {
  [ReturnStmt ::= returnd ExpressionList (*) , {semicolon }]
}

-------------------
lalr_state [275]: {
  [NT$8 ::= (*) , {open_curly_brac }]
  [IfStmt ::= Cheez2 elsed (*) NT$8 open_curly_brac NT$9 StatementList close_curly_brac , {semicolon }]
  [IfStmt ::= Cheez2 elsed (*) NT$7 IfStmt , {semicolon }]
  [NT$7 ::= (*) , {ifd }]
}
transition on NT$7 to state [277]
transition on NT$8 to state [276]

-------------------
lalr_state [276]: {
  [IfStmt ::= Cheez2 elsed NT$8 (*) open_curly_brac NT$9 StatementList close_curly_brac , {semicolon }]
}
transition on open_curly_brac to state [279]

-------------------
lalr_state [277]: {
  [IfStmt ::= Cheez2 elsed NT$7 (*) IfStmt , {semicolon }]
  [IfStmt ::= (*) Cheez elsed NT$11 open_curly_brac NT$12 StatementList close_curly_brac , {semicolon }]
  [IfStmt ::= (*) Cheez elsed NT$10 IfStmt , {semicolon }]
  [IfStmt ::= (*) Cheez2 elsed NT$8 open_curly_brac NT$9 StatementList close_curly_brac , {semicolon }]
  [IfStmt ::= (*) Cheez2 elsed NT$7 IfStmt , {semicolon }]
  [Cheez ::= (*) ifd Expression NT$5 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [IfStmt ::= (*) Cheez , {semicolon }]
  [IfStmt ::= (*) Cheez2 , {semicolon }]
  [Cheez2 ::= (*) ifd SimpleStmt semicolon Expression NT$6 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
}
transition on Cheez2 to state [201]
transition on Cheez to state [196]
transition on IfStmt to state [278]
transition on ifd to state [199]

-------------------
lalr_state [278]: {
  [IfStmt ::= Cheez2 elsed NT$7 IfStmt (*) , {semicolon }]
}

-------------------
lalr_state [279]: {
  [IfStmt ::= Cheez2 elsed NT$8 open_curly_brac (*) NT$9 StatementList close_curly_brac , {semicolon }]
  [NT$9 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
}
transition on NT$9 to state [280]

-------------------
lalr_state [280]: {
  [StatementList_unnecessary_1 ::= (*) StatementList_unnecessary_1 Statement semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [StatementList ::= (*) StatementList_unnecessary_1 , {close_curly_brac }]
  [StatementList_unnecessary_1 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [IfStmt ::= Cheez2 elsed NT$8 open_curly_brac NT$9 (*) StatementList close_curly_brac , {semicolon }]
}
transition on StatementList to state [281]
transition on StatementList_unnecessary_1 to state [186]

-------------------
lalr_state [281]: {
  [IfStmt ::= Cheez2 elsed NT$8 open_curly_brac NT$9 StatementList (*) close_curly_brac , {semicolon }]
}
transition on close_curly_brac to state [282]

-------------------
lalr_state [282]: {
  [IfStmt ::= Cheez2 elsed NT$8 open_curly_brac NT$9 StatementList close_curly_brac (*) , {semicolon }]
}

-------------------
lalr_state [283]: {
  [StatementList_unnecessary_1 ::= (*) StatementList_unnecessary_1 Statement semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [StatementList ::= (*) StatementList_unnecessary_1 , {close_curly_brac }]
  [Block ::= open_curly_brac NT$0 (*) StatementList close_curly_brac , {semicolon }]
  [StatementList_unnecessary_1 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
}
transition on StatementList to state [284]
transition on StatementList_unnecessary_1 to state [186]

-------------------
lalr_state [284]: {
  [Block ::= open_curly_brac NT$0 StatementList (*) close_curly_brac , {semicolon }]
}
transition on close_curly_brac to state [285]

-------------------
lalr_state [285]: {
  [Block ::= open_curly_brac NT$0 StatementList close_curly_brac (*) , {semicolon }]
}

-------------------
lalr_state [286]: {
  [Cheez2 ::= ifd SimpleStmt (*) semicolon Expression NT$6 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
}
transition on semicolon to state [292]

-------------------
lalr_state [287]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 assign_op Func_call , {semicolon }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 assign_op ExpressionList , {semicolon }]
  [IncDecStmt_unnecessary_1 ::= (*) dec_op , {semicolon }]
  [NT$5 ::= (*) , {open_curly_brac }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExpressionList_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 comma Expression , {plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op comma equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt ::= Expression (*) SimpleStmt_unnecessary_1 , {semicolon }]
  [SimpleStmt_unnecessary_1 ::= (*) , {semicolon }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) IncDecStmt_unnecessary_1 , {semicolon }]
  [Cheez ::= ifd Expression (*) NT$5 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExpressionList_unnecessary_1 ::= (*) , {plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op comma equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [IncDecStmt_unnecessary_1 ::= (*) inc_op , {semicolon }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
}
transition on right_shift_op to state [122]
transition on pow_op to state [121]
transition on minus_op to state [120]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on IncDecStmt_unnecessary_1 to state [224]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on SimpleStmt_unnecessary_1 to state [223]
transition on div_op to state [110]
transition on or_op to state [109]
transition on inc_op to state [222]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on dec_op to state [221]
transition on ExpressionList_unnecessary_1 to state [220]
transition on less_equal_op to state [106]
transition on NT$5 to state [288]
transition on greater_equal_op to state [104]

-------------------
lalr_state [288]: {
  [Cheez ::= ifd Expression NT$5 (*) open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
}
transition on open_curly_brac to state [289]

-------------------
lalr_state [289]: {
  [StatementList_unnecessary_1 ::= (*) StatementList_unnecessary_1 Statement semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [StatementList ::= (*) StatementList_unnecessary_1 , {close_curly_brac }]
  [Cheez ::= ifd Expression NT$5 open_curly_brac (*) StatementList close_curly_brac , {elsed semicolon }]
  [StatementList_unnecessary_1 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
}
transition on StatementList to state [290]
transition on StatementList_unnecessary_1 to state [186]

-------------------
lalr_state [290]: {
  [Cheez ::= ifd Expression NT$5 open_curly_brac StatementList (*) close_curly_brac , {elsed semicolon }]
}
transition on close_curly_brac to state [291]

-------------------
lalr_state [291]: {
  [Cheez ::= ifd Expression NT$5 open_curly_brac StatementList close_curly_brac (*) , {elsed semicolon }]
}

-------------------
lalr_state [292]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [Cheez2 ::= ifd SimpleStmt semicolon (*) Expression NT$6 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [293]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [293]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [NT$6 ::= (*) , {open_curly_brac }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Cheez2 ::= ifd SimpleStmt semicolon Expression (*) NT$6 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
}
transition on right_shift_op to state [122]
transition on pow_op to state [121]
transition on minus_op to state [120]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on NT$6 to state [294]
transition on greater_equal_op to state [104]

-------------------
lalr_state [294]: {
  [Cheez2 ::= ifd SimpleStmt semicolon Expression NT$6 (*) open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
}
transition on open_curly_brac to state [295]

-------------------
lalr_state [295]: {
  [StatementList_unnecessary_1 ::= (*) StatementList_unnecessary_1 Statement semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [StatementList ::= (*) StatementList_unnecessary_1 , {close_curly_brac }]
  [StatementList_unnecessary_1 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [Cheez2 ::= ifd SimpleStmt semicolon Expression NT$6 open_curly_brac (*) StatementList close_curly_brac , {elsed semicolon }]
}
transition on StatementList to state [296]
transition on StatementList_unnecessary_1 to state [186]

-------------------
lalr_state [296]: {
  [Cheez2 ::= ifd SimpleStmt semicolon Expression NT$6 open_curly_brac StatementList (*) close_curly_brac , {elsed semicolon }]
}
transition on close_curly_brac to state [297]

-------------------
lalr_state [297]: {
  [Cheez2 ::= ifd SimpleStmt semicolon Expression NT$6 open_curly_brac StatementList close_curly_brac (*) , {elsed semicolon }]
}

-------------------
lalr_state [298]: {
  [StatementList_unnecessary_1 ::= (*) StatementList_unnecessary_1 Statement semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [StatementList ::= (*) StatementList_unnecessary_1 , {close_curly_brac }]
  [StatementList_unnecessary_1 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [ForStmt ::= ForStmt_unnecessary_2 open_curly_brac (*) StatementList close_curly_brac , {semicolon }]
}
transition on StatementList to state [299]
transition on StatementList_unnecessary_1 to state [186]

-------------------
lalr_state [299]: {
  [ForStmt ::= ForStmt_unnecessary_2 open_curly_brac StatementList (*) close_curly_brac , {semicolon }]
}
transition on close_curly_brac to state [300]

-------------------
lalr_state [300]: {
  [ForStmt ::= ForStmt_unnecessary_2 open_curly_brac StatementList close_curly_brac (*) , {semicolon }]
}

-------------------
lalr_state [301]: {
  [IfStmt ::= Cheez elsed (*) NT$11 open_curly_brac NT$12 StatementList close_curly_brac , {semicolon }]
  [IfStmt ::= Cheez elsed (*) NT$10 IfStmt , {semicolon }]
  [NT$10 ::= (*) , {ifd }]
  [NT$11 ::= (*) , {open_curly_brac }]
}
transition on NT$11 to state [303]
transition on NT$10 to state [302]

-------------------
lalr_state [302]: {
  [IfStmt ::= (*) Cheez elsed NT$11 open_curly_brac NT$12 StatementList close_curly_brac , {semicolon }]
  [IfStmt ::= (*) Cheez elsed NT$10 IfStmt , {semicolon }]
  [IfStmt ::= (*) Cheez2 elsed NT$8 open_curly_brac NT$9 StatementList close_curly_brac , {semicolon }]
  [IfStmt ::= (*) Cheez2 elsed NT$7 IfStmt , {semicolon }]
  [Cheez ::= (*) ifd Expression NT$5 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [IfStmt ::= (*) Cheez , {semicolon }]
  [IfStmt ::= (*) Cheez2 , {semicolon }]
  [Cheez2 ::= (*) ifd SimpleStmt semicolon Expression NT$6 open_curly_brac StatementList close_curly_brac , {elsed semicolon }]
  [IfStmt ::= Cheez elsed NT$10 (*) IfStmt , {semicolon }]
}
transition on Cheez2 to state [201]
transition on Cheez to state [196]
transition on IfStmt to state [308]
transition on ifd to state [199]

-------------------
lalr_state [303]: {
  [IfStmt ::= Cheez elsed NT$11 (*) open_curly_brac NT$12 StatementList close_curly_brac , {semicolon }]
}
transition on open_curly_brac to state [304]

-------------------
lalr_state [304]: {
  [NT$12 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [IfStmt ::= Cheez elsed NT$11 open_curly_brac (*) NT$12 StatementList close_curly_brac , {semicolon }]
}
transition on NT$12 to state [305]

-------------------
lalr_state [305]: {
  [StatementList_unnecessary_1 ::= (*) StatementList_unnecessary_1 Statement semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [StatementList ::= (*) StatementList_unnecessary_1 , {close_curly_brac }]
  [StatementList_unnecessary_1 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [IfStmt ::= Cheez elsed NT$11 open_curly_brac NT$12 (*) StatementList close_curly_brac , {semicolon }]
}
transition on StatementList to state [306]
transition on StatementList_unnecessary_1 to state [186]

-------------------
lalr_state [306]: {
  [IfStmt ::= Cheez elsed NT$11 open_curly_brac NT$12 StatementList (*) close_curly_brac , {semicolon }]
}
transition on close_curly_brac to state [307]

-------------------
lalr_state [307]: {
  [IfStmt ::= Cheez elsed NT$11 open_curly_brac NT$12 StatementList close_curly_brac (*) , {semicolon }]
}

-------------------
lalr_state [308]: {
  [IfStmt ::= Cheez elsed NT$10 IfStmt (*) , {semicolon }]
}

-------------------
lalr_state [309]: {
  [LabeledForStmt ::= identifier colon (*) NT$16 ForStmt , {semicolon }]
  [Label ::= identifier colon (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd gotod switchd constd ifd continued returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac semicolon }]
  [NT$16 ::= (*) , {ford }]
}
transition on NT$16 to state [310]

-------------------
lalr_state [310]: {
  [LabeledForStmt ::= identifier colon NT$16 (*) ForStmt , {semicolon }]
  [ForStmt ::= (*) ForStmt_unnecessary_2 open_curly_brac StatementList close_curly_brac , {semicolon }]
  [ForStmt ::= (*) ford NT$13 ForStmt_unnecessary_1 NT$14 open_curly_brac StatementList close_curly_brac , {semicolon }]
  [ForStmt_unnecessary_2 ::= (*) ford , {open_curly_brac }]
}
transition on ForStmt to state [311]
transition on ForStmt_unnecessary_2 to state [197]
transition on ford to state [209]

-------------------
lalr_state [311]: {
  [LabeledForStmt ::= identifier colon NT$16 ForStmt (*) , {semicolon }]
}

-------------------
lalr_state [312]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Func_call ::= TypeName open_brac (*) close_brac , {open_curly_brac semicolon }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Func_call ::= TypeName open_brac (*) ExpressionList close_brac , {open_curly_brac semicolon }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [ExpressionList ::= (*) Expression ExpressionList_unnecessary_1 , {close_brac }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac open_square_brac comma }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op close_brac comma }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [100]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on ExpressionList to state [314]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on close_brac to state [313]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [313]: {
  [Func_call ::= TypeName open_brac close_brac (*) , {open_curly_brac semicolon }]
}

-------------------
lalr_state [314]: {
  [Func_call ::= TypeName open_brac ExpressionList (*) close_brac , {open_curly_brac semicolon }]
}
transition on close_brac to state [315]

-------------------
lalr_state [315]: {
  [Func_call ::= TypeName open_brac ExpressionList close_brac (*) , {open_curly_brac semicolon }]
}

-------------------
lalr_state [316]: {
  [ExprSwitchStmt ::= switchd open_curly_brac (*) ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [ExprSwitchStmt_unnecessary_3 ::= (*) , {defaultd cased close_curly_brac }]
  [ExprSwitchStmt_unnecessary_3 ::= (*) ExprSwitchStmt_unnecessary_3 ExprCaseClause , {defaultd cased close_curly_brac }]
}
transition on ExprSwitchStmt_unnecessary_3 to state [338]

-------------------
lalr_state [317]: {
  [ExprSwitchStmt ::= switchd SimpleStmt (*) semicolon open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [ExprSwitchStmt ::= switchd SimpleStmt (*) semicolon Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
}
transition on semicolon to state [330]

-------------------
lalr_state [318]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 assign_op Func_call , {semicolon }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 assign_op ExpressionList , {semicolon }]
  [IncDecStmt_unnecessary_1 ::= (*) dec_op , {semicolon }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExpressionList_unnecessary_1 ::= (*) ExpressionList_unnecessary_1 comma Expression , {plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op comma equal }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt ::= Expression (*) SimpleStmt_unnecessary_1 , {semicolon }]
  [SimpleStmt_unnecessary_1 ::= (*) , {semicolon }]
  [ExprSwitchStmt ::= switchd Expression (*) open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [SimpleStmt_unnecessary_1 ::= (*) IncDecStmt_unnecessary_1 , {semicolon }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [ExpressionList_unnecessary_1 ::= (*) , {plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op comma equal }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [IncDecStmt_unnecessary_1 ::= (*) inc_op , {semicolon }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_op amp_pow_op open_curly_brac inc_op comma semicolon dec_op equal }]
}
transition on right_shift_op to state [122]
transition on pow_op to state [121]
transition on minus_op to state [120]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on IncDecStmt_unnecessary_1 to state [224]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on SimpleStmt_unnecessary_1 to state [223]
transition on div_op to state [110]
transition on or_op to state [109]
transition on inc_op to state [222]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on dec_op to state [221]
transition on ExpressionList_unnecessary_1 to state [220]
transition on less_equal_op to state [106]
transition on open_curly_brac to state [319]
transition on greater_equal_op to state [104]

-------------------
lalr_state [319]: {
  [ExprSwitchStmt_unnecessary_3 ::= (*) , {defaultd cased close_curly_brac }]
  [ExprSwitchStmt ::= switchd Expression open_curly_brac (*) ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [ExprSwitchStmt_unnecessary_3 ::= (*) ExprSwitchStmt_unnecessary_3 ExprCaseClause , {defaultd cased close_curly_brac }]
}
transition on ExprSwitchStmt_unnecessary_3 to state [320]

-------------------
lalr_state [320]: {
  [ExprSwitchStmt ::= switchd Expression open_curly_brac ExprSwitchStmt_unnecessary_3 (*) close_curly_brac , {semicolon }]
  [ExprCaseClause ::= (*) defaultd colon StatementList , {defaultd cased close_curly_brac }]
  [ExprSwitchStmt_unnecessary_3 ::= ExprSwitchStmt_unnecessary_3 (*) ExprCaseClause , {defaultd cased close_curly_brac }]
  [ExprCaseClause ::= (*) cased ExpressionList colon StatementList , {defaultd cased close_curly_brac }]
}
transition on close_curly_brac to state [324]
transition on cased to state [323]
transition on ExprCaseClause to state [322]
transition on defaultd to state [321]

-------------------
lalr_state [321]: {
  [ExprCaseClause ::= defaultd (*) colon StatementList , {defaultd cased close_curly_brac }]
}
transition on colon to state [328]

-------------------
lalr_state [322]: {
  [ExprSwitchStmt_unnecessary_3 ::= ExprSwitchStmt_unnecessary_3 ExprCaseClause (*) , {defaultd cased close_curly_brac }]
}

-------------------
lalr_state [323]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [ExprCaseClause ::= cased (*) ExpressionList colon StatementList , {defaultd cased close_curly_brac }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [ExpressionList ::= (*) Expression ExpressionList_unnecessary_1 , {colon }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma dot colon }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma colon }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma colon }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [100]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on ExpressionList to state [325]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [324]: {
  [ExprSwitchStmt ::= switchd Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac (*) , {semicolon }]
}

-------------------
lalr_state [325]: {
  [ExprCaseClause ::= cased ExpressionList (*) colon StatementList , {defaultd cased close_curly_brac }]
}
transition on colon to state [326]

-------------------
lalr_state [326]: {
  [StatementList_unnecessary_1 ::= (*) StatementList_unnecessary_1 Statement semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd defaultd cased gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [StatementList ::= (*) StatementList_unnecessary_1 , {defaultd cased close_curly_brac }]
  [StatementList_unnecessary_1 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd defaultd cased gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [ExprCaseClause ::= cased ExpressionList colon (*) StatementList , {defaultd cased close_curly_brac }]
}
transition on StatementList to state [327]
transition on StatementList_unnecessary_1 to state [186]

-------------------
lalr_state [327]: {
  [ExprCaseClause ::= cased ExpressionList colon StatementList (*) , {defaultd cased close_curly_brac }]
}

-------------------
lalr_state [328]: {
  [StatementList_unnecessary_1 ::= (*) StatementList_unnecessary_1 Statement semicolon , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd defaultd cased gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
  [StatementList ::= (*) StatementList_unnecessary_1 , {defaultd cased close_curly_brac }]
  [ExprCaseClause ::= defaultd colon (*) StatementList , {defaultd cased close_curly_brac }]
  [StatementList_unnecessary_1 ::= (*) , {identifier int_lit imaginary_lit float_lit rune_lit string_lit breakd defaultd cased gotod switchd constd ifd continued ford returnd var plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac open_curly_brac close_curly_brac semicolon }]
}
transition on StatementList to state [329]
transition on StatementList_unnecessary_1 to state [186]

-------------------
lalr_state [329]: {
  [ExprCaseClause ::= defaultd colon StatementList (*) , {defaultd cased close_curly_brac }]
}

-------------------
lalr_state [330]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ExprSwitchStmt ::= switchd SimpleStmt semicolon (*) open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac open_curly_brac }]
  [ExprSwitchStmt ::= switchd SimpleStmt semicolon (*) Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [332]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on open_curly_brac to state [331]
transition on UnaryExpr to state [82]

-------------------
lalr_state [331]: {
  [ExprSwitchStmt_unnecessary_3 ::= (*) , {defaultd cased close_curly_brac }]
  [ExprSwitchStmt_unnecessary_3 ::= (*) ExprSwitchStmt_unnecessary_3 ExprCaseClause , {defaultd cased close_curly_brac }]
  [ExprSwitchStmt ::= switchd SimpleStmt semicolon open_curly_brac (*) ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
}
transition on ExprSwitchStmt_unnecessary_3 to state [336]

-------------------
lalr_state [332]: {
  [Expression ::= Expression (*) div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [ExprSwitchStmt ::= switchd SimpleStmt semicolon Expression (*) open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
  [Expression ::= Expression (*) and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
  [Expression ::= Expression (*) greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_curly_brac }]
}
transition on right_shift_op to state [122]
transition on pow_op to state [121]
transition on minus_op to state [120]
transition on less_op to state [119]
transition on equal_equal_op to state [118]
transition on pipe_op to state [117]
transition on not_equal_op to state [116]
transition on mod_op to state [115]
transition on greater_op to state [114]
transition on star_op to state [113]
transition on and_op to state [112]
transition on left_shift_op to state [111]
transition on div_op to state [110]
transition on or_op to state [109]
transition on amp_pow_op to state [108]
transition on plus_op to state [107]
transition on less_equal_op to state [106]
transition on open_curly_brac to state [333]
transition on greater_equal_op to state [104]

-------------------
lalr_state [333]: {
  [ExprSwitchStmt_unnecessary_3 ::= (*) , {defaultd cased close_curly_brac }]
  [ExprSwitchStmt_unnecessary_3 ::= (*) ExprSwitchStmt_unnecessary_3 ExprCaseClause , {defaultd cased close_curly_brac }]
  [ExprSwitchStmt ::= switchd SimpleStmt semicolon Expression open_curly_brac (*) ExprSwitchStmt_unnecessary_3 close_curly_brac , {semicolon }]
}
transition on ExprSwitchStmt_unnecessary_3 to state [334]

-------------------
lalr_state [334]: {
  [ExprCaseClause ::= (*) defaultd colon StatementList , {defaultd cased close_curly_brac }]
  [ExprSwitchStmt ::= switchd SimpleStmt semicolon Expression open_curly_brac ExprSwitchStmt_unnecessary_3 (*) close_curly_brac , {semicolon }]
  [ExprSwitchStmt_unnecessary_3 ::= ExprSwitchStmt_unnecessary_3 (*) ExprCaseClause , {defaultd cased close_curly_brac }]
  [ExprCaseClause ::= (*) cased ExpressionList colon StatementList , {defaultd cased close_curly_brac }]
}
transition on close_curly_brac to state [335]
transition on cased to state [323]
transition on ExprCaseClause to state [322]
transition on defaultd to state [321]

-------------------
lalr_state [335]: {
  [ExprSwitchStmt ::= switchd SimpleStmt semicolon Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac (*) , {semicolon }]
}

-------------------
lalr_state [336]: {
  [ExprCaseClause ::= (*) defaultd colon StatementList , {defaultd cased close_curly_brac }]
  [ExprSwitchStmt ::= switchd SimpleStmt semicolon open_curly_brac ExprSwitchStmt_unnecessary_3 (*) close_curly_brac , {semicolon }]
  [ExprSwitchStmt_unnecessary_3 ::= ExprSwitchStmt_unnecessary_3 (*) ExprCaseClause , {defaultd cased close_curly_brac }]
  [ExprCaseClause ::= (*) cased ExpressionList colon StatementList , {defaultd cased close_curly_brac }]
}
transition on close_curly_brac to state [337]
transition on cased to state [323]
transition on ExprCaseClause to state [322]
transition on defaultd to state [321]

-------------------
lalr_state [337]: {
  [ExprSwitchStmt ::= switchd SimpleStmt semicolon open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac (*) , {semicolon }]
}

-------------------
lalr_state [338]: {
  [ExprSwitchStmt ::= switchd open_curly_brac ExprSwitchStmt_unnecessary_3 (*) close_curly_brac , {semicolon }]
  [ExprCaseClause ::= (*) defaultd colon StatementList , {defaultd cased close_curly_brac }]
  [ExprSwitchStmt_unnecessary_3 ::= ExprSwitchStmt_unnecessary_3 (*) ExprCaseClause , {defaultd cased close_curly_brac }]
  [ExprCaseClause ::= (*) cased ExpressionList colon StatementList , {defaultd cased close_curly_brac }]
}
transition on close_curly_brac to state [339]
transition on cased to state [323]
transition on ExprCaseClause to state [322]
transition on defaultd to state [321]

-------------------
lalr_state [339]: {
  [ExprSwitchStmt ::= switchd open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac (*) , {semicolon }]
}

-------------------
lalr_state [340]: {
  [ConstDecl ::= constd ConstDecl_unnecessary_2 (*) , {semicolon }]
}

-------------------
lalr_state [341]: {
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {equal }]
  [TypeLit ::= (*) ArrayType , {equal }]
  [TypeName ::= (*) C , {equal }]
  [ConstSpec ::= IdentifierList (*) Type equal ExpressionList , {semicolon }]
  [Type ::= (*) TypeLit , {equal }]
  [FunctionType ::= (*) funcd Signature , {equal }]
  [PointerType ::= (*) star_op Type , {equal }]
  [TypeLit ::= (*) FunctionType , {equal }]
  [C ::= (*) identifier , {dot equal }]
  [TypeName ::= (*) B , {equal }]
  [Type ::= (*) TypeName , {equal }]
  [TypeLit ::= (*) PointerType , {equal }]
  [B ::= (*) C dot identifier , {equal }]
  [Type ::= (*) open_brac Type close_brac , {equal }]
}
transition on FunctionType to state [62]
transition on ArrayType to state [61]
transition on funcd to state [60]
transition on TypeLit to state [58]
transition on identifier to state [57]
transition on open_square_brac to state [56]
transition on TypeName to state [55]
transition on PointerType to state [54]
transition on open_brac to state [52]
transition on B to state [51]
transition on star_op to state [50]
transition on C to state [49]
transition on Type to state [348]

-------------------
lalr_state [342]: {
  [ConstDecl_unnecessary_2 ::= ConstSpec (*) , {semicolon }]
}

-------------------
lalr_state [343]: {
  [ConstDecl_unnecessary_1 ::= (*) , {identifier close_brac }]
  [ConstDecl_unnecessary_2 ::= open_brac (*) ConstDecl_unnecessary_1 close_brac , {semicolon }]
  [ConstDecl_unnecessary_1 ::= (*) ConstDecl_unnecessary_1 ConstSpec semicolon , {identifier close_brac }]
}
transition on ConstDecl_unnecessary_1 to state [344]

-------------------
lalr_state [344]: {
  [IdentifierList ::= (*) identifier IdentifierList_unnecessary_1 , {identifier funcd star_op open_brac open_square_brac }]
  [ConstSpec ::= (*) IdentifierList Type equal ExpressionList , {semicolon }]
  [ConstDecl_unnecessary_2 ::= open_brac ConstDecl_unnecessary_1 (*) close_brac , {semicolon }]
  [ConstDecl_unnecessary_1 ::= ConstDecl_unnecessary_1 (*) ConstSpec semicolon , {identifier close_brac }]
}
transition on close_brac to state [346]
transition on identifier to state [36]
transition on IdentifierList to state [341]
transition on ConstSpec to state [345]

-------------------
lalr_state [345]: {
  [ConstDecl_unnecessary_1 ::= ConstDecl_unnecessary_1 ConstSpec (*) semicolon , {identifier close_brac }]
}
transition on semicolon to state [347]

-------------------
lalr_state [346]: {
  [ConstDecl_unnecessary_2 ::= open_brac ConstDecl_unnecessary_1 close_brac (*) , {semicolon }]
}

-------------------
lalr_state [347]: {
  [ConstDecl_unnecessary_1 ::= ConstDecl_unnecessary_1 ConstSpec semicolon (*) , {identifier close_brac }]
}

-------------------
lalr_state [348]: {
  [ConstSpec ::= IdentifierList Type (*) equal ExpressionList , {semicolon }]
}
transition on equal to state [349]

-------------------
lalr_state [349]: {
  [Operand ::= (*) open_brac Expression close_brac , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) pow_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) PrimaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression greater_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [TypeName ::= (*) C , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression or_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) string_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression mod_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [PrimaryExpr ::= (*) Operand , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [BasicLit ::= (*) int_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) star_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [UnaryExpr ::= (*) unary_op UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [B ::= (*) C dot identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression less_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression and_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Operand ::= (*) BasicLit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) plus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [ArrayType ::= (*) open_square_brac ArrayLength close_square_brac Type , {open_curly_brac }]
  [Expression ::= (*) Expression left_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression equal_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [PrimaryExpr ::= (*) PrimaryExpr Index , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [BasicLit ::= (*) float_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [ExpressionList ::= (*) Expression ExpressionList_unnecessary_1 , {semicolon }]
  [unary_op ::= (*) amp_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [C ::= (*) identifier , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon dot }]
  [Expression ::= (*) Expression less_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression plus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [ConstSpec ::= IdentifierList Type equal (*) ExpressionList , {semicolon }]
  [Operand ::= (*) ArrayType LiteralValue , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) minus_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression right_shift_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression not_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) imaginary_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression star_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression minus_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Operand ::= (*) TypeName , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [unary_op ::= (*) not_op , {identifier int_lit imaginary_lit float_lit rune_lit string_lit plus_op minus_op pow_op star_op amp_op not_op open_brac open_square_brac }]
  [Expression ::= (*) Expression amp_pow_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [TypeName ::= (*) B , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression greater_equal_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) UnaryExpr , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [BasicLit ::= (*) rune_lit , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op open_square_brac comma semicolon }]
  [Expression ::= (*) Expression div_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
  [Expression ::= (*) Expression pipe_op Expression , {or_op and_op equal_equal_op not_equal_op less_op less_equal_op greater_op greater_equal_op plus_op minus_op pipe_op pow_op star_op div_op mod_op left_shift_op right_shift_op amp_pow_op comma semicolon }]
}
transition on unary_op to state [102]
transition on int_lit to state [101]
transition on Expression to state [100]
transition on pow_op to state [99]
transition on minus_op to state [98]
transition on ExpressionList to state [350]
transition on rune_lit to state [96]
transition on ArrayType to state [95]
transition on amp_op to state [94]
transition on open_square_brac to state [56]
transition on BasicLit to state [93]
transition on star_op to state [92]
transition on B to state [51]
transition on C to state [49]
transition on open_brac to state [91]
transition on PrimaryExpr to state [90]
transition on TypeName to state [89]
transition on Operand to state [88]
transition on float_lit to state [87]
transition on plus_op to state [86]
transition on not_op to state [85]
transition on string_lit to state [84]
transition on imaginary_lit to state [83]
transition on identifier to state [57]
transition on UnaryExpr to state [82]

-------------------
lalr_state [350]: {
  [ConstSpec ::= IdentifierList Type equal ExpressionList (*) , {semicolon }]
}

-------------------
lalr_state [351]: {
  [SourceFile_unnecessary_1_dash ::= (*) , {EOF funcd constd var }]
  [ImportDecl ::= (*) importd ImportDecl_unnecessary_2 , {semicolon }]
  [SourceFile_unnecessary_1_dash ::= ImportDecl semicolon (*) SourceFile_unnecessary_1_dash , {EOF funcd constd var }]
  [SourceFile_unnecessary_1_dash ::= (*) ImportDecl semicolon SourceFile_unnecessary_1_dash , {EOF funcd constd var }]
}
transition on SourceFile_unnecessary_1_dash to state [352]
transition on importd to state [10]
transition on ImportDecl to state [8]

-------------------
lalr_state [352]: {
  [SourceFile_unnecessary_1_dash ::= ImportDecl semicolon SourceFile_unnecessary_1_dash (*) , {EOF funcd constd var }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 21:REDUCE(with prod 223)]
From state #1
 [term 21:SHIFT(to state 5)]
From state #2
 [term 0:SHIFT(to state 3)]
From state #3
 [term 0:REDUCE(with prod 0)]
From state #4
 [term 63:SHIFT(to state 7)]
From state #5
 [term 2:SHIFT(to state 6)]
From state #6
 [term 63:REDUCE(with prod 232)]
From state #7
 [term 0:REDUCE(with prod 228)] [term 10:REDUCE(with prod 228)]
 [term 23:REDUCE(with prod 228)] [term 30:SHIFT(to state 10)]
 [term 32:REDUCE(with prod 228)]
From state #8
 [term 63:SHIFT(to state 351)]
From state #9
 [term 0:REDUCE(with prod 224)] [term 10:REDUCE(with prod 224)]
 [term 23:REDUCE(with prod 224)] [term 32:REDUCE(with prod 224)]
From state #10
 [term 2:SHIFT(to state 16)] [term 7:SHIFT(to state 12)]
 [term 54:SHIFT(to state 17)] [term 66:SHIFT(to state 13)]
From state #11
 [term 0:REDUCE(with prod 226)] [term 10:REDUCE(with prod 226)]
 [term 23:REDUCE(with prod 226)] [term 32:REDUCE(with prod 226)]
From state #12
 [term 63:REDUCE(with prod 240)]
From state #13
 [term 7:SHIFT(to state 23)]
From state #14
 [term 63:REDUCE(with prod 233)]
From state #15
 [term 63:REDUCE(with prod 236)]
From state #16
 [term 7:SHIFT(to state 22)]
From state #17
 [term 2:REDUCE(with prod 235)] [term 7:REDUCE(with prod 235)]
 [term 55:REDUCE(with prod 235)] [term 66:REDUCE(with prod 235)]
From state #18
 [term 2:SHIFT(to state 16)] [term 7:SHIFT(to state 12)]
 [term 55:SHIFT(to state 20)] [term 66:SHIFT(to state 13)]
From state #19
 [term 63:SHIFT(to state 21)]
From state #20
 [term 63:REDUCE(with prod 237)]
From state #21
 [term 2:REDUCE(with prod 234)] [term 7:REDUCE(with prod 234)]
 [term 55:REDUCE(with prod 234)] [term 66:REDUCE(with prod 234)]
From state #22
 [term 63:REDUCE(with prod 239)]
From state #23
 [term 63:REDUCE(with prod 238)]
From state #24
 [term 0:REDUCE(with prod 231)] [term 10:SHIFT(to state 30)]
 [term 23:SHIFT(to state 25)] [term 32:SHIFT(to state 33)]
From state #25
 [term 2:SHIFT(to state 36)] [term 54:SHIFT(to state 343)]
From state #26
 [term 0:REDUCE(with prod 229)]
From state #27
 [term 0:REDUCE(with prod 225)]
From state #28
 [term 63:REDUCE(with prod 33)]
From state #29
 [term 63:REDUCE(with prod 42)]
From state #30
 [term 2:SHIFT(to state 178)]
From state #31
 [term 63:SHIFT(to state 176)]
From state #32
 [term 63:REDUCE(with prod 32)]
From state #33
 [term 2:SHIFT(to state 36)] [term 54:SHIFT(to state 39)]
From state #34
 [term 63:REDUCE(with prod 41)]
From state #35
 [term 2:SHIFT(to state 57)] [term 10:SHIFT(to state 60)]
 [term 45:SHIFT(to state 50)] [term 54:SHIFT(to state 52)]
 [term 56:SHIFT(to state 56)] [term 68:SHIFT(to state 59)]
From state #36
 [term 2:REDUCE(with prod 51)] [term 10:REDUCE(with prod 51)]
 [term 45:REDUCE(with prod 51)] [term 54:REDUCE(with prod 51)]
 [term 56:REDUCE(with prod 51)] [term 62:SHIFT(to state 44)]
 [term 68:REDUCE(with prod 51)]
From state #37
 [term 63:REDUCE(with prod 58)]
From state #38
 [term 63:REDUCE(with prod 55)]
From state #39
 [term 2:REDUCE(with prod 57)] [term 55:REDUCE(with prod 57)]
From state #40
 [term 2:SHIFT(to state 36)] [term 55:SHIFT(to state 42)]
From state #41
 [term 63:SHIFT(to state 43)]
From state #42
 [term 63:REDUCE(with prod 59)]
From state #43
 [term 2:REDUCE(with prod 56)] [term 55:REDUCE(with prod 56)]
From state #44
 [term 2:SHIFT(to state 46)]
From state #45
 [term 2:REDUCE(with prod 49)] [term 10:REDUCE(with prod 49)]
 [term 45:REDUCE(with prod 49)] [term 54:REDUCE(with prod 49)]
 [term 56:REDUCE(with prod 49)] [term 68:REDUCE(with prod 49)]
From state #46
 [term 2:REDUCE(with prod 51)] [term 10:REDUCE(with prod 51)]
 [term 45:REDUCE(with prod 51)] [term 54:REDUCE(with prod 51)]
 [term 56:REDUCE(with prod 51)] [term 62:SHIFT(to state 44)]
 [term 68:REDUCE(with prod 51)]
From state #47
 [term 2:REDUCE(with prod 50)] [term 10:REDUCE(with prod 50)]
 [term 45:REDUCE(with prod 50)] [term 54:REDUCE(with prod 50)]
 [term 56:REDUCE(with prod 50)] [term 68:REDUCE(with prod 50)]
From state #48
 [term 63:REDUCE(with prod 62)] [term 68:SHIFT(to state 174)]
From state #49
 [term 33:REDUCE(with prod 5)] [term 34:REDUCE(with prod 5)]
 [term 35:REDUCE(with prod 5)] [term 36:REDUCE(with prod 5)]
 [term 37:REDUCE(with prod 5)] [term 38:REDUCE(with prod 5)]
 [term 39:REDUCE(with prod 5)] [term 40:REDUCE(with prod 5)]
 [term 41:REDUCE(with prod 5)] [term 42:REDUCE(with prod 5)]
 [term 43:REDUCE(with prod 5)] [term 44:REDUCE(with prod 5)]
 [term 45:REDUCE(with prod 5)] [term 46:REDUCE(with prod 5)]
 [term 47:REDUCE(with prod 5)] [term 48:REDUCE(with prod 5)]
 [term 49:REDUCE(with prod 5)] [term 50:REDUCE(with prod 5)]
 [term 51:REDUCE(with prod 5)] [term 54:REDUCE(with prod 5)]
 [term 55:REDUCE(with prod 5)] [term 56:REDUCE(with prod 5)]
 [term 57:REDUCE(with prod 5)] [term 58:REDUCE(with prod 5)]
 [term 59:REDUCE(with prod 5)] [term 60:REDUCE(with prod 5)]
 [term 62:REDUCE(with prod 5)] [term 63:REDUCE(with prod 5)]
 [term 64:REDUCE(with prod 5)] [term 66:SHIFT(to state 171)]
 [term 67:REDUCE(with prod 5)] [term 68:REDUCE(with prod 5)]
From state #50
 [term 2:SHIFT(to state 57)] [term 10:SHIFT(to state 60)]
 [term 45:SHIFT(to state 50)] [term 54:SHIFT(to state 52)]
 [term 56:SHIFT(to state 56)]
From state #51
 [term 33:REDUCE(with prod 4)] [term 34:REDUCE(with prod 4)]
 [term 35:REDUCE(with prod 4)] [term 36:REDUCE(with prod 4)]
 [term 37:REDUCE(with prod 4)] [term 38:REDUCE(with prod 4)]
 [term 39:REDUCE(with prod 4)] [term 40:REDUCE(with prod 4)]
 [term 41:REDUCE(with prod 4)] [term 42:REDUCE(with prod 4)]
 [term 43:REDUCE(with prod 4)] [term 44:REDUCE(with prod 4)]
 [term 45:REDUCE(with prod 4)] [term 46:REDUCE(with prod 4)]
 [term 47:REDUCE(with prod 4)] [term 48:REDUCE(with prod 4)]
 [term 49:REDUCE(with prod 4)] [term 50:REDUCE(with prod 4)]
 [term 51:REDUCE(with prod 4)] [term 54:REDUCE(with prod 4)]
 [term 55:REDUCE(with prod 4)] [term 56:REDUCE(with prod 4)]
 [term 57:REDUCE(with prod 4)] [term 58:REDUCE(with prod 4)]
 [term 59:REDUCE(with prod 4)] [term 60:REDUCE(with prod 4)]
 [term 62:REDUCE(with prod 4)] [term 63:REDUCE(with prod 4)]
 [term 64:REDUCE(with prod 4)] [term 67:REDUCE(with prod 4)]
 [term 68:REDUCE(with prod 4)]
From state #52
 [term 2:SHIFT(to state 57)] [term 10:SHIFT(to state 60)]
 [term 45:SHIFT(to state 50)] [term 54:SHIFT(to state 52)]
 [term 56:SHIFT(to state 56)]
From state #53
 [term 63:REDUCE(with prod 60)]
From state #54
 [term 55:REDUCE(with prod 9)] [term 58:REDUCE(with prod 9)]
 [term 62:REDUCE(with prod 9)] [term 63:REDUCE(with prod 9)]
 [term 68:REDUCE(with prod 9)]
From state #55
 [term 55:REDUCE(with prod 1)] [term 58:REDUCE(with prod 1)]
 [term 62:REDUCE(with prod 1)] [term 63:REDUCE(with prod 1)]
 [term 68:REDUCE(with prod 1)]
From state #56
 [term 3:SHIFT(to state 166)]
From state #57
 [term 33:REDUCE(with prod 7)] [term 34:REDUCE(with prod 7)]
 [term 35:REDUCE(with prod 7)] [term 36:REDUCE(with prod 7)]
 [term 37:REDUCE(with prod 7)] [term 38:REDUCE(with prod 7)]
 [term 39:REDUCE(with prod 7)] [term 40:REDUCE(with prod 7)]
 [term 41:REDUCE(with prod 7)] [term 42:REDUCE(with prod 7)]
 [term 43:REDUCE(with prod 7)] [term 44:REDUCE(with prod 7)]
 [term 45:REDUCE(with prod 7)] [term 46:REDUCE(with prod 7)]
 [term 47:REDUCE(with prod 7)] [term 48:REDUCE(with prod 7)]
 [term 49:REDUCE(with prod 7)] [term 50:REDUCE(with prod 7)]
 [term 51:REDUCE(with prod 7)] [term 54:REDUCE(with prod 7)]
 [term 55:REDUCE(with prod 7)] [term 56:REDUCE(with prod 7)]
 [term 57:REDUCE(with prod 7)] [term 58:REDUCE(with prod 7)]
 [term 59:REDUCE(with prod 7)] [term 60:REDUCE(with prod 7)]
 [term 62:REDUCE(with prod 7)] [term 63:REDUCE(with prod 7)]
 [term 64:REDUCE(with prod 7)] [term 66:REDUCE(with prod 7)]
 [term 67:REDUCE(with prod 7)] [term 68:REDUCE(with prod 7)]
From state #58
 [term 55:REDUCE(with prod 2)] [term 58:REDUCE(with prod 2)]
 [term 62:REDUCE(with prod 2)] [term 63:REDUCE(with prod 2)]
 [term 68:REDUCE(with prod 2)]
From state #59
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #60
 [term 54:SHIFT(to state 65)]
From state #61
 [term 55:REDUCE(with prod 8)] [term 58:REDUCE(with prod 8)]
 [term 62:REDUCE(with prod 8)] [term 63:REDUCE(with prod 8)]
 [term 68:REDUCE(with prod 8)]
From state #62
 [term 55:REDUCE(with prod 10)] [term 58:REDUCE(with prod 10)]
 [term 62:REDUCE(with prod 10)] [term 63:REDUCE(with prod 10)]
 [term 68:REDUCE(with prod 10)]
From state #63
 [term 55:REDUCE(with prod 16)] [term 58:REDUCE(with prod 16)]
 [term 62:REDUCE(with prod 16)] [term 63:REDUCE(with prod 16)]
 [term 68:REDUCE(with prod 16)]
From state #64
 [term 2:SHIFT(to state 57)] [term 10:SHIFT(to state 60)]
 [term 45:SHIFT(to state 50)] [term 54:SHIFT(to state 78)]
 [term 55:REDUCE(with prod 19)] [term 56:SHIFT(to state 56)]
 [term 58:REDUCE(with prod 19)] [term 62:REDUCE(with prod 19)]
 [term 63:REDUCE(with prod 19)] [term 68:REDUCE(with prod 19)]
From state #65
 [term 2:SHIFT(to state 70)] [term 10:SHIFT(to state 60)]
 [term 45:SHIFT(to state 50)] [term 54:SHIFT(to state 52)]
 [term 55:SHIFT(to state 71)] [term 56:SHIFT(to state 56)]
From state #66
 [term 55:REDUCE(with prod 26)] [term 62:REDUCE(with prod 26)]
From state #67
 [term 2:SHIFT(to state 57)] [term 10:SHIFT(to state 60)]
 [term 45:SHIFT(to state 50)] [term 54:SHIFT(to state 52)]
 [term 56:SHIFT(to state 56)]
From state #68
 [term 55:SHIFT(to state 75)]
From state #69
 [term 55:REDUCE(with prod 24)] [term 62:REDUCE(with prod 24)]
From state #70
 [term 2:REDUCE(with prod 51)] [term 10:REDUCE(with prod 51)]
 [term 45:REDUCE(with prod 51)] [term 54:REDUCE(with prod 51)]
 [term 55:REDUCE(with prod 7)] [term 56:REDUCE(with prod 51)]
 [term 62:SHIFT(to state 44)] [term 66:REDUCE(with prod 7)]
From state #71
 [term 2:REDUCE(with prod 21)] [term 10:REDUCE(with prod 21)]
 [term 45:REDUCE(with prod 21)] [term 54:REDUCE(with prod 21)]
 [term 55:REDUCE(with prod 21)] [term 56:REDUCE(with prod 21)]
 [term 58:REDUCE(with prod 21)] [term 62:REDUCE(with prod 21)]
 [term 63:REDUCE(with prod 21)] [term 68:REDUCE(with prod 21)]
From state #72
 [term 55:REDUCE(with prod 22)] [term 62:SHIFT(to state 73)]
From state #73
 [term 2:SHIFT(to state 70)] [term 10:SHIFT(to state 60)]
 [term 45:SHIFT(to state 50)] [term 54:SHIFT(to state 52)]
 [term 56:SHIFT(to state 56)]
From state #74
 [term 55:REDUCE(with prod 23)] [term 62:REDUCE(with prod 23)]
From state #75
 [term 2:REDUCE(with prod 20)] [term 10:REDUCE(with prod 20)]
 [term 45:REDUCE(with prod 20)] [term 54:REDUCE(with prod 20)]
 [term 55:REDUCE(with prod 20)] [term 56:REDUCE(with prod 20)]
 [term 58:REDUCE(with prod 20)] [term 62:REDUCE(with prod 20)]
 [term 63:REDUCE(with prod 20)] [term 68:REDUCE(with prod 20)]
From state #76
 [term 55:REDUCE(with prod 25)] [term 62:REDUCE(with prod 25)]
From state #77
 [term 55:REDUCE(with prod 18)] [term 58:REDUCE(with prod 18)]
 [term 62:REDUCE(with prod 18)] [term 63:REDUCE(with prod 18)]
 [term 68:REDUCE(with prod 18)]
From state #78
 [term 2:SHIFT(to state 70)] [term 10:SHIFT(to state 60)]
 [term 45:SHIFT(to state 50)] [term 54:SHIFT(to state 52)]
 [term 55:SHIFT(to state 71)] [term 56:SHIFT(to state 56)]
From state #79
 [term 55:REDUCE(with prod 17)] [term 58:REDUCE(with prod 17)]
 [term 62:REDUCE(with prod 17)] [term 63:REDUCE(with prod 17)]
 [term 68:REDUCE(with prod 17)]
From state #80
 [term 55:SHIFT(to state 81)] [term 62:REDUCE(with prod 26)]
From state #81
 [term 55:REDUCE(with prod 3)] [term 58:REDUCE(with prod 3)]
 [term 62:REDUCE(with prod 3)] [term 63:REDUCE(with prod 3)]
 [term 68:REDUCE(with prod 3)]
From state #82
 [term 33:REDUCE(with prod 90)] [term 34:REDUCE(with prod 90)]
 [term 35:REDUCE(with prod 90)] [term 36:REDUCE(with prod 90)]
 [term 37:REDUCE(with prod 90)] [term 38:REDUCE(with prod 90)]
 [term 39:REDUCE(with prod 90)] [term 40:REDUCE(with prod 90)]
 [term 41:REDUCE(with prod 90)] [term 42:REDUCE(with prod 90)]
 [term 43:REDUCE(with prod 90)] [term 44:REDUCE(with prod 90)]
 [term 45:REDUCE(with prod 90)] [term 46:REDUCE(with prod 90)]
 [term 47:REDUCE(with prod 90)] [term 48:REDUCE(with prod 90)]
 [term 49:REDUCE(with prod 90)] [term 50:REDUCE(with prod 90)]
 [term 51:REDUCE(with prod 90)] [term 55:REDUCE(with prod 90)]
 [term 57:REDUCE(with prod 90)] [term 58:REDUCE(with prod 90)]
 [term 59:REDUCE(with prod 90)] [term 60:REDUCE(with prod 90)]
 [term 62:REDUCE(with prod 90)] [term 63:REDUCE(with prod 90)]
 [term 64:REDUCE(with prod 90)] [term 67:REDUCE(with prod 90)]
 [term 68:REDUCE(with prod 90)]
From state #83
 [term 33:REDUCE(with prod 71)] [term 34:REDUCE(with prod 71)]
 [term 35:REDUCE(with prod 71)] [term 36:REDUCE(with prod 71)]
 [term 37:REDUCE(with prod 71)] [term 38:REDUCE(with prod 71)]
 [term 39:REDUCE(with prod 71)] [term 40:REDUCE(with prod 71)]
 [term 41:REDUCE(with prod 71)] [term 42:REDUCE(with prod 71)]
 [term 43:REDUCE(with prod 71)] [term 44:REDUCE(with prod 71)]
 [term 45:REDUCE(with prod 71)] [term 46:REDUCE(with prod 71)]
 [term 47:REDUCE(with prod 71)] [term 48:REDUCE(with prod 71)]
 [term 49:REDUCE(with prod 71)] [term 50:REDUCE(with prod 71)]
 [term 51:REDUCE(with prod 71)] [term 55:REDUCE(with prod 71)]
 [term 56:REDUCE(with prod 71)] [term 57:REDUCE(with prod 71)]
 [term 58:REDUCE(with prod 71)] [term 59:REDUCE(with prod 71)]
 [term 60:REDUCE(with prod 71)] [term 62:REDUCE(with prod 71)]
 [term 63:REDUCE(with prod 71)] [term 64:REDUCE(with prod 71)]
 [term 67:REDUCE(with prod 71)] [term 68:REDUCE(with prod 71)]
From state #84
 [term 33:REDUCE(with prod 73)] [term 34:REDUCE(with prod 73)]
 [term 35:REDUCE(with prod 73)] [term 36:REDUCE(with prod 73)]
 [term 37:REDUCE(with prod 73)] [term 38:REDUCE(with prod 73)]
 [term 39:REDUCE(with prod 73)] [term 40:REDUCE(with prod 73)]
 [term 41:REDUCE(with prod 73)] [term 42:REDUCE(with prod 73)]
 [term 43:REDUCE(with prod 73)] [term 44:REDUCE(with prod 73)]
 [term 45:REDUCE(with prod 73)] [term 46:REDUCE(with prod 73)]
 [term 47:REDUCE(with prod 73)] [term 48:REDUCE(with prod 73)]
 [term 49:REDUCE(with prod 73)] [term 50:REDUCE(with prod 73)]
 [term 51:REDUCE(with prod 73)] [term 55:REDUCE(with prod 73)]
 [term 56:REDUCE(with prod 73)] [term 57:REDUCE(with prod 73)]
 [term 58:REDUCE(with prod 73)] [term 59:REDUCE(with prod 73)]
 [term 60:REDUCE(with prod 73)] [term 62:REDUCE(with prod 73)]
 [term 63:REDUCE(with prod 73)] [term 64:REDUCE(with prod 73)]
 [term 67:REDUCE(with prod 73)] [term 68:REDUCE(with prod 73)]
From state #85
 [term 2:REDUCE(with prod 135)] [term 3:REDUCE(with prod 135)]
 [term 4:REDUCE(with prod 135)] [term 5:REDUCE(with prod 135)]
 [term 6:REDUCE(with prod 135)] [term 7:REDUCE(with prod 135)]
 [term 41:REDUCE(with prod 135)] [term 42:REDUCE(with prod 135)]
 [term 44:REDUCE(with prod 135)] [term 45:REDUCE(with prod 135)]
 [term 50:REDUCE(with prod 135)] [term 52:REDUCE(with prod 135)]
 [term 54:REDUCE(with prod 135)] [term 56:REDUCE(with prod 135)]
From state #86
 [term 2:REDUCE(with prod 133)] [term 3:REDUCE(with prod 133)]
 [term 4:REDUCE(with prod 133)] [term 5:REDUCE(with prod 133)]
 [term 6:REDUCE(with prod 133)] [term 7:REDUCE(with prod 133)]
 [term 41:REDUCE(with prod 133)] [term 42:REDUCE(with prod 133)]
 [term 44:REDUCE(with prod 133)] [term 45:REDUCE(with prod 133)]
 [term 50:REDUCE(with prod 133)] [term 52:REDUCE(with prod 133)]
 [term 54:REDUCE(with prod 133)] [term 56:REDUCE(with prod 133)]
From state #87
 [term 33:REDUCE(with prod 70)] [term 34:REDUCE(with prod 70)]
 [term 35:REDUCE(with prod 70)] [term 36:REDUCE(with prod 70)]
 [term 37:REDUCE(with prod 70)] [term 38:REDUCE(with prod 70)]
 [term 39:REDUCE(with prod 70)] [term 40:REDUCE(with prod 70)]
 [term 41:REDUCE(with prod 70)] [term 42:REDUCE(with prod 70)]
 [term 43:REDUCE(with prod 70)] [term 44:REDUCE(with prod 70)]
 [term 45:REDUCE(with prod 70)] [term 46:REDUCE(with prod 70)]
 [term 47:REDUCE(with prod 70)] [term 48:REDUCE(with prod 70)]
 [term 49:REDUCE(with prod 70)] [term 50:REDUCE(with prod 70)]
 [term 51:REDUCE(with prod 70)] [term 55:REDUCE(with prod 70)]
 [term 56:REDUCE(with prod 70)] [term 57:REDUCE(with prod 70)]
 [term 58:REDUCE(with prod 70)] [term 59:REDUCE(with prod 70)]
 [term 60:REDUCE(with prod 70)] [term 62:REDUCE(with prod 70)]
 [term 63:REDUCE(with prod 70)] [term 64:REDUCE(with prod 70)]
 [term 67:REDUCE(with prod 70)] [term 68:REDUCE(with prod 70)]
From state #88
 [term 33:REDUCE(with prod 87)] [term 34:REDUCE(with prod 87)]
 [term 35:REDUCE(with prod 87)] [term 36:REDUCE(with prod 87)]
 [term 37:REDUCE(with prod 87)] [term 38:REDUCE(with prod 87)]
 [term 39:REDUCE(with prod 87)] [term 40:REDUCE(with prod 87)]
 [term 41:REDUCE(with prod 87)] [term 42:REDUCE(with prod 87)]
 [term 43:REDUCE(with prod 87)] [term 44:REDUCE(with prod 87)]
 [term 45:REDUCE(with prod 87)] [term 46:REDUCE(with prod 87)]
 [term 47:REDUCE(with prod 87)] [term 48:REDUCE(with prod 87)]
 [term 49:REDUCE(with prod 87)] [term 50:REDUCE(with prod 87)]
 [term 51:REDUCE(with prod 87)] [term 55:REDUCE(with prod 87)]
 [term 56:REDUCE(with prod 87)] [term 57:REDUCE(with prod 87)]
 [term 58:REDUCE(with prod 87)] [term 59:REDUCE(with prod 87)]
 [term 60:REDUCE(with prod 87)] [term 62:REDUCE(with prod 87)]
 [term 63:REDUCE(with prod 87)] [term 64:REDUCE(with prod 87)]
 [term 67:REDUCE(with prod 87)] [term 68:REDUCE(with prod 87)]
From state #89
 [term 33:REDUCE(with prod 67)] [term 34:REDUCE(with prod 67)]
 [term 35:REDUCE(with prod 67)] [term 36:REDUCE(with prod 67)]
 [term 37:REDUCE(with prod 67)] [term 38:REDUCE(with prod 67)]
 [term 39:REDUCE(with prod 67)] [term 40:REDUCE(with prod 67)]
 [term 41:REDUCE(with prod 67)] [term 42:REDUCE(with prod 67)]
 [term 43:REDUCE(with prod 67)] [term 44:REDUCE(with prod 67)]
 [term 45:REDUCE(with prod 67)] [term 46:REDUCE(with prod 67)]
 [term 47:REDUCE(with prod 67)] [term 48:REDUCE(with prod 67)]
 [term 49:REDUCE(with prod 67)] [term 50:REDUCE(with prod 67)]
 [term 51:REDUCE(with prod 67)] [term 55:REDUCE(with prod 67)]
 [term 56:REDUCE(with prod 67)] [term 57:REDUCE(with prod 67)]
 [term 58:REDUCE(with prod 67)] [term 59:REDUCE(with prod 67)]
 [term 60:REDUCE(with prod 67)] [term 62:REDUCE(with prod 67)]
 [term 63:REDUCE(with prod 67)] [term 64:REDUCE(with prod 67)]
 [term 67:REDUCE(with prod 67)] [term 68:REDUCE(with prod 67)]
From state #90
 [term 33:REDUCE(with prod 109)] [term 34:REDUCE(with prod 109)]
 [term 35:REDUCE(with prod 109)] [term 36:REDUCE(with prod 109)]
 [term 37:REDUCE(with prod 109)] [term 38:REDUCE(with prod 109)]
 [term 39:REDUCE(with prod 109)] [term 40:REDUCE(with prod 109)]
 [term 41:REDUCE(with prod 109)] [term 42:REDUCE(with prod 109)]
 [term 43:REDUCE(with prod 109)] [term 44:REDUCE(with prod 109)]
 [term 45:REDUCE(with prod 109)] [term 46:REDUCE(with prod 109)]
 [term 47:REDUCE(with prod 109)] [term 48:REDUCE(with prod 109)]
 [term 49:REDUCE(with prod 109)] [term 50:REDUCE(with prod 109)]
 [term 51:REDUCE(with prod 109)] [term 55:REDUCE(with prod 109)]
 [term 56:SHIFT(to state 161)] [term 57:REDUCE(with prod 109)]
 [term 58:REDUCE(with prod 109)] [term 59:REDUCE(with prod 109)]
 [term 60:REDUCE(with prod 109)] [term 62:REDUCE(with prod 109)]
 [term 63:REDUCE(with prod 109)] [term 64:REDUCE(with prod 109)]
 [term 67:REDUCE(with prod 109)] [term 68:REDUCE(with prod 109)]
From state #91
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #92
 [term 2:REDUCE(with prod 137)] [term 3:REDUCE(with prod 137)]
 [term 4:REDUCE(with prod 137)] [term 5:REDUCE(with prod 137)]
 [term 6:REDUCE(with prod 137)] [term 7:REDUCE(with prod 137)]
 [term 41:REDUCE(with prod 137)] [term 42:REDUCE(with prod 137)]
 [term 44:REDUCE(with prod 137)] [term 45:REDUCE(with prod 137)]
 [term 50:REDUCE(with prod 137)] [term 52:REDUCE(with prod 137)]
 [term 54:REDUCE(with prod 137)] [term 56:REDUCE(with prod 137)]
From state #93
 [term 33:REDUCE(with prod 65)] [term 34:REDUCE(with prod 65)]
 [term 35:REDUCE(with prod 65)] [term 36:REDUCE(with prod 65)]
 [term 37:REDUCE(with prod 65)] [term 38:REDUCE(with prod 65)]
 [term 39:REDUCE(with prod 65)] [term 40:REDUCE(with prod 65)]
 [term 41:REDUCE(with prod 65)] [term 42:REDUCE(with prod 65)]
 [term 43:REDUCE(with prod 65)] [term 44:REDUCE(with prod 65)]
 [term 45:REDUCE(with prod 65)] [term 46:REDUCE(with prod 65)]
 [term 47:REDUCE(with prod 65)] [term 48:REDUCE(with prod 65)]
 [term 49:REDUCE(with prod 65)] [term 50:REDUCE(with prod 65)]
 [term 51:REDUCE(with prod 65)] [term 55:REDUCE(with prod 65)]
 [term 56:REDUCE(with prod 65)] [term 57:REDUCE(with prod 65)]
 [term 58:REDUCE(with prod 65)] [term 59:REDUCE(with prod 65)]
 [term 60:REDUCE(with prod 65)] [term 62:REDUCE(with prod 65)]
 [term 63:REDUCE(with prod 65)] [term 64:REDUCE(with prod 65)]
 [term 67:REDUCE(with prod 65)] [term 68:REDUCE(with prod 65)]
From state #94
 [term 2:REDUCE(with prod 138)] [term 3:REDUCE(with prod 138)]
 [term 4:REDUCE(with prod 138)] [term 5:REDUCE(with prod 138)]
 [term 6:REDUCE(with prod 138)] [term 7:REDUCE(with prod 138)]
 [term 41:REDUCE(with prod 138)] [term 42:REDUCE(with prod 138)]
 [term 44:REDUCE(with prod 138)] [term 45:REDUCE(with prod 138)]
 [term 50:REDUCE(with prod 138)] [term 52:REDUCE(with prod 138)]
 [term 54:REDUCE(with prod 138)] [term 56:REDUCE(with prod 138)]
From state #95
 [term 58:SHIFT(to state 143)]
From state #96
 [term 33:REDUCE(with prod 72)] [term 34:REDUCE(with prod 72)]
 [term 35:REDUCE(with prod 72)] [term 36:REDUCE(with prod 72)]
 [term 37:REDUCE(with prod 72)] [term 38:REDUCE(with prod 72)]
 [term 39:REDUCE(with prod 72)] [term 40:REDUCE(with prod 72)]
 [term 41:REDUCE(with prod 72)] [term 42:REDUCE(with prod 72)]
 [term 43:REDUCE(with prod 72)] [term 44:REDUCE(with prod 72)]
 [term 45:REDUCE(with prod 72)] [term 46:REDUCE(with prod 72)]
 [term 47:REDUCE(with prod 72)] [term 48:REDUCE(with prod 72)]
 [term 49:REDUCE(with prod 72)] [term 50:REDUCE(with prod 72)]
 [term 51:REDUCE(with prod 72)] [term 55:REDUCE(with prod 72)]
 [term 56:REDUCE(with prod 72)] [term 57:REDUCE(with prod 72)]
 [term 58:REDUCE(with prod 72)] [term 59:REDUCE(with prod 72)]
 [term 60:REDUCE(with prod 72)] [term 62:REDUCE(with prod 72)]
 [term 63:REDUCE(with prod 72)] [term 64:REDUCE(with prod 72)]
 [term 67:REDUCE(with prod 72)] [term 68:REDUCE(with prod 72)]
From state #97
 [term 63:REDUCE(with prod 64)]
From state #98
 [term 2:REDUCE(with prod 134)] [term 3:REDUCE(with prod 134)]
 [term 4:REDUCE(with prod 134)] [term 5:REDUCE(with prod 134)]
 [term 6:REDUCE(with prod 134)] [term 7:REDUCE(with prod 134)]
 [term 41:REDUCE(with prod 134)] [term 42:REDUCE(with prod 134)]
 [term 44:REDUCE(with prod 134)] [term 45:REDUCE(with prod 134)]
 [term 50:REDUCE(with prod 134)] [term 52:REDUCE(with prod 134)]
 [term 54:REDUCE(with prod 134)] [term 56:REDUCE(with prod 134)]
From state #99
 [term 2:REDUCE(with prod 136)] [term 3:REDUCE(with prod 136)]
 [term 4:REDUCE(with prod 136)] [term 5:REDUCE(with prod 136)]
 [term 6:REDUCE(with prod 136)] [term 7:REDUCE(with prod 136)]
 [term 41:REDUCE(with prod 136)] [term 42:REDUCE(with prod 136)]
 [term 44:REDUCE(with prod 136)] [term 45:REDUCE(with prod 136)]
 [term 50:REDUCE(with prod 136)] [term 52:REDUCE(with prod 136)]
 [term 54:REDUCE(with prod 136)] [term 56:REDUCE(with prod 136)]
From state #100
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 51:SHIFT(to state 108)]
 [term 55:REDUCE(with prod 54)] [term 58:REDUCE(with prod 54)]
 [term 62:REDUCE(with prod 54)] [term 63:REDUCE(with prod 54)]
 [term 67:REDUCE(with prod 54)]
From state #101
 [term 33:REDUCE(with prod 69)] [term 34:REDUCE(with prod 69)]
 [term 35:REDUCE(with prod 69)] [term 36:REDUCE(with prod 69)]
 [term 37:REDUCE(with prod 69)] [term 38:REDUCE(with prod 69)]
 [term 39:REDUCE(with prod 69)] [term 40:REDUCE(with prod 69)]
 [term 41:REDUCE(with prod 69)] [term 42:REDUCE(with prod 69)]
 [term 43:REDUCE(with prod 69)] [term 44:REDUCE(with prod 69)]
 [term 45:REDUCE(with prod 69)] [term 46:REDUCE(with prod 69)]
 [term 47:REDUCE(with prod 69)] [term 48:REDUCE(with prod 69)]
 [term 49:REDUCE(with prod 69)] [term 50:REDUCE(with prod 69)]
 [term 51:REDUCE(with prod 69)] [term 55:REDUCE(with prod 69)]
 [term 56:REDUCE(with prod 69)] [term 57:REDUCE(with prod 69)]
 [term 58:REDUCE(with prod 69)] [term 59:REDUCE(with prod 69)]
 [term 60:REDUCE(with prod 69)] [term 62:REDUCE(with prod 69)]
 [term 63:REDUCE(with prod 69)] [term 64:REDUCE(with prod 69)]
 [term 67:REDUCE(with prod 69)] [term 68:REDUCE(with prod 69)]
From state #102
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #103
 [term 33:REDUCE(with prod 110)] [term 34:REDUCE(with prod 110)]
 [term 35:REDUCE(with prod 110)] [term 36:REDUCE(with prod 110)]
 [term 37:REDUCE(with prod 110)] [term 38:REDUCE(with prod 110)]
 [term 39:REDUCE(with prod 110)] [term 40:REDUCE(with prod 110)]
 [term 41:REDUCE(with prod 110)] [term 42:REDUCE(with prod 110)]
 [term 43:REDUCE(with prod 110)] [term 44:REDUCE(with prod 110)]
 [term 45:REDUCE(with prod 110)] [term 46:REDUCE(with prod 110)]
 [term 47:REDUCE(with prod 110)] [term 48:REDUCE(with prod 110)]
 [term 49:REDUCE(with prod 110)] [term 50:REDUCE(with prod 110)]
 [term 51:REDUCE(with prod 110)] [term 55:REDUCE(with prod 110)]
 [term 57:REDUCE(with prod 110)] [term 58:REDUCE(with prod 110)]
 [term 59:REDUCE(with prod 110)] [term 60:REDUCE(with prod 110)]
 [term 62:REDUCE(with prod 110)] [term 63:REDUCE(with prod 110)]
 [term 64:REDUCE(with prod 110)] [term 67:REDUCE(with prod 110)]
 [term 68:REDUCE(with prod 110)]
From state #104
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #105
 [term 55:REDUCE(with prod 52)] [term 58:REDUCE(with prod 52)]
 [term 62:SHIFT(to state 140)] [term 63:REDUCE(with prod 52)]
 [term 67:REDUCE(with prod 52)]
From state #106
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #107
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #108
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #109
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #110
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #111
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #112
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #113
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #114
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #115
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #116
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #117
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #118
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #119
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #120
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #121
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #122
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #123
 [term 33:REDUCE(with prod 107)] [term 34:REDUCE(with prod 107)]
 [term 35:REDUCE(with prod 107)] [term 36:REDUCE(with prod 107)]
 [term 37:REDUCE(with prod 107)] [term 38:REDUCE(with prod 107)]
 [term 39:REDUCE(with prod 107)] [term 40:REDUCE(with prod 107)]
 [term 41:REDUCE(with prod 107)] [term 42:REDUCE(with prod 107)]
 [term 43:REDUCE(with prod 107)] [term 44:REDUCE(with prod 107)]
 [term 45:REDUCE(with prod 107)] [term 46:REDUCE(with prod 107)]
 [term 47:REDUCE(with prod 107)] [term 48:REDUCE(with prod 107)]
 [term 49:REDUCE(with prod 107)] [term 50:REDUCE(with prod 107)]
 [term 51:REDUCE(with prod 107)] [term 55:REDUCE(with prod 107)]
 [term 57:REDUCE(with prod 107)] [term 58:REDUCE(with prod 107)]
 [term 59:REDUCE(with prod 107)] [term 60:REDUCE(with prod 107)]
 [term 62:REDUCE(with prod 107)] [term 63:REDUCE(with prod 107)]
 [term 64:REDUCE(with prod 107)] [term 67:REDUCE(with prod 107)]
 [term 68:REDUCE(with prod 107)]
From state #124
 [term 33:REDUCE(with prod 96)] [term 34:REDUCE(with prod 96)]
 [term 35:REDUCE(with prod 96)] [term 36:REDUCE(with prod 96)]
 [term 37:REDUCE(with prod 96)] [term 38:REDUCE(with prod 96)]
 [term 39:REDUCE(with prod 96)] [term 40:REDUCE(with prod 96)]
 [term 41:REDUCE(with prod 96)] [term 42:REDUCE(with prod 96)]
 [term 43:REDUCE(with prod 96)] [term 44:REDUCE(with prod 96)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 96)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 96)]
 [term 57:REDUCE(with prod 96)] [term 58:REDUCE(with prod 96)]
 [term 59:REDUCE(with prod 96)] [term 60:REDUCE(with prod 96)]
 [term 62:REDUCE(with prod 96)] [term 63:REDUCE(with prod 96)]
 [term 64:REDUCE(with prod 96)] [term 67:REDUCE(with prod 96)]
 [term 68:REDUCE(with prod 96)]
From state #125
 [term 33:REDUCE(with prod 94)] [term 34:REDUCE(with prod 94)]
 [term 35:REDUCE(with prod 94)] [term 36:REDUCE(with prod 94)]
 [term 37:REDUCE(with prod 94)] [term 38:REDUCE(with prod 94)]
 [term 39:REDUCE(with prod 94)] [term 40:REDUCE(with prod 94)]
 [term 41:REDUCE(with prod 94)] [term 42:REDUCE(with prod 94)]
 [term 43:REDUCE(with prod 94)] [term 44:REDUCE(with prod 94)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 94)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 94)]
 [term 57:REDUCE(with prod 94)] [term 58:REDUCE(with prod 94)]
 [term 59:REDUCE(with prod 94)] [term 60:REDUCE(with prod 94)]
 [term 62:REDUCE(with prod 94)] [term 63:REDUCE(with prod 94)]
 [term 64:REDUCE(with prod 94)] [term 67:REDUCE(with prod 94)]
 [term 68:REDUCE(with prod 94)]
From state #126
 [term 33:REDUCE(with prod 102)] [term 34:REDUCE(with prod 102)]
 [term 35:REDUCE(with prod 102)] [term 36:REDUCE(with prod 102)]
 [term 37:REDUCE(with prod 102)] [term 38:REDUCE(with prod 102)]
 [term 39:REDUCE(with prod 102)] [term 40:REDUCE(with prod 102)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 102)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 102)]
 [term 57:REDUCE(with prod 102)] [term 58:REDUCE(with prod 102)]
 [term 59:REDUCE(with prod 102)] [term 60:REDUCE(with prod 102)]
 [term 62:REDUCE(with prod 102)] [term 63:REDUCE(with prod 102)]
 [term 64:REDUCE(with prod 102)] [term 67:REDUCE(with prod 102)]
 [term 68:REDUCE(with prod 102)]
From state #127
 [term 33:REDUCE(with prod 97)] [term 34:REDUCE(with prod 97)]
 [term 35:REDUCE(with prod 97)] [term 36:REDUCE(with prod 97)]
 [term 37:REDUCE(with prod 97)] [term 38:REDUCE(with prod 97)]
 [term 39:REDUCE(with prod 97)] [term 40:REDUCE(with prod 97)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 97)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 97)]
 [term 57:REDUCE(with prod 97)] [term 58:REDUCE(with prod 97)]
 [term 59:REDUCE(with prod 97)] [term 60:REDUCE(with prod 97)]
 [term 62:REDUCE(with prod 97)] [term 63:REDUCE(with prod 97)]
 [term 64:REDUCE(with prod 97)] [term 67:REDUCE(with prod 97)]
 [term 68:REDUCE(with prod 97)]
From state #128
 [term 33:REDUCE(with prod 95)] [term 34:REDUCE(with prod 95)]
 [term 35:REDUCE(with prod 95)] [term 36:REDUCE(with prod 95)]
 [term 37:REDUCE(with prod 95)] [term 38:REDUCE(with prod 95)]
 [term 39:REDUCE(with prod 95)] [term 40:REDUCE(with prod 95)]
 [term 41:REDUCE(with prod 95)] [term 42:REDUCE(with prod 95)]
 [term 43:REDUCE(with prod 95)] [term 44:REDUCE(with prod 95)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 95)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 95)]
 [term 57:REDUCE(with prod 95)] [term 58:REDUCE(with prod 95)]
 [term 59:REDUCE(with prod 95)] [term 60:REDUCE(with prod 95)]
 [term 62:REDUCE(with prod 95)] [term 63:REDUCE(with prod 95)]
 [term 64:REDUCE(with prod 95)] [term 67:REDUCE(with prod 95)]
 [term 68:REDUCE(with prod 95)]
From state #129
 [term 33:REDUCE(with prod 98)] [term 34:REDUCE(with prod 98)]
 [term 35:REDUCE(with prod 98)] [term 36:REDUCE(with prod 98)]
 [term 37:REDUCE(with prod 98)] [term 38:REDUCE(with prod 98)]
 [term 39:REDUCE(with prod 98)] [term 40:REDUCE(with prod 98)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 98)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 98)]
 [term 57:REDUCE(with prod 98)] [term 58:REDUCE(with prod 98)]
 [term 59:REDUCE(with prod 98)] [term 60:REDUCE(with prod 98)]
 [term 62:REDUCE(with prod 98)] [term 63:REDUCE(with prod 98)]
 [term 64:REDUCE(with prod 98)] [term 67:REDUCE(with prod 98)]
 [term 68:REDUCE(with prod 98)]
From state #130
 [term 33:REDUCE(with prod 105)] [term 34:REDUCE(with prod 105)]
 [term 35:REDUCE(with prod 105)] [term 36:REDUCE(with prod 105)]
 [term 37:REDUCE(with prod 105)] [term 38:REDUCE(with prod 105)]
 [term 39:REDUCE(with prod 105)] [term 40:REDUCE(with prod 105)]
 [term 41:REDUCE(with prod 105)] [term 42:REDUCE(with prod 105)]
 [term 43:REDUCE(with prod 105)] [term 44:REDUCE(with prod 105)]
 [term 45:REDUCE(with prod 105)] [term 46:REDUCE(with prod 105)]
 [term 47:REDUCE(with prod 105)] [term 48:REDUCE(with prod 105)]
 [term 49:REDUCE(with prod 105)] [term 50:REDUCE(with prod 105)]
 [term 51:REDUCE(with prod 105)] [term 55:REDUCE(with prod 105)]
 [term 57:REDUCE(with prod 105)] [term 58:REDUCE(with prod 105)]
 [term 59:REDUCE(with prod 105)] [term 60:REDUCE(with prod 105)]
 [term 62:REDUCE(with prod 105)] [term 63:REDUCE(with prod 105)]
 [term 64:REDUCE(with prod 105)] [term 67:REDUCE(with prod 105)]
 [term 68:REDUCE(with prod 105)]
From state #131
 [term 33:REDUCE(with prod 100)] [term 34:REDUCE(with prod 100)]
 [term 35:REDUCE(with prod 100)] [term 36:REDUCE(with prod 100)]
 [term 37:REDUCE(with prod 100)] [term 38:REDUCE(with prod 100)]
 [term 39:REDUCE(with prod 100)] [term 40:REDUCE(with prod 100)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 100)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 100)]
 [term 57:REDUCE(with prod 100)] [term 58:REDUCE(with prod 100)]
 [term 59:REDUCE(with prod 100)] [term 60:REDUCE(with prod 100)]
 [term 62:REDUCE(with prod 100)] [term 63:REDUCE(with prod 100)]
 [term 64:REDUCE(with prod 100)] [term 67:REDUCE(with prod 100)]
 [term 68:REDUCE(with prod 100)]
From state #132
 [term 33:REDUCE(with prod 103)] [term 34:REDUCE(with prod 103)]
 [term 35:REDUCE(with prod 103)] [term 36:REDUCE(with prod 103)]
 [term 37:REDUCE(with prod 103)] [term 38:REDUCE(with prod 103)]
 [term 39:REDUCE(with prod 103)] [term 40:REDUCE(with prod 103)]
 [term 41:REDUCE(with prod 103)] [term 42:REDUCE(with prod 103)]
 [term 43:REDUCE(with prod 103)] [term 44:REDUCE(with prod 103)]
 [term 45:REDUCE(with prod 103)] [term 46:REDUCE(with prod 103)]
 [term 47:REDUCE(with prod 103)] [term 48:REDUCE(with prod 103)]
 [term 49:REDUCE(with prod 103)] [term 50:REDUCE(with prod 103)]
 [term 51:REDUCE(with prod 103)] [term 55:REDUCE(with prod 103)]
 [term 57:REDUCE(with prod 103)] [term 58:REDUCE(with prod 103)]
 [term 59:REDUCE(with prod 103)] [term 60:REDUCE(with prod 103)]
 [term 62:REDUCE(with prod 103)] [term 63:REDUCE(with prod 103)]
 [term 64:REDUCE(with prod 103)] [term 67:REDUCE(with prod 103)]
 [term 68:REDUCE(with prod 103)]
From state #133
 [term 33:REDUCE(with prod 92)] [term 34:REDUCE(with prod 92)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 92)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 92)]
 [term 57:REDUCE(with prod 92)] [term 58:REDUCE(with prod 92)]
 [term 59:REDUCE(with prod 92)] [term 60:REDUCE(with prod 92)]
 [term 62:REDUCE(with prod 92)] [term 63:REDUCE(with prod 92)]
 [term 64:REDUCE(with prod 92)] [term 67:REDUCE(with prod 92)]
 [term 68:REDUCE(with prod 92)]
From state #134
 [term 33:REDUCE(with prod 106)] [term 34:REDUCE(with prod 106)]
 [term 35:REDUCE(with prod 106)] [term 36:REDUCE(with prod 106)]
 [term 37:REDUCE(with prod 106)] [term 38:REDUCE(with prod 106)]
 [term 39:REDUCE(with prod 106)] [term 40:REDUCE(with prod 106)]
 [term 41:REDUCE(with prod 106)] [term 42:REDUCE(with prod 106)]
 [term 43:REDUCE(with prod 106)] [term 44:REDUCE(with prod 106)]
 [term 45:REDUCE(with prod 106)] [term 46:REDUCE(with prod 106)]
 [term 47:REDUCE(with prod 106)] [term 48:REDUCE(with prod 106)]
 [term 49:REDUCE(with prod 106)] [term 50:REDUCE(with prod 106)]
 [term 51:REDUCE(with prod 106)] [term 55:REDUCE(with prod 106)]
 [term 57:REDUCE(with prod 106)] [term 58:REDUCE(with prod 106)]
 [term 59:REDUCE(with prod 106)] [term 60:REDUCE(with prod 106)]
 [term 62:REDUCE(with prod 106)] [term 63:REDUCE(with prod 106)]
 [term 64:REDUCE(with prod 106)] [term 67:REDUCE(with prod 106)]
 [term 68:REDUCE(with prod 106)]
From state #135
 [term 33:REDUCE(with prod 104)] [term 34:REDUCE(with prod 104)]
 [term 35:REDUCE(with prod 104)] [term 36:REDUCE(with prod 104)]
 [term 37:REDUCE(with prod 104)] [term 38:REDUCE(with prod 104)]
 [term 39:REDUCE(with prod 104)] [term 40:REDUCE(with prod 104)]
 [term 41:REDUCE(with prod 104)] [term 42:REDUCE(with prod 104)]
 [term 43:REDUCE(with prod 104)] [term 44:REDUCE(with prod 104)]
 [term 45:REDUCE(with prod 104)] [term 46:REDUCE(with prod 104)]
 [term 47:REDUCE(with prod 104)] [term 48:REDUCE(with prod 104)]
 [term 49:REDUCE(with prod 104)] [term 50:REDUCE(with prod 104)]
 [term 51:REDUCE(with prod 104)] [term 55:REDUCE(with prod 104)]
 [term 57:REDUCE(with prod 104)] [term 58:REDUCE(with prod 104)]
 [term 59:REDUCE(with prod 104)] [term 60:REDUCE(with prod 104)]
 [term 62:REDUCE(with prod 104)] [term 63:REDUCE(with prod 104)]
 [term 64:REDUCE(with prod 104)] [term 67:REDUCE(with prod 104)]
 [term 68:REDUCE(with prod 104)]
From state #136
 [term 33:REDUCE(with prod 91)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 91)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 91)]
 [term 57:REDUCE(with prod 91)] [term 58:REDUCE(with prod 91)]
 [term 59:REDUCE(with prod 91)] [term 60:REDUCE(with prod 91)]
 [term 62:REDUCE(with prod 91)] [term 63:REDUCE(with prod 91)]
 [term 64:REDUCE(with prod 91)] [term 67:REDUCE(with prod 91)]
 [term 68:REDUCE(with prod 91)]
From state #137
 [term 33:REDUCE(with prod 108)] [term 34:REDUCE(with prod 108)]
 [term 35:REDUCE(with prod 108)] [term 36:REDUCE(with prod 108)]
 [term 37:REDUCE(with prod 108)] [term 38:REDUCE(with prod 108)]
 [term 39:REDUCE(with prod 108)] [term 40:REDUCE(with prod 108)]
 [term 41:REDUCE(with prod 108)] [term 42:REDUCE(with prod 108)]
 [term 43:REDUCE(with prod 108)] [term 44:REDUCE(with prod 108)]
 [term 45:REDUCE(with prod 108)] [term 46:REDUCE(with prod 108)]
 [term 47:REDUCE(with prod 108)] [term 48:REDUCE(with prod 108)]
 [term 49:REDUCE(with prod 108)] [term 50:REDUCE(with prod 108)]
 [term 51:REDUCE(with prod 108)] [term 55:REDUCE(with prod 108)]
 [term 57:REDUCE(with prod 108)] [term 58:REDUCE(with prod 108)]
 [term 59:REDUCE(with prod 108)] [term 60:REDUCE(with prod 108)]
 [term 62:REDUCE(with prod 108)] [term 63:REDUCE(with prod 108)]
 [term 64:REDUCE(with prod 108)] [term 67:REDUCE(with prod 108)]
 [term 68:REDUCE(with prod 108)]
From state #138
 [term 33:REDUCE(with prod 93)] [term 34:REDUCE(with prod 93)]
 [term 35:REDUCE(with prod 93)] [term 36:REDUCE(with prod 93)]
 [term 37:REDUCE(with prod 93)] [term 38:REDUCE(with prod 93)]
 [term 39:REDUCE(with prod 93)] [term 40:REDUCE(with prod 93)]
 [term 41:REDUCE(with prod 93)] [term 42:REDUCE(with prod 93)]
 [term 43:REDUCE(with prod 93)] [term 44:REDUCE(with prod 93)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 93)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 93)]
 [term 57:REDUCE(with prod 93)] [term 58:REDUCE(with prod 93)]
 [term 59:REDUCE(with prod 93)] [term 60:REDUCE(with prod 93)]
 [term 62:REDUCE(with prod 93)] [term 63:REDUCE(with prod 93)]
 [term 64:REDUCE(with prod 93)] [term 67:REDUCE(with prod 93)]
 [term 68:REDUCE(with prod 93)]
From state #139
 [term 33:REDUCE(with prod 101)] [term 34:REDUCE(with prod 101)]
 [term 35:REDUCE(with prod 101)] [term 36:REDUCE(with prod 101)]
 [term 37:REDUCE(with prod 101)] [term 38:REDUCE(with prod 101)]
 [term 39:REDUCE(with prod 101)] [term 40:REDUCE(with prod 101)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 101)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 101)]
 [term 57:REDUCE(with prod 101)] [term 58:REDUCE(with prod 101)]
 [term 59:REDUCE(with prod 101)] [term 60:REDUCE(with prod 101)]
 [term 62:REDUCE(with prod 101)] [term 63:REDUCE(with prod 101)]
 [term 64:REDUCE(with prod 101)] [term 67:REDUCE(with prod 101)]
 [term 68:REDUCE(with prod 101)]
From state #140
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #141
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 53)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 53)]
 [term 58:REDUCE(with prod 53)] [term 62:REDUCE(with prod 53)]
 [term 63:REDUCE(with prod 53)] [term 67:REDUCE(with prod 53)]
 [term 68:REDUCE(with prod 53)]
From state #142
 [term 33:REDUCE(with prod 99)] [term 34:REDUCE(with prod 99)]
 [term 35:REDUCE(with prod 99)] [term 36:REDUCE(with prod 99)]
 [term 37:REDUCE(with prod 99)] [term 38:REDUCE(with prod 99)]
 [term 39:REDUCE(with prod 99)] [term 40:REDUCE(with prod 99)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 99)]
 [term 51:SHIFT(to state 108)] [term 55:REDUCE(with prod 99)]
 [term 57:REDUCE(with prod 99)] [term 58:REDUCE(with prod 99)]
 [term 59:REDUCE(with prod 99)] [term 60:REDUCE(with prod 99)]
 [term 62:REDUCE(with prod 99)] [term 63:REDUCE(with prod 99)]
 [term 64:REDUCE(with prod 99)] [term 67:REDUCE(with prod 99)]
 [term 68:REDUCE(with prod 99)]
From state #143
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
 [term 58:SHIFT(to state 143)] [term 59:REDUCE(with prod 80)]
From state #144
 [term 33:REDUCE(with prod 66)] [term 34:REDUCE(with prod 66)]
 [term 35:REDUCE(with prod 66)] [term 36:REDUCE(with prod 66)]
 [term 37:REDUCE(with prod 66)] [term 38:REDUCE(with prod 66)]
 [term 39:REDUCE(with prod 66)] [term 40:REDUCE(with prod 66)]
 [term 41:REDUCE(with prod 66)] [term 42:REDUCE(with prod 66)]
 [term 43:REDUCE(with prod 66)] [term 44:REDUCE(with prod 66)]
 [term 45:REDUCE(with prod 66)] [term 46:REDUCE(with prod 66)]
 [term 47:REDUCE(with prod 66)] [term 48:REDUCE(with prod 66)]
 [term 49:REDUCE(with prod 66)] [term 50:REDUCE(with prod 66)]
 [term 51:REDUCE(with prod 66)] [term 55:REDUCE(with prod 66)]
 [term 56:REDUCE(with prod 66)] [term 57:REDUCE(with prod 66)]
 [term 58:REDUCE(with prod 66)] [term 59:REDUCE(with prod 66)]
 [term 60:REDUCE(with prod 66)] [term 62:REDUCE(with prod 66)]
 [term 63:REDUCE(with prod 66)] [term 64:REDUCE(with prod 66)]
 [term 67:REDUCE(with prod 66)] [term 68:REDUCE(with prod 66)]
From state #145
 [term 59:REDUCE(with prod 83)] [term 62:REDUCE(with prod 83)]
From state #146
 [term 59:REDUCE(with prod 86)] [term 62:REDUCE(with prod 86)]
From state #147
 [term 59:REDUCE(with prod 78)] [term 62:REDUCE(with prod 78)]
From state #148
 [term 59:REDUCE(with prod 84)] [term 62:REDUCE(with prod 84)]
From state #149
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 51:SHIFT(to state 108)]
 [term 59:REDUCE(with prod 85)] [term 62:REDUCE(with prod 85)]
From state #150
 [term 59:REDUCE(with prod 74)]
From state #151
 [term 59:SHIFT(to state 152)]
From state #152
 [term 33:REDUCE(with prod 75)] [term 34:REDUCE(with prod 75)]
 [term 35:REDUCE(with prod 75)] [term 36:REDUCE(with prod 75)]
 [term 37:REDUCE(with prod 75)] [term 38:REDUCE(with prod 75)]
 [term 39:REDUCE(with prod 75)] [term 40:REDUCE(with prod 75)]
 [term 41:REDUCE(with prod 75)] [term 42:REDUCE(with prod 75)]
 [term 43:REDUCE(with prod 75)] [term 44:REDUCE(with prod 75)]
 [term 45:REDUCE(with prod 75)] [term 46:REDUCE(with prod 75)]
 [term 47:REDUCE(with prod 75)] [term 48:REDUCE(with prod 75)]
 [term 49:REDUCE(with prod 75)] [term 50:REDUCE(with prod 75)]
 [term 51:REDUCE(with prod 75)] [term 55:REDUCE(with prod 75)]
 [term 56:REDUCE(with prod 75)] [term 57:REDUCE(with prod 75)]
 [term 58:REDUCE(with prod 75)] [term 59:REDUCE(with prod 75)]
 [term 60:REDUCE(with prod 75)] [term 62:REDUCE(with prod 75)]
 [term 63:REDUCE(with prod 75)] [term 64:REDUCE(with prod 75)]
 [term 67:REDUCE(with prod 75)] [term 68:REDUCE(with prod 75)]
From state #153
 [term 59:REDUCE(with prod 77)] [term 62:SHIFT(to state 154)]
From state #154
 [term 59:REDUCE(with prod 76)]
From state #155
 [term 59:REDUCE(with prod 79)]
From state #156
 [term 59:REDUCE(with prod 81)] [term 62:SHIFT(to state 157)]
From state #157
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
 [term 58:SHIFT(to state 143)]
From state #158
 [term 59:REDUCE(with prod 82)] [term 62:REDUCE(with prod 82)]
From state #159
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 51:SHIFT(to state 108)]
 [term 55:SHIFT(to state 160)]
From state #160
 [term 33:REDUCE(with prod 68)] [term 34:REDUCE(with prod 68)]
 [term 35:REDUCE(with prod 68)] [term 36:REDUCE(with prod 68)]
 [term 37:REDUCE(with prod 68)] [term 38:REDUCE(with prod 68)]
 [term 39:REDUCE(with prod 68)] [term 40:REDUCE(with prod 68)]
 [term 41:REDUCE(with prod 68)] [term 42:REDUCE(with prod 68)]
 [term 43:REDUCE(with prod 68)] [term 44:REDUCE(with prod 68)]
 [term 45:REDUCE(with prod 68)] [term 46:REDUCE(with prod 68)]
 [term 47:REDUCE(with prod 68)] [term 48:REDUCE(with prod 68)]
 [term 49:REDUCE(with prod 68)] [term 50:REDUCE(with prod 68)]
 [term 51:REDUCE(with prod 68)] [term 55:REDUCE(with prod 68)]
 [term 56:REDUCE(with prod 68)] [term 57:REDUCE(with prod 68)]
 [term 58:REDUCE(with prod 68)] [term 59:REDUCE(with prod 68)]
 [term 60:REDUCE(with prod 68)] [term 62:REDUCE(with prod 68)]
 [term 63:REDUCE(with prod 68)] [term 64:REDUCE(with prod 68)]
 [term 67:REDUCE(with prod 68)] [term 68:REDUCE(with prod 68)]
From state #161
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #162
 [term 33:REDUCE(with prod 88)] [term 34:REDUCE(with prod 88)]
 [term 35:REDUCE(with prod 88)] [term 36:REDUCE(with prod 88)]
 [term 37:REDUCE(with prod 88)] [term 38:REDUCE(with prod 88)]
 [term 39:REDUCE(with prod 88)] [term 40:REDUCE(with prod 88)]
 [term 41:REDUCE(with prod 88)] [term 42:REDUCE(with prod 88)]
 [term 43:REDUCE(with prod 88)] [term 44:REDUCE(with prod 88)]
 [term 45:REDUCE(with prod 88)] [term 46:REDUCE(with prod 88)]
 [term 47:REDUCE(with prod 88)] [term 48:REDUCE(with prod 88)]
 [term 49:REDUCE(with prod 88)] [term 50:REDUCE(with prod 88)]
 [term 51:REDUCE(with prod 88)] [term 55:REDUCE(with prod 88)]
 [term 56:REDUCE(with prod 88)] [term 57:REDUCE(with prod 88)]
 [term 58:REDUCE(with prod 88)] [term 59:REDUCE(with prod 88)]
 [term 60:REDUCE(with prod 88)] [term 62:REDUCE(with prod 88)]
 [term 63:REDUCE(with prod 88)] [term 64:REDUCE(with prod 88)]
 [term 67:REDUCE(with prod 88)] [term 68:REDUCE(with prod 88)]
From state #163
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 51:SHIFT(to state 108)]
 [term 57:SHIFT(to state 164)]
From state #164
 [term 33:REDUCE(with prod 89)] [term 34:REDUCE(with prod 89)]
 [term 35:REDUCE(with prod 89)] [term 36:REDUCE(with prod 89)]
 [term 37:REDUCE(with prod 89)] [term 38:REDUCE(with prod 89)]
 [term 39:REDUCE(with prod 89)] [term 40:REDUCE(with prod 89)]
 [term 41:REDUCE(with prod 89)] [term 42:REDUCE(with prod 89)]
 [term 43:REDUCE(with prod 89)] [term 44:REDUCE(with prod 89)]
 [term 45:REDUCE(with prod 89)] [term 46:REDUCE(with prod 89)]
 [term 47:REDUCE(with prod 89)] [term 48:REDUCE(with prod 89)]
 [term 49:REDUCE(with prod 89)] [term 50:REDUCE(with prod 89)]
 [term 51:REDUCE(with prod 89)] [term 55:REDUCE(with prod 89)]
 [term 56:REDUCE(with prod 89)] [term 57:REDUCE(with prod 89)]
 [term 58:REDUCE(with prod 89)] [term 59:REDUCE(with prod 89)]
 [term 60:REDUCE(with prod 89)] [term 62:REDUCE(with prod 89)]
 [term 63:REDUCE(with prod 89)] [term 64:REDUCE(with prod 89)]
 [term 67:REDUCE(with prod 89)] [term 68:REDUCE(with prod 89)]
From state #165
 [term 57:SHIFT(to state 167)]
From state #166
 [term 57:REDUCE(with prod 12)]
From state #167
 [term 2:SHIFT(to state 57)] [term 10:SHIFT(to state 60)]
 [term 45:SHIFT(to state 50)] [term 54:SHIFT(to state 52)]
 [term 56:SHIFT(to state 56)]
From state #168
 [term 55:REDUCE(with prod 11)] [term 58:REDUCE(with prod 11)]
 [term 62:REDUCE(with prod 11)] [term 63:REDUCE(with prod 11)]
 [term 68:REDUCE(with prod 11)]
From state #169
 [term 55:SHIFT(to state 81)]
From state #170
 [term 55:REDUCE(with prod 13)] [term 58:REDUCE(with prod 13)]
 [term 62:REDUCE(with prod 13)] [term 63:REDUCE(with prod 13)]
 [term 68:REDUCE(with prod 13)]
From state #171
 [term 2:SHIFT(to state 172)]
From state #172
 [term 33:REDUCE(with prod 6)] [term 34:REDUCE(with prod 6)]
 [term 35:REDUCE(with prod 6)] [term 36:REDUCE(with prod 6)]
 [term 37:REDUCE(with prod 6)] [term 38:REDUCE(with prod 6)]
 [term 39:REDUCE(with prod 6)] [term 40:REDUCE(with prod 6)]
 [term 41:REDUCE(with prod 6)] [term 42:REDUCE(with prod 6)]
 [term 43:REDUCE(with prod 6)] [term 44:REDUCE(with prod 6)]
 [term 45:REDUCE(with prod 6)] [term 46:REDUCE(with prod 6)]
 [term 47:REDUCE(with prod 6)] [term 48:REDUCE(with prod 6)]
 [term 49:REDUCE(with prod 6)] [term 50:REDUCE(with prod 6)]
 [term 51:REDUCE(with prod 6)] [term 54:REDUCE(with prod 6)]
 [term 55:REDUCE(with prod 6)] [term 56:REDUCE(with prod 6)]
 [term 57:REDUCE(with prod 6)] [term 58:REDUCE(with prod 6)]
 [term 59:REDUCE(with prod 6)] [term 60:REDUCE(with prod 6)]
 [term 62:REDUCE(with prod 6)] [term 63:REDUCE(with prod 6)]
 [term 64:REDUCE(with prod 6)] [term 67:REDUCE(with prod 6)]
 [term 68:REDUCE(with prod 6)]
From state #173
 [term 63:REDUCE(with prod 63)]
From state #174
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #175
 [term 63:REDUCE(with prod 61)]
From state #176
 [term 0:REDUCE(with prod 231)] [term 10:SHIFT(to state 30)]
 [term 23:SHIFT(to state 25)] [term 32:SHIFT(to state 33)]
From state #177
 [term 0:REDUCE(with prod 230)]
From state #178
 [term 54:REDUCE(with prod 34)]
From state #179
 [term 54:SHIFT(to state 65)]
From state #180
 [term 63:REDUCE(with prod 36)]
From state #181
 [term 58:REDUCE(with prod 38)] [term 63:REDUCE(with prod 37)]
From state #182
 [term 63:REDUCE(with prod 35)]
From state #183
 [term 58:SHIFT(to state 184)]
From state #184
 [term 2:REDUCE(with prod 31)] [term 3:REDUCE(with prod 31)]
 [term 4:REDUCE(with prod 31)] [term 5:REDUCE(with prod 31)]
 [term 6:REDUCE(with prod 31)] [term 7:REDUCE(with prod 31)]
 [term 8:REDUCE(with prod 31)] [term 20:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 23:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 31:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 41:REDUCE(with prod 31)]
 [term 42:REDUCE(with prod 31)] [term 44:REDUCE(with prod 31)]
 [term 45:REDUCE(with prod 31)] [term 50:REDUCE(with prod 31)]
 [term 52:REDUCE(with prod 31)] [term 54:REDUCE(with prod 31)]
 [term 56:REDUCE(with prod 31)] [term 58:REDUCE(with prod 31)]
 [term 59:REDUCE(with prod 31)] [term 63:REDUCE(with prod 31)]
From state #185
 [term 63:REDUCE(with prod 39)]
From state #186
 [term 2:SHIFT(to state 194)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 8:SHIFT(to state 205)] [term 9:REDUCE(with prod 29)]
 [term 13:REDUCE(with prod 29)] [term 20:SHIFT(to state 206)]
 [term 22:SHIFT(to state 191)] [term 23:SHIFT(to state 25)]
 [term 25:SHIFT(to state 199)] [term 28:SHIFT(to state 212)]
 [term 29:SHIFT(to state 209)] [term 31:SHIFT(to state 202)]
 [term 32:SHIFT(to state 33)] [term 41:SHIFT(to state 86)]
 [term 42:SHIFT(to state 98)] [term 44:SHIFT(to state 99)]
 [term 45:SHIFT(to state 92)] [term 50:SHIFT(to state 94)]
 [term 52:SHIFT(to state 85)] [term 54:SHIFT(to state 91)]
 [term 56:SHIFT(to state 56)] [term 58:SHIFT(to state 200)]
 [term 59:REDUCE(with prod 29)] [term 63:REDUCE(with prod 153)]
From state #187
 [term 59:SHIFT(to state 188)]
From state #188
 [term 63:REDUCE(with prod 40)]
From state #189
 [term 63:REDUCE(with prod 142)]
From state #190
 [term 63:REDUCE(with prod 151)]
From state #191
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
 [term 58:SHIFT(to state 316)] [term 63:REDUCE(with prod 153)]
From state #192
 [term 63:REDUCE(with prod 145)]
From state #193
 [term 33:REDUCE(with prod 67)] [term 34:REDUCE(with prod 67)]
 [term 35:REDUCE(with prod 67)] [term 36:REDUCE(with prod 67)]
 [term 37:REDUCE(with prod 67)] [term 38:REDUCE(with prod 67)]
 [term 39:REDUCE(with prod 67)] [term 40:REDUCE(with prod 67)]
 [term 41:REDUCE(with prod 67)] [term 42:REDUCE(with prod 67)]
 [term 43:REDUCE(with prod 67)] [term 44:REDUCE(with prod 67)]
 [term 45:REDUCE(with prod 67)] [term 46:REDUCE(with prod 67)]
 [term 47:REDUCE(with prod 67)] [term 48:REDUCE(with prod 67)]
 [term 49:REDUCE(with prod 67)] [term 50:REDUCE(with prod 67)]
 [term 51:REDUCE(with prod 67)] [term 54:SHIFT(to state 312)]
 [term 56:REDUCE(with prod 67)] [term 58:REDUCE(with prod 67)]
 [term 60:REDUCE(with prod 67)] [term 62:REDUCE(with prod 67)]
 [term 63:REDUCE(with prod 67)] [term 64:REDUCE(with prod 67)]
 [term 68:REDUCE(with prod 67)]
From state #194
 [term 33:REDUCE(with prod 7)] [term 34:REDUCE(with prod 7)]
 [term 35:REDUCE(with prod 7)] [term 36:REDUCE(with prod 7)]
 [term 37:REDUCE(with prod 7)] [term 38:REDUCE(with prod 7)]
 [term 39:REDUCE(with prod 7)] [term 40:REDUCE(with prod 7)]
 [term 41:REDUCE(with prod 7)] [term 42:REDUCE(with prod 7)]
 [term 43:REDUCE(with prod 7)] [term 44:REDUCE(with prod 7)]
 [term 45:REDUCE(with prod 7)] [term 46:REDUCE(with prod 7)]
 [term 47:REDUCE(with prod 7)] [term 48:REDUCE(with prod 7)]
 [term 49:REDUCE(with prod 7)] [term 50:REDUCE(with prod 7)]
 [term 51:REDUCE(with prod 7)] [term 54:REDUCE(with prod 7)]
 [term 56:REDUCE(with prod 7)] [term 60:REDUCE(with prod 7)]
 [term 62:REDUCE(with prod 7)] [term 63:REDUCE(with prod 7)]
 [term 64:REDUCE(with prod 7)] [term 66:REDUCE(with prod 7)]
 [term 67:SHIFT(to state 309)] [term 68:REDUCE(with prod 7)]
From state #195
 [term 63:REDUCE(with prod 141)]
From state #196
 [term 19:SHIFT(to state 301)] [term 63:REDUCE(with prod 179)]
From state #197
 [term 58:SHIFT(to state 298)]
From state #198
 [term 63:REDUCE(with prod 180)]
From state #199
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
 [term 63:REDUCE(with prod 153)]
From state #200
 [term 2:REDUCE(with prod 27)] [term 3:REDUCE(with prod 27)]
 [term 4:REDUCE(with prod 27)] [term 5:REDUCE(with prod 27)]
 [term 6:REDUCE(with prod 27)] [term 7:REDUCE(with prod 27)]
 [term 8:REDUCE(with prod 27)] [term 20:REDUCE(with prod 27)]
 [term 22:REDUCE(with prod 27)] [term 23:REDUCE(with prod 27)]
 [term 25:REDUCE(with prod 27)] [term 28:REDUCE(with prod 27)]
 [term 29:REDUCE(with prod 27)] [term 31:REDUCE(with prod 27)]
 [term 32:REDUCE(with prod 27)] [term 41:REDUCE(with prod 27)]
 [term 42:REDUCE(with prod 27)] [term 44:REDUCE(with prod 27)]
 [term 45:REDUCE(with prod 27)] [term 50:REDUCE(with prod 27)]
 [term 52:REDUCE(with prod 27)] [term 54:REDUCE(with prod 27)]
 [term 56:REDUCE(with prod 27)] [term 58:REDUCE(with prod 27)]
 [term 59:REDUCE(with prod 27)] [term 63:REDUCE(with prod 27)]
From state #201
 [term 19:SHIFT(to state 275)] [term 63:REDUCE(with prod 173)]
From state #202
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
 [term 63:REDUCE(with prod 202)]
From state #203
 [term 2:SHIFT(to state 194)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 8:SHIFT(to state 205)] [term 20:SHIFT(to state 206)]
 [term 22:SHIFT(to state 191)] [term 23:SHIFT(to state 25)]
 [term 25:SHIFT(to state 199)] [term 28:SHIFT(to state 212)]
 [term 31:SHIFT(to state 202)] [term 32:SHIFT(to state 33)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
 [term 58:SHIFT(to state 200)] [term 63:REDUCE(with prod 153)]
From state #204
 [term 63:REDUCE(with prod 148)]
From state #205
 [term 2:SHIFT(to state 261)] [term 63:REDUCE(with prod 204)]
From state #206
 [term 2:SHIFT(to state 260)]
From state #207
 [term 63:REDUCE(with prod 150)]
From state #208
 [term 63:REDUCE(with prod 140)]
From state #209
 [term 2:REDUCE(with prod 189)] [term 3:REDUCE(with prod 189)]
 [term 4:REDUCE(with prod 189)] [term 5:REDUCE(with prod 189)]
 [term 6:REDUCE(with prod 189)] [term 7:REDUCE(with prod 189)]
 [term 41:REDUCE(with prod 189)] [term 42:REDUCE(with prod 189)]
 [term 44:REDUCE(with prod 189)] [term 45:REDUCE(with prod 189)]
 [term 50:REDUCE(with prod 189)] [term 52:REDUCE(with prod 189)]
 [term 54:REDUCE(with prod 189)] [term 56:REDUCE(with prod 189)]
 [term 58:REDUCE(with prod 193)] [term 63:REDUCE(with prod 189)]
From state #210
 [term 63:SHIFT(to state 243)]
From state #211
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 54)]
 [term 51:SHIFT(to state 108)] [term 58:REDUCE(with prod 157)]
 [term 60:SHIFT(to state 222)] [term 62:REDUCE(with prod 54)]
 [term 63:REDUCE(with prod 157)] [term 64:SHIFT(to state 221)]
 [term 68:REDUCE(with prod 54)]
From state #212
 [term 2:SHIFT(to state 219)] [term 63:REDUCE(with prod 222)]
From state #213
 [term 63:REDUCE(with prod 146)]
From state #214
 [term 63:REDUCE(with prod 139)]
From state #215
 [term 63:REDUCE(with prod 144)]
From state #216
 [term 63:REDUCE(with prod 149)]
From state #217
 [term 63:REDUCE(with prod 143)]
From state #218
 [term 63:REDUCE(with prod 147)]
From state #219
 [term 63:REDUCE(with prod 221)]
From state #220
 [term 41:SHIFT(to state 236)] [term 42:SHIFT(to state 226)]
 [term 43:SHIFT(to state 239)] [term 44:SHIFT(to state 235)]
 [term 45:SHIFT(to state 225)] [term 46:SHIFT(to state 238)]
 [term 47:SHIFT(to state 237)] [term 48:SHIFT(to state 232)]
 [term 49:SHIFT(to state 233)] [term 50:SHIFT(to state 228)]
 [term 51:SHIFT(to state 231)] [term 62:SHIFT(to state 140)]
 [term 68:REDUCE(with prod 163)]
From state #221
 [term 58:REDUCE(with prod 159)] [term 63:REDUCE(with prod 159)]
From state #222
 [term 58:REDUCE(with prod 158)] [term 63:REDUCE(with prod 158)]
From state #223
 [term 58:REDUCE(with prod 152)] [term 63:REDUCE(with prod 152)]
From state #224
 [term 58:REDUCE(with prod 155)] [term 63:REDUCE(with prod 155)]
From state #225
 [term 68:REDUCE(with prod 126)]
From state #226
 [term 68:REDUCE(with prod 123)]
From state #227
 [term 68:REDUCE(with prod 161)]
From state #228
 [term 68:REDUCE(with prod 131)]
From state #229
 [term 68:REDUCE(with prod 162)]
From state #230
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #231
 [term 68:REDUCE(with prod 132)]
From state #232
 [term 68:REDUCE(with prod 129)]
From state #233
 [term 68:REDUCE(with prod 130)]
From state #234
 [term 68:SHIFT(to state 240)]
From state #235
 [term 68:REDUCE(with prod 125)]
From state #236
 [term 68:REDUCE(with prod 122)]
From state #237
 [term 68:REDUCE(with prod 128)]
From state #238
 [term 68:REDUCE(with prod 127)]
From state #239
 [term 68:REDUCE(with prod 124)]
From state #240
 [term 2:REDUCE(with prod 160)] [term 3:REDUCE(with prod 160)]
 [term 4:REDUCE(with prod 160)] [term 5:REDUCE(with prod 160)]
 [term 6:REDUCE(with prod 160)] [term 7:REDUCE(with prod 160)]
 [term 41:REDUCE(with prod 160)] [term 42:REDUCE(with prod 160)]
 [term 44:REDUCE(with prod 160)] [term 45:REDUCE(with prod 160)]
 [term 50:REDUCE(with prod 160)] [term 52:REDUCE(with prod 160)]
 [term 54:REDUCE(with prod 160)] [term 56:REDUCE(with prod 160)]
From state #241
 [term 58:REDUCE(with prod 156)] [term 63:REDUCE(with prod 156)]
From state #242
 [term 58:REDUCE(with prod 154)] [term 63:REDUCE(with prod 154)]
From state #243
 [term 2:REDUCE(with prod 30)] [term 3:REDUCE(with prod 30)]
 [term 4:REDUCE(with prod 30)] [term 5:REDUCE(with prod 30)]
 [term 6:REDUCE(with prod 30)] [term 7:REDUCE(with prod 30)]
 [term 8:REDUCE(with prod 30)] [term 9:REDUCE(with prod 30)]
 [term 13:REDUCE(with prod 30)] [term 20:REDUCE(with prod 30)]
 [term 22:REDUCE(with prod 30)] [term 23:REDUCE(with prod 30)]
 [term 25:REDUCE(with prod 30)] [term 28:REDUCE(with prod 30)]
 [term 29:REDUCE(with prod 30)] [term 31:REDUCE(with prod 30)]
 [term 32:REDUCE(with prod 30)] [term 41:REDUCE(with prod 30)]
 [term 42:REDUCE(with prod 30)] [term 44:REDUCE(with prod 30)]
 [term 45:REDUCE(with prod 30)] [term 50:REDUCE(with prod 30)]
 [term 52:REDUCE(with prod 30)] [term 54:REDUCE(with prod 30)]
 [term 56:REDUCE(with prod 30)] [term 58:REDUCE(with prod 30)]
 [term 59:REDUCE(with prod 30)] [term 63:REDUCE(with prod 30)]
From state #244
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
 [term 63:REDUCE(with prod 153)]
From state #245
 [term 58:REDUCE(with prod 195)]
From state #246
 [term 58:REDUCE(with prod 190)]
From state #247
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
 [term 63:REDUCE(with prod 200)]
From state #248
 [term 63:SHIFT(to state 250)]
From state #249
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 54)]
 [term 51:SHIFT(to state 108)] [term 58:REDUCE(with prod 194)]
 [term 60:SHIFT(to state 222)] [term 62:REDUCE(with prod 54)]
 [term 63:REDUCE(with prod 157)] [term 64:SHIFT(to state 221)]
 [term 68:REDUCE(with prod 54)]
From state #250
 [term 2:REDUCE(with prod 198)] [term 3:REDUCE(with prod 198)]
 [term 4:REDUCE(with prod 198)] [term 5:REDUCE(with prod 198)]
 [term 6:REDUCE(with prod 198)] [term 7:REDUCE(with prod 198)]
 [term 41:REDUCE(with prod 198)] [term 42:REDUCE(with prod 198)]
 [term 44:REDUCE(with prod 198)] [term 45:REDUCE(with prod 198)]
 [term 50:REDUCE(with prod 198)] [term 52:REDUCE(with prod 198)]
 [term 54:REDUCE(with prod 198)] [term 56:REDUCE(with prod 198)]
 [term 63:REDUCE(with prod 198)]
From state #251
 [term 63:SHIFT(to state 253)]
From state #252
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 51:SHIFT(to state 108)]
 [term 63:REDUCE(with prod 199)]
From state #253
 [term 2:REDUCE(with prod 196)] [term 3:REDUCE(with prod 196)]
 [term 4:REDUCE(with prod 196)] [term 5:REDUCE(with prod 196)]
 [term 6:REDUCE(with prod 196)] [term 7:REDUCE(with prod 196)]
 [term 41:REDUCE(with prod 196)] [term 42:REDUCE(with prod 196)]
 [term 44:REDUCE(with prod 196)] [term 45:REDUCE(with prod 196)]
 [term 50:REDUCE(with prod 196)] [term 52:REDUCE(with prod 196)]
 [term 54:REDUCE(with prod 196)] [term 56:REDUCE(with prod 196)]
 [term 58:REDUCE(with prod 196)]
From state #254
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
 [term 58:REDUCE(with prod 153)]
From state #255
 [term 58:REDUCE(with prod 197)]
From state #256
 [term 58:SHIFT(to state 257)]
From state #257
 [term 2:REDUCE(with prod 31)] [term 3:REDUCE(with prod 31)]
 [term 4:REDUCE(with prod 31)] [term 5:REDUCE(with prod 31)]
 [term 6:REDUCE(with prod 31)] [term 7:REDUCE(with prod 31)]
 [term 8:REDUCE(with prod 31)] [term 20:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 23:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 31:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 41:REDUCE(with prod 31)]
 [term 42:REDUCE(with prod 31)] [term 44:REDUCE(with prod 31)]
 [term 45:REDUCE(with prod 31)] [term 50:REDUCE(with prod 31)]
 [term 52:REDUCE(with prod 31)] [term 54:REDUCE(with prod 31)]
 [term 56:REDUCE(with prod 31)] [term 58:REDUCE(with prod 31)]
 [term 59:REDUCE(with prod 31)] [term 63:REDUCE(with prod 31)]
From state #258
 [term 59:SHIFT(to state 259)]
From state #259
 [term 63:REDUCE(with prod 191)]
From state #260
 [term 63:REDUCE(with prod 220)]
From state #261
 [term 63:REDUCE(with prod 203)]
From state #262
 [term 63:REDUCE(with prod 209)]
From state #263
 [term 63:REDUCE(with prod 212)]
From state #264
 [term 63:REDUCE(with prod 208)]
From state #265
 [term 63:REDUCE(with prod 215)]
From state #266
 [term 63:REDUCE(with prod 217)]
From state #267
 [term 63:REDUCE(with prod 207)]
From state #268
 [term 63:REDUCE(with prod 213)]
From state #269
 [term 63:REDUCE(with prod 206)]
From state #270
 [term 63:REDUCE(with prod 216)]
From state #271
 [term 63:REDUCE(with prod 211)]
From state #272
 [term 63:REDUCE(with prod 210)]
From state #273
 [term 63:REDUCE(with prod 214)]
From state #274
 [term 63:REDUCE(with prod 201)]
From state #275
 [term 25:REDUCE(with prod 168)] [term 58:REDUCE(with prod 170)]
From state #276
 [term 58:SHIFT(to state 279)]
From state #277
 [term 25:SHIFT(to state 199)]
From state #278
 [term 63:REDUCE(with prod 169)]
From state #279
 [term 2:REDUCE(with prod 171)] [term 3:REDUCE(with prod 171)]
 [term 4:REDUCE(with prod 171)] [term 5:REDUCE(with prod 171)]
 [term 6:REDUCE(with prod 171)] [term 7:REDUCE(with prod 171)]
 [term 8:REDUCE(with prod 171)] [term 20:REDUCE(with prod 171)]
 [term 22:REDUCE(with prod 171)] [term 23:REDUCE(with prod 171)]
 [term 25:REDUCE(with prod 171)] [term 28:REDUCE(with prod 171)]
 [term 29:REDUCE(with prod 171)] [term 31:REDUCE(with prod 171)]
 [term 32:REDUCE(with prod 171)] [term 41:REDUCE(with prod 171)]
 [term 42:REDUCE(with prod 171)] [term 44:REDUCE(with prod 171)]
 [term 45:REDUCE(with prod 171)] [term 50:REDUCE(with prod 171)]
 [term 52:REDUCE(with prod 171)] [term 54:REDUCE(with prod 171)]
 [term 56:REDUCE(with prod 171)] [term 58:REDUCE(with prod 171)]
 [term 59:REDUCE(with prod 171)] [term 63:REDUCE(with prod 171)]
From state #280
 [term 2:REDUCE(with prod 31)] [term 3:REDUCE(with prod 31)]
 [term 4:REDUCE(with prod 31)] [term 5:REDUCE(with prod 31)]
 [term 6:REDUCE(with prod 31)] [term 7:REDUCE(with prod 31)]
 [term 8:REDUCE(with prod 31)] [term 20:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 23:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 31:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 41:REDUCE(with prod 31)]
 [term 42:REDUCE(with prod 31)] [term 44:REDUCE(with prod 31)]
 [term 45:REDUCE(with prod 31)] [term 50:REDUCE(with prod 31)]
 [term 52:REDUCE(with prod 31)] [term 54:REDUCE(with prod 31)]
 [term 56:REDUCE(with prod 31)] [term 58:REDUCE(with prod 31)]
 [term 59:REDUCE(with prod 31)] [term 63:REDUCE(with prod 31)]
From state #281
 [term 59:SHIFT(to state 282)]
From state #282
 [term 63:REDUCE(with prod 172)]
From state #283
 [term 2:REDUCE(with prod 31)] [term 3:REDUCE(with prod 31)]
 [term 4:REDUCE(with prod 31)] [term 5:REDUCE(with prod 31)]
 [term 6:REDUCE(with prod 31)] [term 7:REDUCE(with prod 31)]
 [term 8:REDUCE(with prod 31)] [term 20:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 23:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 31:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 41:REDUCE(with prod 31)]
 [term 42:REDUCE(with prod 31)] [term 44:REDUCE(with prod 31)]
 [term 45:REDUCE(with prod 31)] [term 50:REDUCE(with prod 31)]
 [term 52:REDUCE(with prod 31)] [term 54:REDUCE(with prod 31)]
 [term 56:REDUCE(with prod 31)] [term 58:REDUCE(with prod 31)]
 [term 59:REDUCE(with prod 31)] [term 63:REDUCE(with prod 31)]
From state #284
 [term 59:SHIFT(to state 285)]
From state #285
 [term 63:REDUCE(with prod 28)]
From state #286
 [term 63:SHIFT(to state 292)]
From state #287
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 54)]
 [term 51:SHIFT(to state 108)] [term 58:REDUCE(with prod 164)]
 [term 60:SHIFT(to state 222)] [term 62:REDUCE(with prod 54)]
 [term 63:REDUCE(with prod 157)] [term 64:SHIFT(to state 221)]
 [term 68:REDUCE(with prod 54)]
From state #288
 [term 58:SHIFT(to state 289)]
From state #289
 [term 2:REDUCE(with prod 31)] [term 3:REDUCE(with prod 31)]
 [term 4:REDUCE(with prod 31)] [term 5:REDUCE(with prod 31)]
 [term 6:REDUCE(with prod 31)] [term 7:REDUCE(with prod 31)]
 [term 8:REDUCE(with prod 31)] [term 20:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 23:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 31:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 41:REDUCE(with prod 31)]
 [term 42:REDUCE(with prod 31)] [term 44:REDUCE(with prod 31)]
 [term 45:REDUCE(with prod 31)] [term 50:REDUCE(with prod 31)]
 [term 52:REDUCE(with prod 31)] [term 54:REDUCE(with prod 31)]
 [term 56:REDUCE(with prod 31)] [term 58:REDUCE(with prod 31)]
 [term 59:REDUCE(with prod 31)] [term 63:REDUCE(with prod 31)]
From state #290
 [term 59:SHIFT(to state 291)]
From state #291
 [term 19:REDUCE(with prod 165)] [term 63:REDUCE(with prod 165)]
From state #292
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #293
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 51:SHIFT(to state 108)]
 [term 58:REDUCE(with prod 166)]
From state #294
 [term 58:SHIFT(to state 295)]
From state #295
 [term 2:REDUCE(with prod 31)] [term 3:REDUCE(with prod 31)]
 [term 4:REDUCE(with prod 31)] [term 5:REDUCE(with prod 31)]
 [term 6:REDUCE(with prod 31)] [term 7:REDUCE(with prod 31)]
 [term 8:REDUCE(with prod 31)] [term 20:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 23:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 31:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 41:REDUCE(with prod 31)]
 [term 42:REDUCE(with prod 31)] [term 44:REDUCE(with prod 31)]
 [term 45:REDUCE(with prod 31)] [term 50:REDUCE(with prod 31)]
 [term 52:REDUCE(with prod 31)] [term 54:REDUCE(with prod 31)]
 [term 56:REDUCE(with prod 31)] [term 58:REDUCE(with prod 31)]
 [term 59:REDUCE(with prod 31)] [term 63:REDUCE(with prod 31)]
From state #296
 [term 59:SHIFT(to state 297)]
From state #297
 [term 19:REDUCE(with prod 167)] [term 63:REDUCE(with prod 167)]
From state #298
 [term 2:REDUCE(with prod 31)] [term 3:REDUCE(with prod 31)]
 [term 4:REDUCE(with prod 31)] [term 5:REDUCE(with prod 31)]
 [term 6:REDUCE(with prod 31)] [term 7:REDUCE(with prod 31)]
 [term 8:REDUCE(with prod 31)] [term 20:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 23:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 31:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 41:REDUCE(with prod 31)]
 [term 42:REDUCE(with prod 31)] [term 44:REDUCE(with prod 31)]
 [term 45:REDUCE(with prod 31)] [term 50:REDUCE(with prod 31)]
 [term 52:REDUCE(with prod 31)] [term 54:REDUCE(with prod 31)]
 [term 56:REDUCE(with prod 31)] [term 58:REDUCE(with prod 31)]
 [term 59:REDUCE(with prod 31)] [term 63:REDUCE(with prod 31)]
From state #299
 [term 59:SHIFT(to state 300)]
From state #300
 [term 63:REDUCE(with prod 192)]
From state #301
 [term 25:REDUCE(with prod 174)] [term 58:REDUCE(with prod 176)]
From state #302
 [term 25:SHIFT(to state 199)]
From state #303
 [term 58:SHIFT(to state 304)]
From state #304
 [term 2:REDUCE(with prod 177)] [term 3:REDUCE(with prod 177)]
 [term 4:REDUCE(with prod 177)] [term 5:REDUCE(with prod 177)]
 [term 6:REDUCE(with prod 177)] [term 7:REDUCE(with prod 177)]
 [term 8:REDUCE(with prod 177)] [term 20:REDUCE(with prod 177)]
 [term 22:REDUCE(with prod 177)] [term 23:REDUCE(with prod 177)]
 [term 25:REDUCE(with prod 177)] [term 28:REDUCE(with prod 177)]
 [term 29:REDUCE(with prod 177)] [term 31:REDUCE(with prod 177)]
 [term 32:REDUCE(with prod 177)] [term 41:REDUCE(with prod 177)]
 [term 42:REDUCE(with prod 177)] [term 44:REDUCE(with prod 177)]
 [term 45:REDUCE(with prod 177)] [term 50:REDUCE(with prod 177)]
 [term 52:REDUCE(with prod 177)] [term 54:REDUCE(with prod 177)]
 [term 56:REDUCE(with prod 177)] [term 58:REDUCE(with prod 177)]
 [term 59:REDUCE(with prod 177)] [term 63:REDUCE(with prod 177)]
From state #305
 [term 2:REDUCE(with prod 31)] [term 3:REDUCE(with prod 31)]
 [term 4:REDUCE(with prod 31)] [term 5:REDUCE(with prod 31)]
 [term 6:REDUCE(with prod 31)] [term 7:REDUCE(with prod 31)]
 [term 8:REDUCE(with prod 31)] [term 20:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 23:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 31:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 41:REDUCE(with prod 31)]
 [term 42:REDUCE(with prod 31)] [term 44:REDUCE(with prod 31)]
 [term 45:REDUCE(with prod 31)] [term 50:REDUCE(with prod 31)]
 [term 52:REDUCE(with prod 31)] [term 54:REDUCE(with prod 31)]
 [term 56:REDUCE(with prod 31)] [term 58:REDUCE(with prod 31)]
 [term 59:REDUCE(with prod 31)] [term 63:REDUCE(with prod 31)]
From state #306
 [term 59:SHIFT(to state 307)]
From state #307
 [term 63:REDUCE(with prod 178)]
From state #308
 [term 63:REDUCE(with prod 175)]
From state #309
 [term 2:REDUCE(with prod 205)] [term 3:REDUCE(with prod 205)]
 [term 4:REDUCE(with prod 205)] [term 5:REDUCE(with prod 205)]
 [term 6:REDUCE(with prod 205)] [term 7:REDUCE(with prod 205)]
 [term 8:REDUCE(with prod 205)] [term 20:REDUCE(with prod 205)]
 [term 22:REDUCE(with prod 205)] [term 23:REDUCE(with prod 205)]
 [term 25:REDUCE(with prod 205)] [term 28:REDUCE(with prod 205)]
 [term 29:REDUCE(with prod 218)] [term 31:REDUCE(with prod 205)]
 [term 32:REDUCE(with prod 205)] [term 41:REDUCE(with prod 205)]
 [term 42:REDUCE(with prod 205)] [term 44:REDUCE(with prod 205)]
 [term 45:REDUCE(with prod 205)] [term 50:REDUCE(with prod 205)]
 [term 52:REDUCE(with prod 205)] [term 54:REDUCE(with prod 205)]
 [term 56:REDUCE(with prod 205)] [term 58:REDUCE(with prod 205)]
 [term 63:REDUCE(with prod 205)]
From state #310
 [term 29:SHIFT(to state 209)]
From state #311
 [term 63:REDUCE(with prod 219)]
From state #312
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 55:SHIFT(to state 313)]
 [term 56:SHIFT(to state 56)]
From state #313
 [term 58:REDUCE(with prod 14)] [term 63:REDUCE(with prod 14)]
From state #314
 [term 55:SHIFT(to state 315)]
From state #315
 [term 58:REDUCE(with prod 15)] [term 63:REDUCE(with prod 15)]
From state #316
 [term 9:REDUCE(with prod 186)] [term 13:REDUCE(with prod 186)]
 [term 59:REDUCE(with prod 186)]
From state #317
 [term 63:SHIFT(to state 330)]
From state #318
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 50:REDUCE(with prod 54)]
 [term 51:SHIFT(to state 108)] [term 58:SHIFT(to state 319)]
 [term 60:SHIFT(to state 222)] [term 62:REDUCE(with prod 54)]
 [term 63:REDUCE(with prod 157)] [term 64:SHIFT(to state 221)]
 [term 68:REDUCE(with prod 54)]
From state #319
 [term 9:REDUCE(with prod 186)] [term 13:REDUCE(with prod 186)]
 [term 59:REDUCE(with prod 186)]
From state #320
 [term 9:SHIFT(to state 321)] [term 13:SHIFT(to state 323)]
 [term 59:SHIFT(to state 324)]
From state #321
 [term 67:SHIFT(to state 328)]
From state #322
 [term 9:REDUCE(with prod 185)] [term 13:REDUCE(with prod 185)]
 [term 59:REDUCE(with prod 185)]
From state #323
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #324
 [term 63:REDUCE(with prod 182)]
From state #325
 [term 67:SHIFT(to state 326)]
From state #326
 [term 2:REDUCE(with prod 31)] [term 3:REDUCE(with prod 31)]
 [term 4:REDUCE(with prod 31)] [term 5:REDUCE(with prod 31)]
 [term 6:REDUCE(with prod 31)] [term 7:REDUCE(with prod 31)]
 [term 8:REDUCE(with prod 31)] [term 9:REDUCE(with prod 31)]
 [term 13:REDUCE(with prod 31)] [term 20:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 23:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 31:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 41:REDUCE(with prod 31)]
 [term 42:REDUCE(with prod 31)] [term 44:REDUCE(with prod 31)]
 [term 45:REDUCE(with prod 31)] [term 50:REDUCE(with prod 31)]
 [term 52:REDUCE(with prod 31)] [term 54:REDUCE(with prod 31)]
 [term 56:REDUCE(with prod 31)] [term 58:REDUCE(with prod 31)]
 [term 59:REDUCE(with prod 31)] [term 63:REDUCE(with prod 31)]
From state #327
 [term 9:REDUCE(with prod 187)] [term 13:REDUCE(with prod 187)]
 [term 59:REDUCE(with prod 187)]
From state #328
 [term 2:REDUCE(with prod 31)] [term 3:REDUCE(with prod 31)]
 [term 4:REDUCE(with prod 31)] [term 5:REDUCE(with prod 31)]
 [term 6:REDUCE(with prod 31)] [term 7:REDUCE(with prod 31)]
 [term 8:REDUCE(with prod 31)] [term 9:REDUCE(with prod 31)]
 [term 13:REDUCE(with prod 31)] [term 20:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 23:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 31:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 41:REDUCE(with prod 31)]
 [term 42:REDUCE(with prod 31)] [term 44:REDUCE(with prod 31)]
 [term 45:REDUCE(with prod 31)] [term 50:REDUCE(with prod 31)]
 [term 52:REDUCE(with prod 31)] [term 54:REDUCE(with prod 31)]
 [term 56:REDUCE(with prod 31)] [term 58:REDUCE(with prod 31)]
 [term 59:REDUCE(with prod 31)] [term 63:REDUCE(with prod 31)]
From state #329
 [term 9:REDUCE(with prod 188)] [term 13:REDUCE(with prod 188)]
 [term 59:REDUCE(with prod 188)]
From state #330
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
 [term 58:SHIFT(to state 331)]
From state #331
 [term 9:REDUCE(with prod 186)] [term 13:REDUCE(with prod 186)]
 [term 59:REDUCE(with prod 186)]
From state #332
 [term 33:SHIFT(to state 109)] [term 34:SHIFT(to state 112)]
 [term 35:SHIFT(to state 118)] [term 36:SHIFT(to state 116)]
 [term 37:SHIFT(to state 119)] [term 38:SHIFT(to state 106)]
 [term 39:SHIFT(to state 114)] [term 40:SHIFT(to state 104)]
 [term 41:SHIFT(to state 107)] [term 42:SHIFT(to state 120)]
 [term 43:SHIFT(to state 117)] [term 44:SHIFT(to state 121)]
 [term 45:SHIFT(to state 113)] [term 46:SHIFT(to state 110)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 111)]
 [term 49:SHIFT(to state 122)] [term 51:SHIFT(to state 108)]
 [term 58:SHIFT(to state 333)]
From state #333
 [term 9:REDUCE(with prod 186)] [term 13:REDUCE(with prod 186)]
 [term 59:REDUCE(with prod 186)]
From state #334
 [term 9:SHIFT(to state 321)] [term 13:SHIFT(to state 323)]
 [term 59:SHIFT(to state 335)]
From state #335
 [term 63:REDUCE(with prod 181)]
From state #336
 [term 9:SHIFT(to state 321)] [term 13:SHIFT(to state 323)]
 [term 59:SHIFT(to state 337)]
From state #337
 [term 63:REDUCE(with prod 184)]
From state #338
 [term 9:SHIFT(to state 321)] [term 13:SHIFT(to state 323)]
 [term 59:SHIFT(to state 339)]
From state #339
 [term 63:REDUCE(with prod 183)]
From state #340
 [term 63:REDUCE(with prod 43)]
From state #341
 [term 2:SHIFT(to state 57)] [term 10:SHIFT(to state 60)]
 [term 45:SHIFT(to state 50)] [term 54:SHIFT(to state 52)]
 [term 56:SHIFT(to state 56)]
From state #342
 [term 63:REDUCE(with prod 46)]
From state #343
 [term 2:REDUCE(with prod 45)] [term 55:REDUCE(with prod 45)]
From state #344
 [term 2:SHIFT(to state 36)] [term 55:SHIFT(to state 346)]
From state #345
 [term 63:SHIFT(to state 347)]
From state #346
 [term 63:REDUCE(with prod 47)]
From state #347
 [term 2:REDUCE(with prod 44)] [term 55:REDUCE(with prod 44)]
From state #348
 [term 68:SHIFT(to state 349)]
From state #349
 [term 2:SHIFT(to state 57)] [term 3:SHIFT(to state 101)]
 [term 4:SHIFT(to state 83)] [term 5:SHIFT(to state 87)]
 [term 6:SHIFT(to state 96)] [term 7:SHIFT(to state 84)]
 [term 41:SHIFT(to state 86)] [term 42:SHIFT(to state 98)]
 [term 44:SHIFT(to state 99)] [term 45:SHIFT(to state 92)]
 [term 50:SHIFT(to state 94)] [term 52:SHIFT(to state 85)]
 [term 54:SHIFT(to state 91)] [term 56:SHIFT(to state 56)]
From state #350
 [term 63:REDUCE(with prod 48)]
From state #351
 [term 0:REDUCE(with prod 228)] [term 10:REDUCE(with prod 228)]
 [term 23:REDUCE(with prod 228)] [term 30:SHIFT(to state 10)]
 [term 32:REDUCE(with prod 228)]
From state #352
 [term 0:REDUCE(with prod 227)] [term 10:REDUCE(with prod 227)]
 [term 23:REDUCE(with prod 227)] [term 32:REDUCE(with prod 227)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 118->state 2] [non term 229->state 1]
From state #1
 [non term 119->state 4]
From state #2
From state #3
From state #4
From state #5
From state #6
From state #7
 [non term 120->state 8] [non term 192->state 9] [non term 199->state 11]
From state #8
From state #9
 [non term 230->state 24]
From state #10
 [non term 121->state 15] [non term 195->state 14]
From state #11
From state #12
From state #13
From state #14
From state #15
From state #16
From state #17
 [non term 194->state 18]
From state #18
 [non term 121->state 19]
From state #19
From state #20
From state #21
From state #22
From state #23
From state #24
 [non term 37->state 28] [non term 38->state 34] [non term 40->state 29]
 [non term 41->state 31] [non term 42->state 32] [non term 193->state 27]
 [non term 200->state 26]
From state #25
 [non term 22->state 341] [non term 44->state 342] [non term 137->state 340]
From state #26
From state #27
From state #28
From state #29
From state #30
From state #31
From state #32
From state #33
 [non term 22->state 35] [non term 47->state 37] [non term 145->state 38]
From state #34
From state #35
 [non term 6->state 48] [non term 7->state 55] [non term 8->state 58]
 [non term 10->state 61] [non term 12->state 54] [non term 13->state 62]
 [non term 147->state 53] [non term 206->state 51] [non term 207->state 49]
From state #36
 [non term 140->state 45]
From state #37
From state #38
From state #39
 [non term 144->state 40]
From state #40
 [non term 22->state 35] [non term 47->state 41]
From state #41
From state #42
From state #43
From state #44
From state #45
From state #46
 [non term 140->state 47]
From state #47
From state #48
 [non term 146->state 173]
From state #49
From state #50
 [non term 6->state 170] [non term 7->state 55] [non term 8->state 58]
 [non term 10->state 61] [non term 12->state 54] [non term 13->state 62]
 [non term 206->state 51] [non term 207->state 49]
From state #51
From state #52
 [non term 6->state 169] [non term 7->state 55] [non term 8->state 58]
 [non term 10->state 61] [non term 12->state 54] [non term 13->state 62]
 [non term 206->state 51] [non term 207->state 49]
From state #53
From state #54
From state #55
From state #56
 [non term 18->state 165]
From state #57
From state #58
From state #59
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 100] [non term 45->state 97] [non term 53->state 88]
 [non term 56->state 93] [non term 69->state 90] [non term 77->state 82]
 [non term 206->state 51] [non term 207->state 49]
From state #60
 [non term 23->state 63] [non term 25->state 64]
From state #61
From state #62
From state #63
From state #64
 [non term 6->state 77] [non term 7->state 55] [non term 8->state 58]
 [non term 10->state 61] [non term 12->state 54] [non term 13->state 62]
 [non term 25->state 79] [non term 206->state 51] [non term 207->state 49]
From state #65
 [non term 6->state 66] [non term 7->state 55] [non term 8->state 58]
 [non term 10->state 61] [non term 12->state 54] [non term 13->state 62]
 [non term 22->state 67] [non term 26->state 68] [non term 27->state 69]
 [non term 206->state 51] [non term 207->state 49]
From state #66
From state #67
 [non term 6->state 76] [non term 7->state 55] [non term 8->state 58]
 [non term 10->state 61] [non term 12->state 54] [non term 13->state 62]
 [non term 206->state 51] [non term 207->state 49]
From state #68
From state #69
 [non term 130->state 72]
From state #70
 [non term 140->state 45]
From state #71
From state #72
From state #73
 [non term 6->state 66] [non term 7->state 55] [non term 8->state 58]
 [non term 10->state 61] [non term 12->state 54] [non term 13->state 62]
 [non term 22->state 67] [non term 27->state 74] [non term 206->state 51]
 [non term 207->state 49]
From state #74
From state #75
From state #76
From state #77
From state #78
 [non term 6->state 80] [non term 7->state 55] [non term 8->state 58]
 [non term 10->state 61] [non term 12->state 54] [non term 13->state 62]
 [non term 22->state 67] [non term 26->state 68] [non term 27->state 69]
 [non term 206->state 51] [non term 207->state 49]
From state #79
From state #80
From state #81
From state #82
From state #83
From state #84
From state #85
From state #86
From state #87
From state #88
From state #89
From state #90
 [non term 72->state 162]
From state #91
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 159] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #92
From state #93
From state #94
From state #95
 [non term 62->state 144]
From state #96
From state #97
From state #98
From state #99
From state #100
 [non term 141->state 105]
From state #101
From state #102
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 53->state 88] [non term 56->state 93] [non term 69->state 90]
 [non term 77->state 103] [non term 206->state 51] [non term 207->state 49]
From state #103
From state #104
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 142] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #105
From state #106
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 139] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #107
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 138] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #108
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 137] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #109
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 136] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #110
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 135] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #111
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 134] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #112
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 133] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #113
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 132] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #114
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 131] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #115
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 130] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #116
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 129] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #117
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 128] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #118
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 127] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #119
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 126] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #120
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 125] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #121
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 124] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #122
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 123] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #123
From state #124
From state #125
From state #126
From state #127
From state #128
From state #129
From state #130
From state #131
From state #132
From state #133
From state #134
From state #135
From state #136
From state #137
From state #138
From state #139
From state #140
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 141] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #141
From state #142
From state #143
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 149] [non term 53->state 88] [non term 56->state 93]
 [non term 62->state 146] [non term 63->state 147] [non term 64->state 145]
 [non term 66->state 148] [non term 69->state 90] [non term 77->state 82]
 [non term 151->state 150] [non term 206->state 51] [non term 207->state 49]
From state #144
From state #145
 [non term 153->state 156]
From state #146
From state #147
 [non term 216->state 153]
From state #148
From state #149
From state #150
 [non term 215->state 151]
From state #151
From state #152
From state #153
 [non term 150->state 155]
From state #154
From state #155
From state #156
From state #157
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 149] [non term 53->state 88] [non term 56->state 93]
 [non term 62->state 146] [non term 64->state 158] [non term 66->state 148]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #158
From state #159
From state #160
From state #161
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 163] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #162
From state #163
From state #164
From state #165
From state #166
From state #167
 [non term 6->state 168] [non term 7->state 55] [non term 8->state 58]
 [non term 10->state 61] [non term 12->state 54] [non term 13->state 62]
 [non term 206->state 51] [non term 207->state 49]
From state #168
From state #169
From state #170
From state #171
From state #172
From state #173
From state #174
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 100] [non term 45->state 175] [non term 53->state 88]
 [non term 56->state 93] [non term 69->state 90] [non term 77->state 82]
 [non term 206->state 51] [non term 207->state 49]
From state #175
From state #176
 [non term 37->state 28] [non term 38->state 34] [non term 40->state 29]
 [non term 41->state 31] [non term 42->state 32] [non term 200->state 177]
From state #177
From state #178
 [non term 213->state 179]
From state #179
 [non term 23->state 181] [non term 25->state 64] [non term 50->state 180]
 [non term 148->state 182]
From state #180
From state #181
 [non term 214->state 183]
From state #182
From state #183
 [non term 51->state 185]
From state #184
 [non term 32->state 187] [non term 135->state 186]
From state #185
From state #186
 [non term 1->state 102] [non term 7->state 193] [non term 10->state 95]
 [non term 19->state 211] [non term 33->state 210] [non term 34->state 218]
 [non term 37->state 214] [non term 38->state 34] [non term 40->state 29]
 [non term 53->state 88] [non term 56->state 93] [non term 69->state 90]
 [non term 77->state 82] [non term 78->state 213] [non term 79->state 207]
 [non term 80->state 208] [non term 82->state 189] [non term 83->state 217]
 [non term 84->state 215] [non term 85->state 192] [non term 87->state 216]
 [non term 90->state 190] [non term 91->state 204] [non term 92->state 196]
 [non term 93->state 201] [non term 99->state 203] [non term 101->state 198]
 [non term 180->state 197] [non term 206->state 51] [non term 207->state 49]
 [non term 208->state 195]
From state #187
From state #188
From state #189
From state #190
From state #191
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 318] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 80->state 317]
 [non term 206->state 51] [non term 207->state 49]
From state #192
From state #193
From state #194
From state #195
From state #196
From state #197
From state #198
From state #199
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 287] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 80->state 286]
 [non term 206->state 51] [non term 207->state 49]
From state #200
 [non term 212->state 283]
From state #201
From state #202
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 100] [non term 45->state 274] [non term 53->state 88]
 [non term 56->state 93] [non term 69->state 90] [non term 77->state 82]
 [non term 206->state 51] [non term 207->state 49]
From state #203
 [non term 1->state 102] [non term 7->state 193] [non term 10->state 95]
 [non term 19->state 211] [non term 34->state 273] [non term 37->state 269]
 [non term 38->state 34] [non term 40->state 29] [non term 53->state 88]
 [non term 56->state 93] [non term 69->state 90] [non term 77->state 82]
 [non term 78->state 268] [non term 79->state 266] [non term 80->state 267]
 [non term 82->state 262] [non term 83->state 272] [non term 84->state 271]
 [non term 85->state 263] [non term 87->state 270] [non term 91->state 265]
 [non term 92->state 196] [non term 93->state 201] [non term 99->state 203]
 [non term 101->state 198] [non term 206->state 51] [non term 207->state 49]
 [non term 208->state 264]
From state #204
From state #205
From state #206
From state #207
From state #208
From state #209
 [non term 225->state 244]
From state #210
From state #211
 [non term 141->state 220] [non term 163->state 224] [non term 205->state 223]
From state #212
From state #213
From state #214
From state #215
From state #216
From state #217
From state #218
From state #219
From state #220
 [non term 3->state 227] [non term 4->state 229] [non term 5->state 230]
 [non term 164->state 234]
From state #221
From state #222
From state #223
From state #224
From state #225
From state #226
From state #227
From state #228
From state #229
From state #230
 [non term 1->state 102] [non term 7->state 193] [non term 10->state 95]
 [non term 19->state 100] [non term 45->state 242] [non term 53->state 88]
 [non term 56->state 93] [non term 69->state 90] [non term 77->state 82]
 [non term 206->state 51] [non term 207->state 49] [non term 208->state 241]
From state #231
From state #232
From state #233
From state #234
From state #235
From state #236
From state #237
From state #238
From state #239
From state #240
From state #241
From state #242
From state #243
From state #244
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 249] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 80->state 248]
 [non term 110->state 245] [non term 179->state 246] [non term 206->state 51]
 [non term 207->state 49] [non term 210->state 247]
From state #245
From state #246
 [non term 226->state 256]
From state #247
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 252] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 183->state 251]
 [non term 206->state 51] [non term 207->state 49]
From state #248
From state #249
 [non term 141->state 220] [non term 163->state 224] [non term 205->state 223]
From state #250
From state #251
From state #252
From state #253
 [non term 227->state 254]
From state #254
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 211] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 80->state 255]
 [non term 206->state 51] [non term 207->state 49]
From state #255
From state #256
From state #257
 [non term 32->state 258] [non term 135->state 186]
From state #258
From state #259
From state #260
From state #261
From state #262
From state #263
From state #264
From state #265
From state #266
From state #267
From state #268
From state #269
From state #270
From state #271
From state #272
From state #273
From state #274
From state #275
 [non term 219->state 277] [non term 220->state 276]
From state #276
From state #277
 [non term 91->state 278] [non term 92->state 196] [non term 93->state 201]
From state #278
From state #279
 [non term 221->state 280]
From state #280
 [non term 32->state 281] [non term 135->state 186]
From state #281
From state #282
From state #283
 [non term 32->state 284] [non term 135->state 186]
From state #284
From state #285
From state #286
From state #287
 [non term 141->state 220] [non term 163->state 224] [non term 205->state 223]
 [non term 217->state 288]
From state #288
From state #289
 [non term 32->state 290] [non term 135->state 186]
From state #290
From state #291
From state #292
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 293] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #293
 [non term 218->state 294]
From state #294
From state #295
 [non term 32->state 296] [non term 135->state 186]
From state #296
From state #297
From state #298
 [non term 32->state 299] [non term 135->state 186]
From state #299
From state #300
From state #301
 [non term 222->state 302] [non term 223->state 303]
From state #302
 [non term 91->state 308] [non term 92->state 196] [non term 93->state 201]
From state #303
From state #304
 [non term 224->state 305]
From state #305
 [non term 32->state 306] [non term 135->state 186]
From state #306
From state #307
From state #308
From state #309
 [non term 228->state 310]
From state #310
 [non term 90->state 311] [non term 180->state 197]
From state #311
From state #312
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 100] [non term 45->state 314] [non term 53->state 88]
 [non term 56->state 93] [non term 69->state 90] [non term 77->state 82]
 [non term 206->state 51] [non term 207->state 49]
From state #313
From state #314
From state #315
From state #316
 [non term 170->state 338]
From state #317
From state #318
 [non term 141->state 220] [non term 163->state 224] [non term 205->state 223]
From state #319
 [non term 170->state 320]
From state #320
 [non term 103->state 322]
From state #321
From state #322
From state #323
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 100] [non term 45->state 325] [non term 53->state 88]
 [non term 56->state 93] [non term 69->state 90] [non term 77->state 82]
 [non term 206->state 51] [non term 207->state 49]
From state #324
From state #325
From state #326
 [non term 32->state 327] [non term 135->state 186]
From state #327
From state #328
 [non term 32->state 329] [non term 135->state 186]
From state #329
From state #330
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 332] [non term 53->state 88] [non term 56->state 93]
 [non term 69->state 90] [non term 77->state 82] [non term 206->state 51]
 [non term 207->state 49]
From state #331
 [non term 170->state 336]
From state #332
From state #333
 [non term 170->state 334]
From state #334
 [non term 103->state 322]
From state #335
From state #336
 [non term 103->state 322]
From state #337
From state #338
 [non term 103->state 322]
From state #339
From state #340
From state #341
 [non term 6->state 348] [non term 7->state 55] [non term 8->state 58]
 [non term 10->state 61] [non term 12->state 54] [non term 13->state 62]
 [non term 206->state 51] [non term 207->state 49]
From state #342
From state #343
 [non term 136->state 344]
From state #344
 [non term 22->state 341] [non term 44->state 345]
From state #345
From state #346
From state #347
From state #348
From state #349
 [non term 1->state 102] [non term 7->state 89] [non term 10->state 95]
 [non term 19->state 100] [non term 45->state 350] [non term 53->state 88]
 [non term 56->state 93] [non term 69->state 90] [non term 77->state 82]
 [non term 206->state 51] [non term 207->state 49]
From state #350
From state #351
 [non term 120->state 8] [non term 199->state 352]
From state #352
-----------------------------
------- CUP v0.11b 20141202 (SVN rev 60) Parser Generation Summary -------
  0 errors and 149 warnings
  69 terminals, 231 non-terminals, and 241 productions declared, 
  producing 353 unique parse states.
  133 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  3 conflicts detected (3 expected).
  Code written to "Parser.java", and "sym.java".
---------------------------------------------------- (CUP v0.11b 20141202 (SVN rev 60))

// import java-cup-11b-runtime.*;
// package compiler.generated;

import java.io.*;
import java_cup.runtime.*;

// parser code {: public Parser (java.io.Reader input) { super(new Yylex(input)); } :};

/* Preliminaries to set up and use the scanner.  */
// init with {: getScanner().init();              :};
// scan with {: return getScanner().next_token(); :};

// parser code {:	public Yylex lexer; :};

// init with {: 	        lexer = new Yylex(System.in); :};
// scan with {:		return lexer.next_token(); :};

parser code {: 
  public Parser(Yylex lex) {
    super(lex);
  }
  public static void main(String[] args)
  {
  	 try
  	 {
  	 		 Yylex scanner = new Yylex(new BufferedReader(new FileReader(args[0])));
		 System.out.println("Start parsing \"" + args[0] + "\"...");
	      
	      // start parsing
	      Parser p = new Parser(scanner);
		 System.out.println("Nearing end \"" + args[0] + "\"...");
	      Symbol s = p.debug_parse();
  	 }
  	 catch(Exception e)
  	 {
  	 	    e.printStackTrace();
  	 }
  }
:};


// ############################################### IDENTIFIERS #######################################################

terminal String identifier;
// ############################################### LITERALS  TERMINALS#######################################################

terminal String int_lit, imaginary_lit, float_lit, rune_lit, string_lit;

// ############################################### LITERALS  NON-TERMINALS#######################################################


// ############################################### KEYWORD TERMINALS #######################################################
terminal breakd, defaultd, funcd, interfaced, select, cased, defer, go, map, struct, chan, elsed, gotod;
terminal packaged, switchd, constd, fallthrough, ifd, range, type, continued, ford, importd, returnd, var;

// ############################################### OPERATORS TERMINALS #######################################################

terminal or_op, and_op; //specially created 

terminal equal_equal_op, not_equal_op, less_op, less_equal_op, greater_op, greater_equal_op;
terminal plus_op, minus_op, pipe_op, pow_op;

terminal star_op, div_op, mod_op, left_shift_op, right_shift_op, amp_op, amp_pow_op;
terminal not_op, chan_op;

// ############################################ DELIMITERS AND SPECIAL TOKEN TERMINALS #####################################

terminal open_brac, close_brac, open_square_brac, close_square_brac, open_curly_brac, close_curly_brac;
terminal inc_op, short_ass, comma, semicolon, dec_op;
terminal tri_dot, dot, colon;
terminal equal;

// ############################################### OPERATORS NONTERMINALS #######################################################

non terminal binary_op;
non terminal unary_op, rel_op, add_op, mul_op; 
non terminal assign_op;

// ############################################### PREDEFINED TYPES TERMINALS #######################################################

/*terminal predefined_type;
terminal predefined_function;
terminal predefined_constant;
terminal predefined_zero_value;*/

// ############################################### NON-TERMINALS #######################################################

non terminal Type, TypeName, TypeLit, QualifiedIdent, ArrayType, StructType, PointerType;
non terminal FunctionType, InterfaceType, SliceType, MapType, ChannelType;
non terminal ArrayLength, Expression; // ElementType, 
non terminal FieldDecl, IdentifierList, AnonymousField;// Tag;
// non terminal BaseType;
non terminal Signature, Parameters, Result, ParameterList, ParameterDecl;
non terminal MethodSpec, MethodName, InterfaceTypeName;
non terminal KeyType;


non terminal StatementList, Statement, Block;



non terminal Declaration, ConstDecl, TypeDecl, VarDecl, TopLevelDecl, FunctionDecl, MethodDecl;
non terminal ConstSpec, ExpressionList;
non terminal TypeSpec;
non terminal VarSpec;
non terminal ShortVarDecl;
non terminal FunctionName, Function, FunctionBody; // Signature
non terminal Receiver;


non terminal Operand, OperandName, MethodExpr, BasicLit, CompositeLit, FunctionLit, Literal; // Expression
non terminal PackageName; // QualifiedIdent
non terminal LiteralType, LiteralValue, ElementList, Element, Key, Value, FieldName, ElementIndex;
non terminal PrimaryExpr;		// added 
non terminal Conversion, Selector, Index, Slice, TypeAssertion, Arguments;
non terminal ReceiverType;
non terminal UnaryExpr;

non terminal LabeledStmt, SimpleStmt, GoStmt, ReturnStmt, BreakStmt, ContinueStmt;	// Declaration
non terminal GotoStmt, FallthroughStmt, IfStmt, SwitchStmt, SelectStmt, ForStmt, DeferStmt; // Block

non terminal EmptyStmt, ExpressionStmt, SendStmt, IncDecStmt, Assignment; // ShortVarDecl

non terminal Label; // LabeledStmt

non terminal Channel;

non terminal ExprSwitchStmt, TypeSwitchStmt, ExprCaseClause, ExprSwitchCase; // StatementList
non terminal TypeSwitchGuard, TypeSwitchCase, TypeList, TypeCaseClause;

non terminal Condition, ForClause, RangeClause, InitStmt, PostStmt;

non terminal CommClause, CommCase, RecvStmt, RecvExpr;

non terminal SourceFile, PackageClause, ImportDecl, ImportSpec, ImportPath; // TopLevelDecl, PackageName

// ############################################### UNNECESSARY NON-TERMINALS #######################################################

// TYPE RULES UNNECESSARY NON TERMINALS
non terminal StructType_unnecessary_1, FieldDecl_unnecessary_1, FieldDecl_unnecessary_2, AnonymousField_unnecessary_1;
non terminal Signature_unnecessary_1, Parameters_unnecessary_1, Parameters_unnecessary_2;
non terminal ParameterList_unnecessary_1, ParameterDecl_unnecessary_1, ParameterDecl_unnecessary_2;
non terminal InterfaceType_unnecessary_1, ChannelType_unnecessary_1;

// BLOCK RULES UNNECESSARY NON TERMINALS
non terminal StatementList_unnecessary_1;

// DECLARATION AND SCOPE RULES UNNECESSARY NON TERMINALS
non terminal ConstDecl_unnecessary_1, ConstDecl_unnecessary_2, ConstSpec_unnecessary_1, ConstSpec_unnecessary_2;
non terminal IdentifierList_unnecessary_1, ExpressionList_unnecessary_1, TypeDecl_unnecessary_1, TypeDecl_unnecessary_2;
non terminal VarDecl_unnecessary_1, VarDecl_unnecessary_2, VarSpec_unnecessary_1, VarSpec_unnecessary_2;
non terminal FunctionDecl_unnecessary_1, MethodDecl_unnecessary_1;

// EXPRESSION RULES UNNECESSARY NON TERMINALS
non terminal LiteralValue_unnecessary_1, LiteralValue_unnecessary_2, ElementList_unnecessary_1, Element_unnecessary_1;
non terminal Slice_unnecessary_1, Slice_unnecessary_2, Slice_unnecessary_3;
non terminal Arguments_unnecessary_1, Arguments_unnecessary_2, Arguments_unnecessary_3, Arguments_unnecessary_4, Arguments_unnecessary_5;

// OPERATORS RULES UNNECESSARY NON TERMINALS
non terminal Conversion_unnecessary_1;

// STATEMENT RULES UNNECESSARY NON TERMINALS
non terminal IncDecStmt_unnecessary_1, assign_op_unnecessary_1, IfStmt_unnecessary_1, IfStmt_unnecessary_2, IfStmt_unnecessary_3;
non terminal ExprSwitchStmt_unnecessary_1, ExprSwitchStmt_unnecessary_2, ExprSwitchStmt_unnecessary_3;
non terminal TypeCaseClause_unnecessary_1, TypeSwitchStmt_unnecessary_1, TypeSwitchStmt_unnecessary_2;
non terminal TypeSwitchGuard_unnecessary_1, TypeSwitchGuard_unnecessary_2, TypeList_unnecessary_1, TypeList_unnecessary_2;
non terminal CommClause_unnecessary_1;
non terminal ForStmt_unnecessary_1, ForStmt_unnecessary_2, InitStmt_unnecessary_1, Condition_unnecessary_1, PostStmt_unnecessary_1;
non terminal RangeClause_unnecessary_1, RangeClause_unnecessary_2, CommClause_unneccesary_1, CommCase_unncessary_1, RecvStmt_unncessary_1;
non terminal ReturnStmt_unnecessary_1, Label_unnecessary_1;

// PACKAGES RULES UNNECESSARY NON TERMINALS
non terminal SourceFile_unnecessary_1, SourceFile_unnecessary_2, ImportDecl_unnecessary_1, ImportDecl_unnecessary_2, ImportSpec_unnecessary_1;



non terminal QualifiedIdent_dash, IdentifierList_unnecessary_1_dash, SourceFile_unnecessary_1_dash, SourceFile_unnecessary_2_dash;
non terminal ParameterList_unnecessary_1_dash;
// ############################################### PRECEDENCE & ASSOCIATIVITY #######################################################



/*
	Precedence    Operator
    5             *  /  %  <<  >>  &  &^
    4             +  -  |  ^
    3             ==  !=  <  <=  >  >=
    2             &&
    1             ||
 */

precedence left or_op;
precedence left and_op;
precedence left equal_equal_op, not_equal_op, less_op, less_equal_op, greater_op, greater_equal_op;
precedence left plus_op, minus_op, pipe_op, pow_op;
precedence left star_op, div_op, mod_op, left_shift_op, right_shift_op, and_op, amp_pow_op;
precedence nonassoc equal;


// ############################################### START RULE #######################################################

start with SourceFile;

// ############################################### TYPE RULES #######################################################

FunctionType   ::= funcd Signature;

QualifiedIdent ::= identifier dot identifier ;

Type      ::= TypeName | TypeLit ;//| open_brac Type close_brac ;

TypeName  ::= identifier | QualifiedIdent; 

// TypeName  ::= B | C; // QualifiedIdent
// B ::= C dot C;
// C ::= identifier;

TypeLit   ::= FunctionType;// | InterfaceType | SliceType | MapType | ChannelType;


IdentifierList ::= identifier IdentifierList_unnecessary_1;
IdentifierList_unnecessary_1 ::=  comma identifier IdentifierList_unnecessary_1 | ;

Signature      ::= Parameters Signature_unnecessary_1;
// Signature      ::= Parameters Result | ;
Signature_unnecessary_1 ::= Result | ;
// Signature_unnecessary_1 ::= Parameters | Type | ;
Result         ::= Parameters | Type;

Parameters     ::= open_brac Parameters_unnecessary_2 close_brac ;
// Parameters_unnecessary_2 ::= ParameterList Parameters_unnecessary_1 | ;
Parameters_unnecessary_2 ::= ParameterList| ;
// Parameters_unnecessary_2 ::= ParameterList | SpecialParameter | ;

// SpecialParameter ::= Type SpecialParameter_unnecessary_1;
// SpecialParameter_unnecessary_1 ::= comma Type SpecialParameter_unnecessary_1 | ;
// Parameters_unnecessary_1 ::= comma | ;

ParameterList  ::= ParameterDecl ParameterList_unnecessary_1 ;
ParameterList_unnecessary_1 ::= ParameterList_unnecessary_1 comma ParameterDecl | ;
/*
ParameterDecl  ::= ParameterDecl_unnecessary_1 ParameterDecl_unnecessary_2 Type;
ParameterDecl_unnecessary_1 ::= IdentifierList | ;
ParameterDecl_unnecessary_2 ::= tri_dot | ;*/

// ParameterDecl  ::= IdentifierList Type | tri_dot Type | IdentifierList tri_dot Type;
ParameterDecl  ::= IdentifierList Type | tri_dot Type | IdentifierList tri_dot Type | Type;
// ParameterDecl_unnecessary_1 ::= IdentifierList | ;
// ParameterDecl_unnecessary_2 ::= tri_dot | ;

Block ::= open_curly_brac StatementList close_curly_brac;
StatementList ::=  Statement semicolon StatementList | ;
// StatementList_unnecessary_1 ::=  ; 


FunctionDecl ::= funcd FunctionName FunctionDecl_unnecessary_1;
FunctionDecl_unnecessary_1 ::= Function | Signature ; 
FunctionName ::= identifier;
Function     ::= Signature FunctionBody;
FunctionBody ::= Block; //TODO block


TopLevelDecl  ::= FunctionDecl;


ImportDecl       ::= importd ImportDecl_unnecessary_2 ;
ImportDecl_unnecessary_1 ::= ImportSpec semicolon ImportDecl_unnecessary_1 | ;
ImportDecl_unnecessary_2 ::= ImportSpec | open_brac ImportDecl_unnecessary_1 close_brac ;

ImportSpec       ::= ImportSpec_unnecessary_1 ImportPath ;
ImportSpec_unnecessary_1 ::= dot | identifier | ;
ImportPath       ::= string_lit ;



PackageClause  ::= packaged identifier;
// PackageName    ::= identifier;



SourceFile ::= PackageClause semicolon SourceFile_unnecessary_1 SourceFile_unnecessary_2;
SourceFile_unnecessary_1 ::= ImportDecl semicolon SourceFile_unnecessary_1 | ;
SourceFile_unnecessary_2 ::= TopLevelDecl semicolon SourceFile_unnecessary_2 | ;


===== Productions =====
[0] $START ::= SourceFile EOF 
[1] Type ::= TypeName 
[2] Type ::= TypeLit 
[3] Type ::= open_brac Type close_brac 
[4] TypeName ::= B 
[5] TypeName ::= C 
[6] B ::= C dot identifier 
[7] C ::= identifier 
[8] TypeLit ::= ArrayType 
[9] TypeLit ::= PointerType 
[10] TypeLit ::= FunctionType 
[11] ArrayType ::= open_square_brac ArrayLength close_square_brac Type 
[12] ArrayLength ::= int_lit 
[13] PointerType ::= star_op Type 
[14] Func_call ::= TypeName open_brac close_brac 
[15] Func_call ::= TypeName open_brac ExpressionList close_brac 
[16] FunctionType ::= funcd Signature 
[17] Signature ::= Parameters Parameters 
[18] Signature ::= Parameters Type 
[19] Signature ::= Parameters 
[20] Parameters ::= open_brac ParameterList close_brac 
[21] Parameters ::= open_brac close_brac 
[22] ParameterList ::= ParameterDecl ParameterList_unnecessary_1 
[23] ParameterList_unnecessary_1 ::= ParameterList_unnecessary_1 comma ParameterDecl 
[24] ParameterList_unnecessary_1 ::= 
[25] ParameterDecl ::= IdentifierList Type 
[26] ParameterDecl ::= Type 
[27] NT$0 ::= 
[28] Block ::= open_curly_brac NT$0 StatementList close_curly_brac 
[29] StatementList ::= StatementList_unnecessary_1 
[30] StatementList_unnecessary_1 ::= StatementList_unnecessary_1 Statement semicolon 
[31] StatementList_unnecessary_1 ::= 
[32] TopLevelDecl ::= FunctionDecl 
[33] TopLevelDecl ::= Declaration 
[34] NT$1 ::= 
[35] FunctionDecl ::= funcd identifier NT$1 FunctionDecl_unnecessary_1 
[36] FunctionDecl_unnecessary_1 ::= Function 
[37] FunctionDecl_unnecessary_1 ::= Signature 
[38] NT$2 ::= 
[39] Function ::= Signature NT$2 FunctionBody 
[40] FunctionBody ::= open_curly_brac StatementList close_curly_brac 
[41] Declaration ::= ConstDecl 
[42] Declaration ::= VarDecl 
[43] ConstDecl ::= constd ConstDecl_unnecessary_2 
[44] ConstDecl_unnecessary_1 ::= ConstDecl_unnecessary_1 ConstSpec semicolon 
[45] ConstDecl_unnecessary_1 ::= 
[46] ConstDecl_unnecessary_2 ::= ConstSpec 
[47] ConstDecl_unnecessary_2 ::= open_brac ConstDecl_unnecessary_1 close_brac 
[48] ConstSpec ::= IdentifierList Type equal ExpressionList 
[49] IdentifierList ::= identifier IdentifierList_unnecessary_1 
[50] IdentifierList_unnecessary_1 ::= comma identifier IdentifierList_unnecessary_1 
[51] IdentifierList_unnecessary_1 ::= 
[52] ExpressionList ::= Expression ExpressionList_unnecessary_1 
[53] ExpressionList_unnecessary_1 ::= ExpressionList_unnecessary_1 comma Expression 
[54] ExpressionList_unnecessary_1 ::= 
[55] VarDecl ::= var VarDecl_unnecessary_2 
[56] VarDecl_unnecessary_1 ::= VarDecl_unnecessary_1 VarSpec semicolon 
[57] VarDecl_unnecessary_1 ::= 
[58] VarDecl_unnecessary_2 ::= VarSpec 
[59] VarDecl_unnecessary_2 ::= open_brac VarDecl_unnecessary_1 close_brac 
[60] VarSpec ::= IdentifierList VarSpec_unnecessary_2 
[61] VarSpec_unnecessary_1 ::= equal ExpressionList 
[62] VarSpec_unnecessary_1 ::= 
[63] VarSpec_unnecessary_2 ::= Type VarSpec_unnecessary_1 
[64] VarSpec_unnecessary_2 ::= equal ExpressionList 
[65] Operand ::= BasicLit 
[66] Operand ::= ArrayType LiteralValue 
[67] Operand ::= TypeName 
[68] Operand ::= open_brac Expression close_brac 
[69] BasicLit ::= int_lit 
[70] BasicLit ::= float_lit 
[71] BasicLit ::= imaginary_lit 
[72] BasicLit ::= rune_lit 
[73] BasicLit ::= string_lit 
[74] NT$3 ::= 
[75] LiteralValue ::= open_curly_brac LiteralValue_unnecessary_2 NT$3 close_curly_brac 
[76] LiteralValue_unnecessary_1 ::= comma 
[77] LiteralValue_unnecessary_1 ::= 
[78] NT$4 ::= 
[79] LiteralValue_unnecessary_2 ::= ElementList NT$4 LiteralValue_unnecessary_1 
[80] LiteralValue_unnecessary_2 ::= 
[81] ElementList ::= Element ElementList_unnecessary_1 
[82] ElementList_unnecessary_1 ::= ElementList_unnecessary_1 comma Element 
[83] ElementList_unnecessary_1 ::= 
[84] Element ::= Value 
[85] Value ::= Expression 
[86] Value ::= LiteralValue 
[87] PrimaryExpr ::= Operand 
[88] PrimaryExpr ::= PrimaryExpr Index 
[89] Index ::= open_square_brac Expression close_square_brac 
[90] Expression ::= UnaryExpr 
[91] Expression ::= Expression or_op Expression 
[92] Expression ::= Expression and_op Expression 
[93] Expression ::= Expression plus_op Expression 
[94] Expression ::= Expression minus_op Expression 
[95] Expression ::= Expression pipe_op Expression 
[96] Expression ::= Expression pow_op Expression 
[97] Expression ::= Expression equal_equal_op Expression 
[98] Expression ::= Expression not_equal_op Expression 
[99] Expression ::= Expression greater_equal_op Expression 
[100] Expression ::= Expression greater_op Expression 
[101] Expression ::= Expression less_equal_op Expression 
[102] Expression ::= Expression less_op Expression 
[103] Expression ::= Expression star_op Expression 
[104] Expression ::= Expression div_op Expression 
[105] Expression ::= Expression mod_op Expression 
[106] Expression ::= Expression left_shift_op Expression 
[107] Expression ::= Expression right_shift_op Expression 
[108] Expression ::= Expression amp_pow_op Expression 
[109] UnaryExpr ::= PrimaryExpr 
[110] UnaryExpr ::= unary_op UnaryExpr 
[111] binary_op ::= or_op 
[112] binary_op ::= and_op 
[113] binary_op ::= rel_op 
[114] binary_op ::= add_op 
[115] binary_op ::= mul_op 
[116] rel_op ::= equal_equal_op 
[117] rel_op ::= not_equal_op 
[118] rel_op ::= less_op 
[119] rel_op ::= less_equal_op 
[120] rel_op ::= greater_op 
[121] rel_op ::= greater_equal_op 
[122] add_op ::= plus_op 
[123] add_op ::= minus_op 
[124] add_op ::= pipe_op 
[125] add_op ::= pow_op 
[126] mul_op ::= star_op 
[127] mul_op ::= div_op 
[128] mul_op ::= mod_op 
[129] mul_op ::= left_shift_op 
[130] mul_op ::= right_shift_op 
[131] mul_op ::= amp_op 
[132] mul_op ::= amp_pow_op 
[133] unary_op ::= plus_op 
[134] unary_op ::= minus_op 
[135] unary_op ::= not_op 
[136] unary_op ::= pow_op 
[137] unary_op ::= star_op 
[138] unary_op ::= amp_op 
[139] Statement ::= Declaration 
[140] Statement ::= SimpleStmt 
[141] Statement ::= Func_call 
[142] Statement ::= ReturnStmt 
[143] Statement ::= BreakStmt 
[144] Statement ::= ContinueStmt 
[145] Statement ::= GotoStmt 
[146] Statement ::= LabeledStmt 
[147] Statement ::= Block 
[148] Statement ::= IfStmt 
[149] Statement ::= SwitchStmt 
[150] Statement ::= LabeledForStmt 
[151] Statement ::= ForStmt 
[152] SimpleStmt ::= Expression SimpleStmt_unnecessary_1 
[153] SimpleStmt ::= 
[154] SimpleStmt_unnecessary_1 ::= ExpressionList_unnecessary_1 assign_op ExpressionList 
[155] SimpleStmt_unnecessary_1 ::= IncDecStmt_unnecessary_1 
[156] SimpleStmt_unnecessary_1 ::= ExpressionList_unnecessary_1 assign_op Func_call 
[157] SimpleStmt_unnecessary_1 ::= 
[158] IncDecStmt_unnecessary_1 ::= inc_op 
[159] IncDecStmt_unnecessary_1 ::= dec_op 
[160] assign_op ::= assign_op_unnecessary_1 equal 
[161] assign_op_unnecessary_1 ::= add_op 
[162] assign_op_unnecessary_1 ::= mul_op 
[163] assign_op_unnecessary_1 ::= 
[164] NT$5 ::= 
[165] Cheez ::= ifd Expression NT$5 open_curly_brac StatementList close_curly_brac 
[166] NT$6 ::= 
[167] Cheez2 ::= ifd SimpleStmt semicolon Expression NT$6 open_curly_brac StatementList close_curly_brac 
[168] NT$7 ::= 
[169] IfStmt ::= Cheez2 elsed NT$7 IfStmt 
[170] NT$8 ::= 
[171] NT$9 ::= 
[172] IfStmt ::= Cheez2 elsed NT$8 open_curly_brac NT$9 StatementList close_curly_brac 
[173] IfStmt ::= Cheez2 
[174] NT$10 ::= 
[175] IfStmt ::= Cheez elsed NT$10 IfStmt 
[176] NT$11 ::= 
[177] NT$12 ::= 
[178] IfStmt ::= Cheez elsed NT$11 open_curly_brac NT$12 StatementList close_curly_brac 
[179] IfStmt ::= Cheez 
[180] SwitchStmt ::= ExprSwitchStmt 
[181] ExprSwitchStmt ::= switchd SimpleStmt semicolon Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac 
[182] ExprSwitchStmt ::= switchd Expression open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac 
[183] ExprSwitchStmt ::= switchd open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac 
[184] ExprSwitchStmt ::= switchd SimpleStmt semicolon open_curly_brac ExprSwitchStmt_unnecessary_3 close_curly_brac 
[185] ExprSwitchStmt_unnecessary_3 ::= ExprSwitchStmt_unnecessary_3 ExprCaseClause 
[186] ExprSwitchStmt_unnecessary_3 ::= 
[187] ExprCaseClause ::= cased ExpressionList colon StatementList 
[188] ExprCaseClause ::= defaultd colon StatementList 
[189] NT$13 ::= 
[190] NT$14 ::= 
[191] ForStmt ::= ford NT$13 ForStmt_unnecessary_1 NT$14 open_curly_brac StatementList close_curly_brac 
[192] ForStmt ::= ForStmt_unnecessary_2 open_curly_brac StatementList close_curly_brac 
[193] ForStmt_unnecessary_2 ::= ford 
[194] ForStmt_unnecessary_1 ::= Expression 
[195] ForStmt_unnecessary_1 ::= ForClause 
[196] NT$15 ::= 
[197] ForClause ::= ForClause_Unneccesary Condition_unnecessary_1 semicolon NT$15 SimpleStmt 
[198] ForClause_Unneccesary ::= SimpleStmt semicolon 
[199] Condition_unnecessary_1 ::= Expression 
[200] Condition_unnecessary_1 ::= 
[201] ReturnStmt ::= returnd ExpressionList 
[202] ReturnStmt ::= returnd 
[203] BreakStmt ::= breakd identifier 
[204] BreakStmt ::= breakd 
[205] Label ::= identifier colon 
[206] LabeledStmt ::= Label Declaration 
[207] LabeledStmt ::= Label SimpleStmt 
[208] LabeledStmt ::= Label Func_call 
[209] LabeledStmt ::= Label ReturnStmt 
[210] LabeledStmt ::= Label BreakStmt 
[211] LabeledStmt ::= Label ContinueStmt 
[212] LabeledStmt ::= Label GotoStmt 
[213] LabeledStmt ::= Label LabeledStmt 
[214] LabeledStmt ::= Label Block 
[215] LabeledStmt ::= Label IfStmt 
[216] LabeledStmt ::= Label SwitchStmt 
[217] LabeledStmt ::= Label LabeledForStmt 
[218] NT$16 ::= 
[219] LabeledForStmt ::= identifier colon NT$16 ForStmt 
[220] GotoStmt ::= gotod identifier 
[221] ContinueStmt ::= continued identifier 
[222] ContinueStmt ::= continued 
[223] NT$17 ::= 
[224] NT$18 ::= 
[225] SourceFile ::= NT$17 PackageClause semicolon SourceFile_unnecessary_1 NT$18 SourceFile_unnecessary_2 
[226] SourceFile_unnecessary_1 ::= SourceFile_unnecessary_1_dash 
[227] SourceFile_unnecessary_1_dash ::= ImportDecl semicolon SourceFile_unnecessary_1_dash 
[228] SourceFile_unnecessary_1_dash ::= 
[229] SourceFile_unnecessary_2 ::= SourceFile_unnecessary_2_dash 
[230] SourceFile_unnecessary_2_dash ::= TopLevelDecl semicolon SourceFile_unnecessary_2_dash 
[231] SourceFile_unnecessary_2_dash ::= 
[232] PackageClause ::= packaged identifier 
[233] ImportDecl ::= importd ImportDecl_unnecessary_2 
[234] ImportDecl_unnecessary_1 ::= ImportDecl_unnecessary_1 ImportSpec semicolon 
[235] ImportDecl_unnecessary_1 ::= 
[236] ImportDecl_unnecessary_2 ::= ImportSpec 
[237] ImportDecl_unnecessary_2 ::= open_brac ImportDecl_unnecessary_1 close_brac 
[238] ImportSpec ::= dot string_lit 
[239] ImportSpec ::= identifier string_lit 
[240] ImportSpec ::= string_lit 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [SourceFile ::= (*) NT$17 PackageClause semicolon SourceFile_unnecessary_1 NT$18 SourceFile_unnecessary_2 , {EOF }]
  [NT$17 ::= (*) , {packaged }]
  [$START ::= (*) SourceFile EOF , {EOF }]
}
transition on SourceFile to state [2]
transition on NT$17 to state [1]

-------------------
